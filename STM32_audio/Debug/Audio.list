
Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800b17c  0800b17c  0000c17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6bc  0800b6bc  0000d17c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6bc  0800b6bc  0000c6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6c4  0800b6c4  0000d17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6c4  0800b6c4  0000c6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b6c8  0800b6c8  0000c6c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  0800b6cc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002fc8  2000017c  0800b848  0000d17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003144  0800b848  0000e144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2d5  00000000  00000000  0000d1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bb5  00000000  00000000  0002b481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00030038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000012c9  00000000  00000000  000318b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ba56  00000000  00000000  00032b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000216d4  00000000  00000000  0005e5cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faeac  00000000  00000000  0007fca3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017ab4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d98  00000000  00000000  0017ab94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0018192c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b164 	.word	0x0800b164

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	0800b164 	.word	0x0800b164

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MCP17023_write_register>:
uint8_t Spitxbuffer[3];
uint8_t led_state = 0xFF;
volatile int spi_tx_complete = 0;


void MCP17023_write_register(uint8_t addr, uint8_t value){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]

		Spitxbuffer[0] = MCP23S17_WRITE_OPCODE;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <MCP17023_write_register+0x4c>)
 80005a2:	2240      	movs	r2, #64	@ 0x40
 80005a4:	701a      	strb	r2, [r3, #0]
		Spitxbuffer[1] = addr;
 80005a6:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <MCP17023_write_register+0x4c>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	7053      	strb	r3, [r2, #1]
		Spitxbuffer[2] = value;
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <MCP17023_write_register+0x4c>)
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	7093      	strb	r3, [r2, #2]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <MCP17023_write_register+0x50>)
 80005b8:	f001 ff7e 	bl	80024b8 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi3, Spitxbuffer, 3, HAL_MAX_DELAY);
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2203      	movs	r2, #3
 80005c2:	4906      	ldr	r1, [pc, #24]	@ (80005dc <MCP17023_write_register+0x4c>)
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <MCP17023_write_register+0x54>)
 80005c6:	f005 fd31 	bl	800602c <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <MCP17023_write_register+0x50>)
 80005d0:	f001 ff72 	bl	80024b8 <HAL_GPIO_WritePin>

}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000198 	.word	0x20000198
 80005e0:	48000400 	.word	0x48000400
 80005e4:	200006a0 	.word	0x200006a0

080005e8 <MCP17023_init>:

void MCP17023_init(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	MCP17023_write_register(GPIOA_REG, 0xFF);
 80005ec:	21ff      	movs	r1, #255	@ 0xff
 80005ee:	2012      	movs	r0, #18
 80005f0:	f7ff ffce 	bl	8000590 <MCP17023_write_register>
	MCP17023_write_register(GPIOB_REG, 0xFF);
 80005f4:	21ff      	movs	r1, #255	@ 0xff
 80005f6:	2013      	movs	r0, #19
 80005f8:	f7ff ffca 	bl	8000590 <MCP17023_write_register>
	MCP17023_write_register(IODIRA_REG, 0x00);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ffc6 	bl	8000590 <MCP17023_write_register>
	MCP17023_write_register(IODIRB_REG, 0x00);
 8000604:	2100      	movs	r1, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ffc2 	bl	8000590 <MCP17023_write_register>

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <MCP17023_set_led>:

void MCP17023_set_led (uint8_t addrled){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]

	MCP17023_write_register(GPIOA_REG, addrled);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4619      	mov	r1, r3
 800061e:	2012      	movs	r0, #18
 8000620:	f7ff ffb6 	bl	8000590 <MCP17023_write_register>
	MCP17023_write_register(GPIOB_REG, addrled);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4619      	mov	r1, r3
 8000628:	2013      	movs	r0, #19
 800062a:	f7ff ffb1 	bl	8000590 <MCP17023_write_register>

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <MCP17023_chenillard>:

void MCP17023_chenillard(char **argv){
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]

	uint8_t actual_led = 0xFF;
 800063e:	23ff      	movs	r3, #255	@ 0xff
 8000640:	73fb      	strb	r3, [r7, #15]

	for(;;){

		if (actual_led == 0x00){
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <MCP17023_chenillard+0x16>
			actual_led = 0XFF;
 8000648:	23ff      	movs	r3, #255	@ 0xff
 800064a:	73fb      	strb	r3, [r7, #15]
		}

		actual_led <<= 1;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	005b      	lsls	r3, r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
		MCP17023_set_led(actual_led);
 8000652:	7bfb      	ldrb	r3, [r7, #15]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ffdb 	bl	8000610 <MCP17023_set_led>

		HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800065e:	f001 fa65 	bl	8001b2c <HAL_Delay>
		if (actual_led == 0x00){
 8000662:	e7ee      	b.n	8000642 <MCP17023_chenillard+0xc>

08000664 <MCP17023_led>:
	}
}

void MCP17023_led(char **argv){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	int nbrLed = atoi(argv[1]);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3304      	adds	r3, #4
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f009 fc80 	bl	8009f78 <atoi>
 8000678:	60f8      	str	r0, [r7, #12]
	int setReset = atoi(argv[2]);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3308      	adds	r3, #8
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f009 fc79 	bl	8009f78 <atoi>
 8000686:	60b8      	str	r0, [r7, #8]

	printf("Numero de led %d, set %d \r\n", nbrLed, setReset);
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	68f9      	ldr	r1, [r7, #12]
 800068c:	481f      	ldr	r0, [pc, #124]	@ (800070c <MCP17023_led+0xa8>)
 800068e:	f009 fdbd 	bl	800a20c <iprintf>

	if(nbrLed < 0 || nbrLed >= 8){
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db02      	blt.n	800069e <MCP17023_led+0x3a>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b07      	cmp	r3, #7
 800069c:	dd03      	ble.n	80006a6 <MCP17023_led+0x42>
		printf("Le nombre de led est pas valide \r\n");
 800069e:	481c      	ldr	r0, [pc, #112]	@ (8000710 <MCP17023_led+0xac>)
 80006a0:	f009 fe1c 	bl	800a2dc <puts>
		return;
 80006a4:	e02f      	b.n	8000706 <MCP17023_led+0xa2>
	}

	if(setReset < 0 || setReset > 1){
 80006a6:	68bb      	ldr	r3, [r7, #8]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	db02      	blt.n	80006b2 <MCP17023_led+0x4e>
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	dd03      	ble.n	80006ba <MCP17023_led+0x56>
		printf("Veuillez saisir un deuxième argument correct \r\n");
 80006b2:	4818      	ldr	r0, [pc, #96]	@ (8000714 <MCP17023_led+0xb0>)
 80006b4:	f009 fe12 	bl	800a2dc <puts>
		return;
 80006b8:	e025      	b.n	8000706 <MCP17023_led+0xa2>
	}

    if (setReset == 1) {
 80006ba:	68bb      	ldr	r3, [r7, #8]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d10f      	bne.n	80006e0 <MCP17023_led+0x7c>
        // Action: SET (éteindre la LED correspondante en mettant le bit à 1)
        led_state &= ~(1 << nbrLed);
 80006c0:	2201      	movs	r2, #1
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	b25b      	sxtb	r3, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	b25a      	sxtb	r2, r3
 80006ce:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MCP17023_led+0xb4>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b25b      	sxtb	r3, r3
 80006d4:	4013      	ands	r3, r2
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MCP17023_led+0xb4>)
 80006dc:	701a      	strb	r2, [r3, #0]
 80006de:	e00c      	b.n	80006fa <MCP17023_led+0x96>
    } else {
        // Action: RESET (allumer la LED correspondante en mettant le bit à 0)
        led_state |= (1 << nbrLed);
 80006e0:	2201      	movs	r2, #1
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	b25a      	sxtb	r2, r3
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MCP17023_led+0xb4>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	b25b      	sxtb	r3, r3
 80006f0:	4313      	orrs	r3, r2
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <MCP17023_led+0xb4>)
 80006f8:	701a      	strb	r2, [r3, #0]
    }


    MCP17023_set_led(led_state);
 80006fa:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <MCP17023_led+0xb4>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ff86 	bl	8000610 <MCP17023_set_led>

    return;
 8000704:	bf00      	nop

}
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	0800b17c 	.word	0x0800b17c
 8000710:	0800b198 	.word	0x0800b198
 8000714:	0800b1bc 	.word	0x0800b1bc
 8000718:	20000000 	.word	0x20000000

0800071c <HAL_UART_RxCpltCallback>:
 */

/*********** PREEMPTION PRIORITY  ***********/

/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART2) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <HAL_UART_RxCpltCallback+0x44>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d114      	bne.n	8000758 <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 8000732:	4b0c      	ldr	r3, [pc, #48]	@ (8000764 <HAL_UART_RxCpltCallback+0x48>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f107 020c 	add.w	r2, r7, #12
 800073a:	4611      	mov	r1, r2
 800073c:	4618      	mov	r0, r3
 800073e:	f007 fe45 	bl	80083cc <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d007      	beq.n	8000758 <HAL_UART_RxCpltCallback+0x3c>
 8000748:	4b07      	ldr	r3, [pc, #28]	@ (8000768 <HAL_UART_RxCpltCallback+0x4c>)
 800074a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	f3bf 8f4f 	dsb	sy
 8000754:	f3bf 8f6f 	isb	sy
	}
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40004400 	.word	0x40004400
 8000764:	2000019c 	.word	0x2000019c
 8000768:	e000ed04 	.word	0xe000ed04

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_DMA_Init+0x48>)
 8000774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000776:	4a0f      	ldr	r2, [pc, #60]	@ (80007b4 <MX_DMA_Init+0x48>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6493      	str	r3, [r2, #72]	@ 0x48
 800077e:	4b0d      	ldr	r3, [pc, #52]	@ (80007b4 <MX_DMA_Init+0x48>)
 8000780:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2105      	movs	r1, #5
 800078e:	2010      	movs	r0, #16
 8000790:	f001 facb 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000794:	2010      	movs	r0, #16
 8000796:	f001 fae4 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2105      	movs	r1, #5
 800079e:	2011      	movs	r0, #17
 80007a0:	f001 fac3 	bl	8001d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80007a4:	2011      	movs	r0, #17
 80007a6:	f001 fadc 	bl	8001d62 <HAL_NVIC_EnableIRQ>

}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000

080007b8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	4a07      	ldr	r2, [pc, #28]	@ (80007e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80007c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	4a06      	ldr	r2, [pc, #24]	@ (80007e8 <vApplicationGetIdleTaskMemory+0x30>)
 80007ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2280      	movs	r2, #128	@ 0x80
 80007d4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	200001a4 	.word	0x200001a4
 80007e8:	200001f8 	.word	0x200001f8

080007ec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007ec:	b5b0      	push	{r4, r5, r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_FREERTOS_Init+0x30>)
 80007f4:	1d3c      	adds	r4, r7, #4
 80007f6:	461d      	mov	r5, r3
 80007f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000800:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000804:	1d3b      	adds	r3, r7, #4
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f007 fc06 	bl	800801a <osThreadCreate>
 800080e:	4603      	mov	r3, r0
 8000810:	4a03      	ldr	r2, [pc, #12]	@ (8000820 <MX_FREERTOS_Init+0x34>)
 8000812:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bdb0      	pop	{r4, r5, r7, pc}
 800081c:	0800b1f8 	.word	0x0800b1f8
 8000820:	200001a0 	.word	0x200001a0

08000824 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800082c:	2001      	movs	r0, #1
 800082e:	f007 fc40 	bl	80080b2 <osDelay>
 8000832:	e7fb      	b.n	800082c <StartDefaultTask+0x8>

08000834 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	@ 0x28
 8000838:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b38      	ldr	r3, [pc, #224]	@ (800092c <MX_GPIO_Init+0xf8>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084e:	4a37      	ldr	r2, [pc, #220]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000856:	4b35      	ldr	r3, [pc, #212]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b32      	ldr	r3, [pc, #200]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000866:	4a31      	ldr	r2, [pc, #196]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800086c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800086e:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <MX_GPIO_Init+0xf8>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087e:	4a2b      	ldr	r2, [pc, #172]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000886:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000896:	4a25      	ldr	r2, [pc, #148]	@ (800092c <MX_GPIO_Init+0xf8>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800089e:	4b23      	ldr	r3, [pc, #140]	@ (800092c <MX_GPIO_Init+0xf8>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2101      	movs	r1, #1
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b2:	f001 fe01 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2120      	movs	r1, #32
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f001 fdfb 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2180      	movs	r1, #128	@ 0x80
 80008c6:	481a      	ldr	r0, [pc, #104]	@ (8000930 <MX_GPIO_Init+0xfc>)
 80008c8:	f001 fdf6 	bl	80024b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4814      	ldr	r0, [pc, #80]	@ (8000934 <MX_GPIO_Init+0x100>)
 80008e4:	f001 fc3e 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80008e8:	2321      	movs	r3, #33	@ 0x21
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ec:	2301      	movs	r3, #1
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	4619      	mov	r1, r3
 80008fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000902:	f001 fc2f 	bl	8002164 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000906:	2380      	movs	r3, #128	@ 0x80
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <MX_GPIO_Init+0xfc>)
 800091e:	f001 fc21 	bl	8002164 <HAL_GPIO_Init>

}
 8000922:	bf00      	nop
 8000924:	3728      	adds	r7, #40	@ 0x28
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	48000400 	.word	0x48000400
 8000934:	48000800 	.word	0x48000800

08000938 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800093c:	4b1b      	ldr	r3, [pc, #108]	@ (80009ac <MX_I2C2_Init+0x74>)
 800093e:	4a1c      	ldr	r2, [pc, #112]	@ (80009b0 <MX_I2C2_Init+0x78>)
 8000940:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8000942:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <MX_I2C2_Init+0x74>)
 8000944:	4a1b      	ldr	r2, [pc, #108]	@ (80009b4 <MX_I2C2_Init+0x7c>)
 8000946:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000948:	4b18      	ldr	r3, [pc, #96]	@ (80009ac <MX_I2C2_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094e:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <MX_I2C2_Init+0x74>)
 8000950:	2201      	movs	r2, #1
 8000952:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000954:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <MX_I2C2_Init+0x74>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800095a:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <MX_I2C2_Init+0x74>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000960:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <MX_I2C2_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000966:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <MX_I2C2_Init+0x74>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <MX_I2C2_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000972:	480e      	ldr	r0, [pc, #56]	@ (80009ac <MX_I2C2_Init+0x74>)
 8000974:	f001 fdb8 	bl	80024e8 <HAL_I2C_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800097e:	f000 f968 	bl	8000c52 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000982:	2100      	movs	r1, #0
 8000984:	4809      	ldr	r0, [pc, #36]	@ (80009ac <MX_I2C2_Init+0x74>)
 8000986:	f002 fb3b 	bl	8003000 <HAL_I2CEx_ConfigAnalogFilter>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000990:	f000 f95f 	bl	8000c52 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000994:	2100      	movs	r1, #0
 8000996:	4805      	ldr	r0, [pc, #20]	@ (80009ac <MX_I2C2_Init+0x74>)
 8000998:	f002 fb7d 	bl	8003096 <HAL_I2CEx_ConfigDigitalFilter>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80009a2:	f000 f956 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200003f8 	.word	0x200003f8
 80009b0:	40005800 	.word	0x40005800
 80009b4:	10d19ce4 	.word	0x10d19ce4

080009b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0ac      	sub	sp, #176	@ 0xb0
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
 80009ca:	609a      	str	r2, [r3, #8]
 80009cc:	60da      	str	r2, [r3, #12]
 80009ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2288      	movs	r2, #136	@ 0x88
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f009 fd5f 	bl	800a49c <memset>
  if(i2cHandle->Instance==I2C2)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a21      	ldr	r2, [pc, #132]	@ (8000a68 <HAL_I2C_MspInit+0xb0>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d13b      	bne.n	8000a60 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80009e8:	2380      	movs	r3, #128	@ 0x80
 80009ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 f9ff 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000a00:	f000 f927 	bl	8000c52 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a08:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a0a:	f043 0302 	orr.w	r3, r3, #2
 8000a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a10:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a14:	f003 0302 	and.w	r3, r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a1c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000a20:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a24:	2312      	movs	r3, #18
 8000a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000a36:	2304      	movs	r3, #4
 8000a38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	@ (8000a70 <HAL_I2C_MspInit+0xb8>)
 8000a44:	f001 fb8e 	bl	8002164 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a4c:	4a07      	ldr	r2, [pc, #28]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a54:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <HAL_I2C_MspInit+0xb4>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000a60:	bf00      	nop
 8000a62:	37b0      	adds	r7, #176	@ 0xb0
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005800 	.word	0x40005800
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48000400 	.word	0x48000400

08000a74 <__io_putchar>:
void SystemClock_Config(void);
void PeriphCommonClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int chr){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000a7c:	1d39      	adds	r1, r7, #4
 8000a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a82:	2201      	movs	r2, #1
 8000a84:	4803      	ldr	r0, [pc, #12]	@ (8000a94 <__io_putchar+0x20>)
 8000a86:	f005 ff0d 	bl	80068a4 <HAL_UART_Transmit>
	return chr;
 8000a8a:	687b      	ldr	r3, [r7, #4]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000708 	.word	0x20000708

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa2:	f000 ffc7 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa6:	f000 f859 	bl	8000b5c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000aaa:	f000 f8a8 	bl	8000bfe <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aae:	f7ff fec1 	bl	8000834 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ab2:	f7ff fe5b 	bl	800076c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ab6:	f000 feff 	bl	80018b8 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000aba:	f000 fcf7 	bl	80014ac <MX_SPI3_Init>
  MX_I2C2_Init();
 8000abe:	f7ff ff3b 	bl	8000938 <MX_I2C2_Init>
  MX_SAI2_Init();
 8000ac2:	f000 f8cd 	bl	8000c60 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */

  // Initialisation de tout
  MCP17023_init();
 8000ac6:	f7ff fd8f 	bl	80005e8 <MCP17023_init>

  __HAL_SAI_ENABLE(&hsai_BlockA2);
 8000aca:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <main+0xb0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b48 <main+0xb0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000ad8:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ada:	481c      	ldr	r0, [pc, #112]	@ (8000b4c <main+0xb4>)
 8000adc:	f001 fd04 	bl	80024e8 <HAL_I2C_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <main+0x52>
  {
      // Gérer l'erreur d'initialisation I2C
      Error_Handler();
 8000ae6:	f000 f8b4 	bl	8000c52 <Error_Handler>
  }

  // Déclaration et configuration de la structure SGTL5000
  h_sgtl5000.hi2c = &hi2c2;
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <main+0xb4>)
 8000aec:	607b      	str	r3, [r7, #4]
  h_sgtl5000.dev_address = 0x1A << 1; // Adresse I2C du SGTL5000 (shiftée pour STM32)
 8000aee:	2334      	movs	r3, #52	@ 0x34
 8000af0:	813b      	strh	r3, [r7, #8]

  // Initialisation du SGTL5000
  HAL_StatusTypeDef status = sgtl5000_init(&h_sgtl5000);
 8000af2:	1d3b      	adds	r3, r7, #4
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fa9b 	bl	8001030 <sgtl5000_init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	75fb      	strb	r3, [r7, #23]
  if (status != HAL_OK)
 8000afe:	7dfb      	ldrb	r3, [r7, #23]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <main+0x70>
  {
      // Gérer l'erreur d'initialisation du SGTL5000
      Error_Handler();
 8000b04:	f000 f8a5 	bl	8000c52 <Error_Handler>
  }

  shell_init();
 8000b08:	f000 fb3e 	bl	8001188 <shell_init>

  xReturned = xTaskCreate(
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	9301      	str	r3, [sp, #4]
 8000b12:	2300      	movs	r3, #0
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2300      	movs	r3, #0
 8000b18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b1c:	490c      	ldr	r1, [pc, #48]	@ (8000b50 <main+0xb8>)
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <main+0xbc>)
 8000b20:	f007 fed4 	bl	80088cc <xTaskCreate>
 8000b24:	6138      	str	r0, [r7, #16]
		  STACK_SIZE,
		  (void*) NULL,
		  tskIDLE_PRIORITY,
		  &xHandle1);

  if(xReturned != pdPASS){
 8000b26:	693b      	ldr	r3, [r7, #16]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d004      	beq.n	8000b36 <main+0x9e>
	  printf("Le shell fonctionne pas mon reuf. \r\n");
 8000b2c:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <main+0xc0>)
 8000b2e:	f009 fbd5 	bl	800a2dc <puts>
	  Error_Handler();
 8000b32:	f000 f88e 	bl	8000c52 <Error_Handler>
  }

  vTaskStartScheduler();
 8000b36:	f008 f837 	bl	8008ba8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000b3a:	f7ff fe57 	bl	80007ec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000b3e:	f007 fa65 	bl	800800c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b42:	bf00      	nop
 8000b44:	e7fd      	b.n	8000b42 <main+0xaa>
 8000b46:	bf00      	nop
 8000b48:	2000044c 	.word	0x2000044c
 8000b4c:	200003f8 	.word	0x200003f8
 8000b50:	0800b214 	.word	0x0800b214
 8000b54:	0800121d 	.word	0x0800121d
 8000b58:	0800b21c 	.word	0x0800b21c

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b096      	sub	sp, #88	@ 0x58
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	2244      	movs	r2, #68	@ 0x44
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f009 fc96 	bl	800a49c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	463b      	mov	r3, r7
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000b82:	f002 fae3 	bl	800314c <HAL_PWREx_ControlVoltageScaling>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b8c:	f000 f861 	bl	8000c52 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b90:	2302      	movs	r3, #2
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b98:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b9a:	2310      	movs	r3, #16
 8000b9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000baa:	230a      	movs	r3, #10
 8000bac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fb1a 	bl	80031f8 <HAL_RCC_OscConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bca:	f000 f842 	bl	8000c52 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bce:	230f      	movs	r3, #15
 8000bd0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bde:	2300      	movs	r3, #0
 8000be0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000be2:	463b      	mov	r3, r7
 8000be4:	2104      	movs	r1, #4
 8000be6:	4618      	mov	r0, r3
 8000be8:	f002 fee2 	bl	80039b0 <HAL_RCC_ClockConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bf2:	f000 f82e 	bl	8000c52 <Error_Handler>
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3758      	adds	r7, #88	@ 0x58
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b0a2      	sub	sp, #136	@ 0x88
 8000c02:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c04:	463b      	mov	r3, r7
 8000c06:	2288      	movs	r2, #136	@ 0x88
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f009 fc46 	bl	800a49c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000c10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c14:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	66bb      	str	r3, [r7, #104]	@ 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000c22:	230d      	movs	r3, #13
 8000c24:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000c26:	2311      	movs	r3, #17
 8000c28:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000c32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c36:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f003 f8dc 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <PeriphCommonClock_Config+0x4c>
  {
    Error_Handler();
 8000c46:	f000 f804 	bl	8000c52 <Error_Handler>
  }
}
 8000c4a:	bf00      	nop
 8000c4c:	3788      	adds	r7, #136	@ 0x88
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c56:	b672      	cpsid	i
}
 8000c58:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5a:	bf00      	nop
 8000c5c:	e7fd      	b.n	8000c5a <Error_Handler+0x8>
	...

08000c60 <MX_SAI2_Init>:
DMA_HandleTypeDef hdma_sai2_a;
DMA_HandleTypeDef hdma_sai2_b;

/* SAI2 init function */
void MX_SAI2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */

  hsai_BlockA2.Instance = SAI2_Block_A;
 8000c64:	4b2a      	ldr	r3, [pc, #168]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c66:	4a2b      	ldr	r2, [pc, #172]	@ (8000d14 <MX_SAI2_Init+0xb4>)
 8000c68:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000c6a:	4b29      	ldr	r3, [pc, #164]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000c70:	4b27      	ldr	r3, [pc, #156]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000c76:	4b26      	ldr	r3, [pc, #152]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000c7c:	4b24      	ldr	r3, [pc, #144]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000c82:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000c88:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c8a:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000c8e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000c90:	4b1f      	ldr	r3, [pc, #124]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000c96:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000c9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000ca8:	2302      	movs	r3, #2
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <MX_SAI2_Init+0xb0>)
 8000cb0:	f004 fbbc 	bl	800542c <HAL_SAI_InitProtocol>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_SAI2_Init+0x5e>
  {
    Error_Handler();
 8000cba:	f7ff ffca 	bl	8000c52 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000cc0:	4a16      	ldr	r2, [pc, #88]	@ (8000d1c <MX_SAI2_Init+0xbc>)
 8000cc2:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000cd6:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4807      	ldr	r0, [pc, #28]	@ (8000d18 <MX_SAI2_Init+0xb8>)
 8000cfc:	f004 fb96 	bl	800542c <HAL_SAI_InitProtocol>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_SAI2_Init+0xaa>
  {
    Error_Handler();
 8000d06:	f7ff ffa4 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	2000044c 	.word	0x2000044c
 8000d14:	40015804 	.word	0x40015804
 8000d18:	200004d0 	.word	0x200004d0
 8000d1c:	40015824 	.word	0x40015824

08000d20 <HAL_SAI_MspInit>:
static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(saiHandle->Instance==SAI2_Block_A)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a64      	ldr	r2, [pc, #400]	@ (8000ec0 <HAL_SAI_MspInit+0x1a0>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d15e      	bne.n	8000df0 <HAL_SAI_MspInit+0xd0>
    {
    /* SAI2 clock enable */
    if (SAI2_client == 0)
 8000d32:	4b64      	ldr	r3, [pc, #400]	@ (8000ec4 <HAL_SAI_MspInit+0x1a4>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d113      	bne.n	8000d62 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000d3a:	4b63      	ldr	r3, [pc, #396]	@ (8000ec8 <HAL_SAI_MspInit+0x1a8>)
 8000d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d3e:	4a62      	ldr	r2, [pc, #392]	@ (8000ec8 <HAL_SAI_MspInit+0x1a8>)
 8000d40:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d46:	4b60      	ldr	r3, [pc, #384]	@ (8000ec8 <HAL_SAI_MspInit+0x1a8>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2105      	movs	r1, #5
 8000d56:	204b      	movs	r0, #75	@ 0x4b
 8000d58:	f000 ffe7 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000d5c:	204b      	movs	r0, #75	@ 0x4b
 8000d5e:	f001 f800 	bl	8001d62 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000d62:	4b58      	ldr	r3, [pc, #352]	@ (8000ec4 <HAL_SAI_MspInit+0x1a4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a56      	ldr	r2, [pc, #344]	@ (8000ec4 <HAL_SAI_MspInit+0x1a4>)
 8000d6a:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d6c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000d70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000d7e:	230d      	movs	r3, #13
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d82:	f107 0314 	add.w	r3, r7, #20
 8000d86:	4619      	mov	r1, r3
 8000d88:	4850      	ldr	r0, [pc, #320]	@ (8000ecc <HAL_SAI_MspInit+0x1ac>)
 8000d8a:	f001 f9eb 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000d8e:	4b50      	ldr	r3, [pc, #320]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000d90:	4a50      	ldr	r2, [pc, #320]	@ (8000ed4 <HAL_SAI_MspInit+0x1b4>)
 8000d92:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000d94:	4b4e      	ldr	r3, [pc, #312]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d9a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000d9c:	2210      	movs	r2, #16
 8000d9e:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da0:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000da6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000dac:	4b48      	ldr	r3, [pc, #288]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db2:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000db4:	4b46      	ldr	r3, [pc, #280]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000db6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000dba:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000dbc:	4b44      	ldr	r3, [pc, #272]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000dbe:	2220      	movs	r2, #32
 8000dc0:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000dc2:	4b43      	ldr	r3, [pc, #268]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000dc8:	4841      	ldr	r0, [pc, #260]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000dca:	f000 ffe5 	bl	8001d98 <HAL_DMA_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000dd4:	f7ff ff3d 	bl	8000c52 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_a);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000ddc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dde:	4a3c      	ldr	r2, [pc, #240]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_a);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000de8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000dea:	4a39      	ldr	r2, [pc, #228]	@ (8000ed0 <HAL_SAI_MspInit+0x1b0>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if(saiHandle->Instance==SAI2_Block_B)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a38      	ldr	r2, [pc, #224]	@ (8000ed8 <HAL_SAI_MspInit+0x1b8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d15e      	bne.n	8000eb8 <HAL_SAI_MspInit+0x198>
    {
      /* SAI2 clock enable */
      if (SAI2_client == 0)
 8000dfa:	4b32      	ldr	r3, [pc, #200]	@ (8000ec4 <HAL_SAI_MspInit+0x1a4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d113      	bne.n	8000e2a <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e02:	4b31      	ldr	r3, [pc, #196]	@ (8000ec8 <HAL_SAI_MspInit+0x1a8>)
 8000e04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e06:	4a30      	ldr	r2, [pc, #192]	@ (8000ec8 <HAL_SAI_MspInit+0x1a8>)
 8000e08:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e0c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ec8 <HAL_SAI_MspInit+0x1a8>)
 8000e10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2105      	movs	r1, #5
 8000e1e:	204b      	movs	r0, #75	@ 0x4b
 8000e20:	f000 ff83 	bl	8001d2a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e24:	204b      	movs	r0, #75	@ 0x4b
 8000e26:	f000 ff9c 	bl	8001d62 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000e2a:	4b26      	ldr	r3, [pc, #152]	@ (8000ec4 <HAL_SAI_MspInit+0x1a4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a24      	ldr	r2, [pc, #144]	@ (8000ec4 <HAL_SAI_MspInit+0x1a4>)
 8000e32:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e46:	230d      	movs	r3, #13
 8000e48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4822      	ldr	r0, [pc, #136]	@ (8000edc <HAL_SAI_MspInit+0x1bc>)
 8000e52:	f001 f987 	bl	8002164 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000e56:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e58:	4a22      	ldr	r2, [pc, #136]	@ (8000ee4 <HAL_SAI_MspInit+0x1c4>)
 8000e5a:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000e5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e70:	2280      	movs	r2, #128	@ 0x80
 8000e72:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e7a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7c:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e82:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000e84:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e86:	2220      	movs	r2, #32
 8000e88:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000e90:	4813      	ldr	r0, [pc, #76]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000e92:	f000 ff81 	bl	8001d98 <HAL_DMA_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000e9c:	f7ff fed9 	bl	8000c52 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai2_b);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000ea4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai2_b);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4a0c      	ldr	r2, [pc, #48]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000eb0:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee0 <HAL_SAI_MspInit+0x1c0>)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000eb8:	bf00      	nop
 8000eba:	3728      	adds	r7, #40	@ 0x28
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40015804 	.word	0x40015804
 8000ec4:	200005e4 	.word	0x200005e4
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	48000400 	.word	0x48000400
 8000ed0:	20000554 	.word	0x20000554
 8000ed4:	4002006c 	.word	0x4002006c
 8000ed8:	40015824 	.word	0x40015824
 8000edc:	48000800 	.word	0x48000800
 8000ee0:	2000059c 	.word	0x2000059c
 8000ee4:	40020080 	.word	0x40020080

08000ee8 <sgtl5000_i2c_read_register>:
		SGTL5000_DAP_COEF_WR_A2_LSB

};

HAL_StatusTypeDef sgtl5000_i2c_read_register(h_sgtl5000_t * h_sgtl5000, sgtl5000_registers_t reg_address, uint16_t * p_data)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	607a      	str	r2, [r7, #4]
 8000ef4:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef ret;

	uint8_t buffer[2];

	ret = HAL_I2C_Mem_Read (
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	8899      	ldrh	r1, [r3, #4]
 8000efe:	897a      	ldrh	r2, [r7, #10]
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	9302      	str	r3, [sp, #8]
 8000f06:	2302      	movs	r3, #2
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2302      	movs	r3, #2
 8000f12:	f001 fc99 	bl	8002848 <HAL_I2C_Mem_Read>
 8000f16:	4603      	mov	r3, r0
 8000f18:	75fb      	strb	r3, [r7, #23]
			buffer,
			2,
			HAL_MAX_DELAY		// Problems if I put other than HAL_MAX_DELAY WTF
	);

	*p_data = (buffer[0] << 8) | buffer[1];
 8000f1a:	7d3b      	ldrb	r3, [r7, #20]
 8000f1c:	021b      	lsls	r3, r3, #8
 8000f1e:	b21a      	sxth	r2, r3
 8000f20:	7d7b      	ldrb	r3, [r7, #21]
 8000f22:	b21b      	sxth	r3, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	b21b      	sxth	r3, r3
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	801a      	strh	r2, [r3, #0]

	return ret;
 8000f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3718      	adds	r7, #24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <sgtl5000_i2c_write_register>:

HAL_StatusTypeDef sgtl5000_i2c_write_register(h_sgtl5000_t * h_sgtl5000, sgtl5000_registers_t reg_address, uint16_t data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b088      	sub	sp, #32
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	460b      	mov	r3, r1
 8000f42:	807b      	strh	r3, [r7, #2]
 8000f44:	4613      	mov	r3, r2
 8000f46:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint8_t buffer[2];

	buffer[0] = (data >> 8) & 0xFF;
 8000f48:	883b      	ldrh	r3, [r7, #0]
 8000f4a:	0a1b      	lsrs	r3, r3, #8
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	733b      	strb	r3, [r7, #12]
	buffer[1] = data & 0xFF;
 8000f52:	883b      	ldrh	r3, [r7, #0]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	737b      	strb	r3, [r7, #13]

	ret = HAL_I2C_Mem_Write(
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	8899      	ldrh	r1, [r3, #4]
 8000f60:	887a      	ldrh	r2, [r7, #2]
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2302      	movs	r3, #2
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2302      	movs	r3, #2
 8000f74:	f001 fb54 	bl	8002620 <HAL_I2C_Mem_Write>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	73fb      	strb	r3, [r7, #15]
			buffer,
			2,
			HAL_MAX_DELAY		// WTF
	);

	return ret;
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <sgtl5000_i2c_set_bit>:

HAL_StatusTypeDef sgtl5000_i2c_set_bit(h_sgtl5000_t * h_sgtl5000, sgtl5000_registers_t reg_address, uint16_t mask)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b084      	sub	sp, #16
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	807b      	strh	r3, [r7, #2]
 8000f92:	4613      	mov	r3, r2
 8000f94:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint16_t data;
	ret = sgtl5000_i2c_read_register(h_sgtl5000, reg_address, &data);
 8000f96:	f107 020c 	add.w	r2, r7, #12
 8000f9a:	887b      	ldrh	r3, [r7, #2]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ffa2 	bl	8000ee8 <sgtl5000_i2c_read_register>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK)
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <sgtl5000_i2c_set_bit+0x2c>
	{
		return ret;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	e00d      	b.n	8000fce <sgtl5000_i2c_set_bit+0x48>
	}

	data |= mask;
 8000fb2:	89ba      	ldrh	r2, [r7, #12]
 8000fb4:	883b      	ldrh	r3, [r7, #0]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	81bb      	strh	r3, [r7, #12]

	ret = sgtl5000_i2c_write_register(h_sgtl5000, reg_address, data);
 8000fbc:	89ba      	ldrh	r2, [r7, #12]
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ffb8 	bl	8000f38 <sgtl5000_i2c_write_register>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <sgtl5000_i2c_clear_bit>:

HAL_StatusTypeDef sgtl5000_i2c_clear_bit(h_sgtl5000_t * h_sgtl5000, sgtl5000_registers_t reg_address, uint16_t mask)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b084      	sub	sp, #16
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	803b      	strh	r3, [r7, #0]
	HAL_StatusTypeDef ret;
	uint16_t data;
	ret = sgtl5000_i2c_read_register(h_sgtl5000, reg_address, &data);
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	887b      	ldrh	r3, [r7, #2]
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff7a 	bl	8000ee8 <sgtl5000_i2c_read_register>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	73fb      	strb	r3, [r7, #15]
	if (ret != HAL_OK)
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <sgtl5000_i2c_clear_bit+0x2c>
	{
		return ret;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	e012      	b.n	8001028 <sgtl5000_i2c_clear_bit+0x52>
	}

	data &= (~mask);
 8001002:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001006:	43db      	mvns	r3, r3
 8001008:	b21a      	sxth	r2, r3
 800100a:	89bb      	ldrh	r3, [r7, #12]
 800100c:	b21b      	sxth	r3, r3
 800100e:	4013      	ands	r3, r2
 8001010:	b21b      	sxth	r3, r3
 8001012:	b29b      	uxth	r3, r3
 8001014:	81bb      	strh	r3, [r7, #12]

	ret = sgtl5000_i2c_write_register(h_sgtl5000, reg_address, data);
 8001016:	89ba      	ldrh	r2, [r7, #12]
 8001018:	887b      	ldrh	r3, [r7, #2]
 800101a:	4619      	mov	r1, r3
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff ff8b 	bl	8000f38 <sgtl5000_i2c_write_register>
 8001022:	4603      	mov	r3, r0
 8001024:	73fb      	strb	r3, [r7, #15]
	return ret;
 8001026:	7bfb      	ldrb	r3, [r7, #15]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <sgtl5000_init>:

HAL_StatusTypeDef sgtl5000_init(h_sgtl5000_t * h_sgtl5000)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	74fb      	strb	r3, [r7, #19]

	// NOTE: This next Write call is needed ONLY if VDDD is
	// externally driven
	// Turn off startup power supplies to save power (Clear bit 12 and 13)
	// Write CHIP_ANA_POWER 0x4260
	mask = (1 << 12) | (1 << 13);
 800103c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001040:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_clear_bit(h_sgtl5000, SGTL5000_CHIP_ANA_POWER, mask);
 8001042:	8a3b      	ldrh	r3, [r7, #16]
 8001044:	461a      	mov	r2, r3
 8001046:	2130      	movs	r1, #48	@ 0x30
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ffc4 	bl	8000fd6 <sgtl5000_i2c_clear_bit>
	// NOTE: The next modify call is only needed if both VDDA and
	// VDDIO are greater than 3.1 V
	// Configure the charge pump to use the VDDIO rail (set bit 5 and bit 6)
	// Write CHIP_LINREG_CTRL 0x006C
	// VDDA and VDDIO = 3.3V so it IS necessary
	mask = (1 << 5) | (1 << 6);
 800104e:	2360      	movs	r3, #96	@ 0x60
 8001050:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_set_bit(h_sgtl5000, SGTL5000_CHIP_LINREG_CTRL, mask);
 8001052:	8a3b      	ldrh	r3, [r7, #16]
 8001054:	461a      	mov	r2, r3
 8001056:	2126      	movs	r1, #38	@ 0x26
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff94 	bl	8000f86 <sgtl5000_i2c_set_bit>
	// on the VDDA voltage value.
	// Set ground, ADC, DAC reference voltage (bits 8:4). The value should
	// be set to VDDA/2. This example assumes VDDA = 1.8 V. VDDA/2 = 0.9 V.
	// The bias current should be set to 50% of the nominal value (bits 3:1)
	// Write CHIP_REF_CTRL 0x004E
	mask = 0x01FF;	// VAG_VAL = 1.575V, BIAS_CTRL = -50%, SMALL_POP = 1
 800105e:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001062:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_REF_CTRL, mask);
 8001064:	8a3b      	ldrh	r3, [r7, #16]
 8001066:	461a      	mov	r2, r3
 8001068:	2128      	movs	r1, #40	@ 0x28
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ff64 	bl	8000f38 <sgtl5000_i2c_write_register>
	// Set LINEOUT reference voltage to VDDIO/2 (1.65 V) (bits 5:0)
	// and bias current (bits 11:8) to the recommended value of 0.36 mA
	// for 10 kOhm load with 1.0 nF capacitance
	// Write CHIP_LINE_OUT_CTRL 0x0322
//	mask = 0x0322;	// LO_VAGCNTRL = 1.65V, OUT_CURRENT = 0.36mA (?)
	mask = 0x031E;
 8001070:	f240 331e 	movw	r3, #798	@ 0x31e
 8001074:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_LINE_OUT_CTRL, mask);
 8001076:	8a3b      	ldrh	r3, [r7, #16]
 8001078:	461a      	mov	r2, r3
 800107a:	212c      	movs	r1, #44	@ 0x2c
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff5b 	bl	8000f38 <sgtl5000_i2c_write_register>

	// Enable short detect mode for headphone left/right
	// and center channel and set short detect current trip level
	// to 75 mA
	// Write CHIP_SHORT_CTRL 0x1106
	mask = 0x1106;	// MODE_CM = 2, MODE_LR = 1, LVLADJC = 200mA, LVLADJL = 75mA, LVLADJR = 50mA
 8001082:	f241 1306 	movw	r3, #4358	@ 0x1106
 8001086:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_SHORT_CTRL, mask);
 8001088:	8a3b      	ldrh	r3, [r7, #16]
 800108a:	461a      	mov	r2, r3
 800108c:	213c      	movs	r1, #60	@ 0x3c
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ff52 	bl	8000f38 <sgtl5000_i2c_write_register>

	// Enable Zero-cross detect if needed for HP_OUT (bit 5) and ADC (bit 1)
	// Write CHIP_ANA_CTRL 0x0133
	mask = 0x0004;	// Unmute all + SELECT_ADC = LINEIN
 8001094:	2304      	movs	r3, #4
 8001096:	823b      	strh	r3, [r7, #16]
//	mask = 0x0000;	// Unmute all + SELECT_ADC = MIC
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_ANA_CTRL, mask);
 8001098:	8a3b      	ldrh	r3, [r7, #16]
 800109a:	461a      	mov	r2, r3
 800109c:	2124      	movs	r1, #36	@ 0x24
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ff4a 	bl	8000f38 <sgtl5000_i2c_write_register>

	//------------Power up Inputs/Outputs/Digital Blocks---------
	// Power up LINEOUT, HP, ADC, DAC
	// Write CHIP_ANA_POWER 0x6AFF
	mask = 0x6AFF;	// LINEOUT_POWERUP, ADC_POWERUP, CAPLESS_HEADPHONE_POWERUP, DAC_POWERUP, HEADPHONE_POWERUP, REFTOP_POWERUP, ADC_MONO = stereo
 80010a4:	f646 23ff 	movw	r3, #27391	@ 0x6aff
 80010a8:	823b      	strh	r3, [r7, #16]
	// VAG_POWERUP, VCOAMP_POWERUP = 0, LINREG_D_POWERUP, PLL_POWERUP = 0, VDDC_CHRGPMP_POWERUP, STARTUP_POWERUP = 0, LINREG_SIMPLE_POWERUP,
	// DAC_MONO = stereo
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_ANA_POWER, mask);
 80010aa:	8a3b      	ldrh	r3, [r7, #16]
 80010ac:	461a      	mov	r2, r3
 80010ae:	2130      	movs	r1, #48	@ 0x30
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff41 	bl	8000f38 <sgtl5000_i2c_write_register>
	// Power up desired digital blocks
	// I2S_IN (bit 0), I2S_OUT (bit 1), DAP (bit 4), DAC (bit 5),
	// ADC (bit 6) are powered on
	// Write CHIP_DIG_POWER 0x0073
	mask = 0x0073;	// I2S_IN_POWERUP, I2S_OUT_POWERUP, DAP_POWERUP, DAC_POWERUP, ADC_POWERUP
 80010b6:	2373      	movs	r3, #115	@ 0x73
 80010b8:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_DIG_POWER, mask);
 80010ba:	8a3b      	ldrh	r3, [r7, #16]
 80010bc:	461a      	mov	r2, r3
 80010be:	2102      	movs	r1, #2
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff39 	bl	8000f38 <sgtl5000_i2c_write_register>
	// Value = (int)(40*log(VAG_VAL/LO_VAGCNTRL) + 15)
	// Assuming VAG_VAL and LO_VAGCNTRL is set to 0.9 V and
	// 1.65 V respectively, the // left LO vol (bits 12:8) and right LO
	// volume (bits 4:0) value should be set // to 5
	// Write CHIP_LINE_OUT_VOL 0x0505
	mask = 0x1111;	// TODO recalculer
 80010c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80010ca:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_LINE_OUT_VOL, mask);
 80010cc:	8a3b      	ldrh	r3, [r7, #16]
 80010ce:	461a      	mov	r2, r3
 80010d0:	212e      	movs	r1, #46	@ 0x2e
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff30 	bl	8000f38 <sgtl5000_i2c_write_register>

	// Configure SYS_FS clock to 48 kHz
	// Configure MCLK_FREQ to 256*Fs
	// Modify CHIP_CLK_CTRL->SYS_FS 0x0002 // bits 3:2
	// Modify CHIP_CLK_CTRL->MCLK_FREQ 0x0000 // bits 1:0
	mask = 0x0004;	// SYS_FS = 48kHz
 80010d8:	2304      	movs	r3, #4
 80010da:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_CLK_CTRL, mask);
 80010dc:	8a3b      	ldrh	r3, [r7, #16]
 80010de:	461a      	mov	r2, r3
 80010e0:	2104      	movs	r1, #4
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ff28 	bl	8000f38 <sgtl5000_i2c_write_register>
	// Configure the I2S clocks in master mode
	// NOTE: I2S LRCLK is same as the system sample clock
	// Modify CHIP_I2S_CTRL->MS 0x0001 // bit 7
	// Non, on reste en slave!
	mask = 0x0130;	// DLEN = 16 bits
 80010e8:	f44f 7398 	mov.w	r3, #304	@ 0x130
 80010ec:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_I2S_CTRL, mask);
 80010ee:	8a3b      	ldrh	r3, [r7, #16]
 80010f0:	461a      	mov	r2, r3
 80010f2:	2106      	movs	r1, #6
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff1f 	bl	8000f38 <sgtl5000_i2c_write_register>
	// Laissons tout par défaut pour l'instant
//	mask = 0x0000;	// ADC -> DAC
//	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_SSS_CTRL, mask);

	/* Le reste */
	mask = 0x0000;	// Unmute
 80010fa:	2300      	movs	r3, #0
 80010fc:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_ADCDAC_CTRL, mask);
 80010fe:	8a3b      	ldrh	r3, [r7, #16]
 8001100:	461a      	mov	r2, r3
 8001102:	210e      	movs	r1, #14
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff ff17 	bl	8000f38 <sgtl5000_i2c_write_register>

	mask = 0x3C3C;
 800110a:	f643 433c 	movw	r3, #15420	@ 0x3c3c
 800110e:	823b      	strh	r3, [r7, #16]
//	mask = 0x4747;
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_DAC_VOL, mask);
 8001110:	8a3b      	ldrh	r3, [r7, #16]
 8001112:	461a      	mov	r2, r3
 8001114:	2110      	movs	r1, #16
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff0e 	bl	8000f38 <sgtl5000_i2c_write_register>

	mask = 0x0251;	// BIAS_RESISTOR = 2, BIAS_VOLT = 5, GAIN = 1
 800111c:	f240 2351 	movw	r3, #593	@ 0x251
 8001120:	823b      	strh	r3, [r7, #16]
	sgtl5000_i2c_write_register(h_sgtl5000, SGTL5000_CHIP_MIC_CTRL, mask);
 8001122:	8a3b      	ldrh	r3, [r7, #16]
 8001124:	461a      	mov	r2, r3
 8001126:	212a      	movs	r1, #42	@ 0x2a
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f7ff ff05 	bl	8000f38 <sgtl5000_i2c_write_register>

	for (int i = 0 ; register_map[i] != SGTL5000_DAP_COEF_WR_A2_LSB ; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e018      	b.n	8001166 <sgtl5000_init+0x136>
	{
		uint16_t reg = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	81fb      	strh	r3, [r7, #14]
		sgtl5000_i2c_read_register(h_sgtl5000, register_map[i], &reg);
 8001138:	4a11      	ldr	r2, [pc, #68]	@ (8001180 <sgtl5000_init+0x150>)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001140:	f107 020e 	add.w	r2, r7, #14
 8001144:	4619      	mov	r1, r3
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fece 	bl	8000ee8 <sgtl5000_i2c_read_register>
		printf("%02d: [0x%04x] = 0x%04x\r\n", i, register_map[i], reg);
 800114c:	4a0c      	ldr	r2, [pc, #48]	@ (8001180 <sgtl5000_init+0x150>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001154:	461a      	mov	r2, r3
 8001156:	89fb      	ldrh	r3, [r7, #14]
 8001158:	6979      	ldr	r1, [r7, #20]
 800115a:	480a      	ldr	r0, [pc, #40]	@ (8001184 <sgtl5000_init+0x154>)
 800115c:	f009 f856 	bl	800a20c <iprintf>
	for (int i = 0 ; register_map[i] != SGTL5000_DAP_COEF_WR_A2_LSB ; i++)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <sgtl5000_init+0x150>)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800116e:	f5b3 7f9d 	cmp.w	r3, #314	@ 0x13a
 8001172:	d1df      	bne.n	8001134 <sgtl5000_init+0x104>
	}

	return ret;
 8001174:	7cfb      	ldrb	r3, [r7, #19]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800b428 	.word	0x0800b428
 8001184:	0800b240 	.word	0x0800b240

08001188 <shell_init>:
int isStarted = 0;
int isADC_cplt =0;
uint8_t PWMLed = 255;


void shell_init(void) {
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 800118c:	2220      	movs	r2, #32
 800118e:	2100      	movs	r1, #0
 8001190:	481a      	ldr	r0, [pc, #104]	@ (80011fc <shell_init+0x74>)
 8001192:	f009 f983 	bl	800a49c <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 8001196:	2240      	movs	r2, #64	@ 0x40
 8001198:	2100      	movs	r1, #0
 800119a:	4819      	ldr	r0, [pc, #100]	@ (8001200 <shell_init+0x78>)
 800119c:	f009 f97e 	bl	800a49c <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <shell_init+0x7c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 80011a6:	2240      	movs	r2, #64	@ 0x40
 80011a8:	2100      	movs	r1, #0
 80011aa:	4817      	ldr	r0, [pc, #92]	@ (8001208 <shell_init+0x80>)
 80011ac:	f009 f976 	bl	800a49c <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 80011b0:	2203      	movs	r2, #3
 80011b2:	2100      	movs	r1, #0
 80011b4:	2001      	movs	r0, #1
 80011b6:	f007 f8af 	bl	8008318 <xQueueGenericCreate>
 80011ba:	4603      	mov	r3, r0
 80011bc:	4a13      	ldr	r2, [pc, #76]	@ (800120c <shell_init+0x84>)
 80011be:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <shell_init+0x84>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <shell_init+0x44>
 80011c8:	f7ff fd43 	bl	8000c52 <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 80011cc:	4810      	ldr	r0, [pc, #64]	@ (8001210 <shell_init+0x88>)
 80011ce:	f7ff f809 	bl	80001e4 <strlen>
 80011d2:	4603      	mov	r3, r0
 80011d4:	b29a      	uxth	r2, r3
 80011d6:	f04f 33ff 	mov.w	r3, #4294967295
 80011da:	490d      	ldr	r1, [pc, #52]	@ (8001210 <shell_init+0x88>)
 80011dc:	480d      	ldr	r0, [pc, #52]	@ (8001214 <shell_init+0x8c>)
 80011de:	f005 fb61 	bl	80068a4 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 80011e2:	480d      	ldr	r0, [pc, #52]	@ (8001218 <shell_init+0x90>)
 80011e4:	f7fe fffe 	bl	80001e4 <strlen>
 80011e8:	4603      	mov	r3, r0
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	4909      	ldr	r1, [pc, #36]	@ (8001218 <shell_init+0x90>)
 80011f2:	4808      	ldr	r0, [pc, #32]	@ (8001214 <shell_init+0x8c>)
 80011f4:	f005 fb56 	bl	80068a4 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000670 	.word	0x20000670
 8001200:	2000062c 	.word	0x2000062c
 8001204:	200005e8 	.word	0x200005e8
 8001208:	200005ec 	.word	0x200005ec
 800120c:	2000019c 	.word	0x2000019c
 8001210:	20000044 	.word	0x20000044
 8001214:	20000708 	.word	0x20000708
 8001218:	200000f4 	.word	0x200000f4

0800121c <shell_run>:

void shell_run(void*) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 8001228:	2301      	movs	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 800122c:	4b5d      	ldr	r3, [pc, #372]	@ (80013a4 <shell_run+0x188>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
		while (reading) {
 8001232:	e070      	b.n	8001316 <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001234:	2201      	movs	r2, #1
 8001236:	495c      	ldr	r1, [pc, #368]	@ (80013a8 <shell_run+0x18c>)
 8001238:	485c      	ldr	r0, [pc, #368]	@ (80013ac <shell_run+0x190>)
 800123a:	f005 fbbd 	bl	80069b8 <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 800123e:	4b5c      	ldr	r3, [pc, #368]	@ (80013b0 <shell_run+0x194>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f04f 31ff 	mov.w	r1, #4294967295
 8001246:	4618      	mov	r0, r3
 8001248:	f007 f950 	bl	80084ec <xQueueSemaphoreTake>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <shell_run+0x3a>
 8001252:	f7ff fcfe 	bl	8000c52 <Error_Handler>

			switch (uartRxBuffer[0]) {
 8001256:	4b54      	ldr	r3, [pc, #336]	@ (80013a8 <shell_run+0x18c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b7f      	cmp	r3, #127	@ 0x7f
 800125c:	d035      	beq.n	80012ca <shell_run+0xae>
 800125e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001260:	dc47      	bgt.n	80012f2 <shell_run+0xd6>
 8001262:	2b08      	cmp	r3, #8
 8001264:	d031      	beq.n	80012ca <shell_run+0xae>
 8001266:	2b0d      	cmp	r3, #13
 8001268:	d143      	bne.n	80012f2 <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	2203      	movs	r2, #3
 8001270:	4950      	ldr	r1, [pc, #320]	@ (80013b4 <shell_run+0x198>)
 8001272:	484e      	ldr	r0, [pc, #312]	@ (80013ac <shell_run+0x190>)
 8001274:	f005 fb16 	bl	80068a4 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				//cmdBuffer[idx_cmd] = '\0';
				//On copie la commande dans l'historique
				//strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
				//cmdHistory_index_save++;
				argc = 0;
 8001278:	4b4f      	ldr	r3, [pc, #316]	@ (80013b8 <shell_run+0x19c>)
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 800127e:	494f      	ldr	r1, [pc, #316]	@ (80013bc <shell_run+0x1a0>)
 8001280:	484f      	ldr	r0, [pc, #316]	@ (80013c0 <shell_run+0x1a4>)
 8001282:	f009 f913 	bl	800a4ac <strtok>
 8001286:	4603      	mov	r3, r0
 8001288:	4a4e      	ldr	r2, [pc, #312]	@ (80013c4 <shell_run+0x1a8>)
 800128a:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 800128c:	e010      	b.n	80012b0 <shell_run+0x94>
					argv[argc++] = token;
 800128e:	4b4a      	ldr	r3, [pc, #296]	@ (80013b8 <shell_run+0x19c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	4948      	ldr	r1, [pc, #288]	@ (80013b8 <shell_run+0x19c>)
 8001296:	600a      	str	r2, [r1, #0]
 8001298:	4a4a      	ldr	r2, [pc, #296]	@ (80013c4 <shell_run+0x1a8>)
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	494a      	ldr	r1, [pc, #296]	@ (80013c8 <shell_run+0x1ac>)
 800129e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 80012a2:	4946      	ldr	r1, [pc, #280]	@ (80013bc <shell_run+0x1a0>)
 80012a4:	2000      	movs	r0, #0
 80012a6:	f009 f901 	bl	800a4ac <strtok>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a45      	ldr	r2, [pc, #276]	@ (80013c4 <shell_run+0x1a8>)
 80012ae:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 80012b0:	4b44      	ldr	r3, [pc, #272]	@ (80013c4 <shell_run+0x1a8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1ea      	bne.n	800128e <shell_run+0x72>
				}
				idx_cmd = 0;
 80012b8:	4b3a      	ldr	r3, [pc, #232]	@ (80013a4 <shell_run+0x188>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 80012c2:	4b42      	ldr	r3, [pc, #264]	@ (80013cc <shell_run+0x1b0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	601a      	str	r2, [r3, #0]
				break;
 80012c8:	e025      	b.n	8001316 <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 80012ca:	4b36      	ldr	r3, [pc, #216]	@ (80013a4 <shell_run+0x188>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d020      	beq.n	8001314 <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 80012d2:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <shell_run+0x188>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	4932      	ldr	r1, [pc, #200]	@ (80013a4 <shell_run+0x188>)
 80012da:	600a      	str	r2, [r1, #0]
 80012dc:	4a38      	ldr	r2, [pc, #224]	@ (80013c0 <shell_run+0x1a4>)
 80012de:	2100      	movs	r1, #0
 80012e0:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
 80012e6:	2204      	movs	r2, #4
 80012e8:	4939      	ldr	r1, [pc, #228]	@ (80013d0 <shell_run+0x1b4>)
 80012ea:	4830      	ldr	r0, [pc, #192]	@ (80013ac <shell_run+0x190>)
 80012ec:	f005 fada 	bl	80068a4 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 80012f0:	e011      	b.n	8001316 <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80012f2:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <shell_run+0x188>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	492a      	ldr	r1, [pc, #168]	@ (80013a4 <shell_run+0x188>)
 80012fa:	600a      	str	r2, [r1, #0]
 80012fc:	4a2a      	ldr	r2, [pc, #168]	@ (80013a8 <shell_run+0x18c>)
 80012fe:	7811      	ldrb	r1, [r2, #0]
 8001300:	4a2f      	ldr	r2, [pc, #188]	@ (80013c0 <shell_run+0x1a4>)
 8001302:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 8001304:	f04f 33ff 	mov.w	r3, #4294967295
 8001308:	2201      	movs	r2, #1
 800130a:	4927      	ldr	r1, [pc, #156]	@ (80013a8 <shell_run+0x18c>)
 800130c:	4827      	ldr	r0, [pc, #156]	@ (80013ac <shell_run+0x190>)
 800130e:	f005 fac9 	bl	80068a4 <HAL_UART_Transmit>
 8001312:	e000      	b.n	8001316 <shell_run+0xfa>
					break;
 8001314:	bf00      	nop
		while (reading) {
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d18b      	bne.n	8001234 <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 800131c:	4b2b      	ldr	r3, [pc, #172]	@ (80013cc <shell_run+0x1b0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d081      	beq.n	8001228 <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8001324:	2300      	movs	r3, #0
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	e01b      	b.n	8001362 <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 800132a:	4b27      	ldr	r3, [pc, #156]	@ (80013c8 <shell_run+0x1ac>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	4929      	ldr	r1, [pc, #164]	@ (80013d4 <shell_run+0x1b8>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	011b      	lsls	r3, r3, #4
 8001334:	440b      	add	r3, r1
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	4610      	mov	r0, r2
 800133c:	f7fe ff48 	bl	80001d0 <strcmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d10a      	bne.n	800135c <shell_run+0x140>
					isFind = 1;
 8001346:	4b24      	ldr	r3, [pc, #144]	@ (80013d8 <shell_run+0x1bc>)
 8001348:	2201      	movs	r2, #1
 800134a:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 800134c:	4a21      	ldr	r2, [pc, #132]	@ (80013d4 <shell_run+0x1b8>)
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	330c      	adds	r3, #12
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	481b      	ldr	r0, [pc, #108]	@ (80013c8 <shell_run+0x1ac>)
 800135a:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	3301      	adds	r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d9e0      	bls.n	800132a <shell_run+0x10e>
				}
			}
			if (!isFind) {
 8001368:	4b1b      	ldr	r3, [pc, #108]	@ (80013d8 <shell_run+0x1bc>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d106      	bne.n	800137e <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	2214      	movs	r2, #20
 8001376:	4919      	ldr	r1, [pc, #100]	@ (80013dc <shell_run+0x1c0>)
 8001378:	480c      	ldr	r0, [pc, #48]	@ (80013ac <shell_run+0x190>)
 800137a:	f005 fa93 	bl	80068a4 <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	2212      	movs	r2, #18
 8001384:	4916      	ldr	r1, [pc, #88]	@ (80013e0 <shell_run+0x1c4>)
 8001386:	4809      	ldr	r0, [pc, #36]	@ (80013ac <shell_run+0x190>)
 8001388:	f005 fa8c 	bl	80068a4 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <shell_run+0x1b0>)
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
			isFind = 0;
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <shell_run+0x1bc>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 8001398:	2220      	movs	r2, #32
 800139a:	2100      	movs	r1, #0
 800139c:	4808      	ldr	r0, [pc, #32]	@ (80013c0 <shell_run+0x1a4>)
 800139e:	f009 f87d 	bl	800a49c <memset>
		reading = 1;
 80013a2:	e741      	b.n	8001228 <shell_run+0xc>
 80013a4:	2000066c 	.word	0x2000066c
 80013a8:	200005e8 	.word	0x200005e8
 80013ac:	20000708 	.word	0x20000708
 80013b0:	2000019c 	.word	0x2000019c
 80013b4:	200000d8 	.word	0x200000d8
 80013b8:	20000690 	.word	0x20000690
 80013bc:	0800b2fc 	.word	0x0800b2fc
 80013c0:	2000062c 	.word	0x2000062c
 80013c4:	20000694 	.word	0x20000694
 80013c8:	20000670 	.word	0x20000670
 80013cc:	20000698 	.word	0x20000698
 80013d0:	200000dc 	.word	0x200000dc
 80013d4:	20000004 	.word	0x20000004
 80013d8:	2000069c 	.word	0x2000069c
 80013dc:	200000e0 	.word	0x200000e0
 80013e0:	200000f4 	.word	0x200000f4

080013e4 <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af04      	add	r7, sp, #16
 80013ea:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <subfunct_help+0x74>)
 80013ee:	9302      	str	r3, [sp, #8]
 80013f0:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <subfunct_help+0x78>)
 80013f2:	9301      	str	r3, [sp, #4]
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <subfunct_help+0x7c>)
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001464 <subfunct_help+0x80>)
 80013fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001468 <subfunct_help+0x84>)
 80013fc:	491b      	ldr	r1, [pc, #108]	@ (800146c <subfunct_help+0x88>)
 80013fe:	481c      	ldr	r0, [pc, #112]	@ (8001470 <subfunct_help+0x8c>)
 8001400:	f008 ff04 	bl	800a20c <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	e01b      	b.n	8001442 <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 800140a:	4a1a      	ldr	r2, [pc, #104]	@ (8001474 <subfunct_help+0x90>)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	011b      	lsls	r3, r3, #4
 8001410:	4413      	add	r3, r2
 8001412:	6819      	ldr	r1, [r3, #0]
 8001414:	4a17      	ldr	r2, [pc, #92]	@ (8001474 <subfunct_help+0x90>)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	4413      	add	r3, r2
 800141c:	3308      	adds	r3, #8
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4814      	ldr	r0, [pc, #80]	@ (8001474 <subfunct_help+0x90>)
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	0112      	lsls	r2, r2, #4
 8001426:	4402      	add	r2, r0
 8001428:	3204      	adds	r2, #4
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	9201      	str	r2, [sp, #4]
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <subfunct_help+0x78>)
 8001432:	460a      	mov	r2, r1
 8001434:	4910      	ldr	r1, [pc, #64]	@ (8001478 <subfunct_help+0x94>)
 8001436:	4811      	ldr	r0, [pc, #68]	@ (800147c <subfunct_help+0x98>)
 8001438:	f008 fee8 	bl	800a20c <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2b03      	cmp	r3, #3
 8001446:	d9e0      	bls.n	800140a <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 8001448:	480d      	ldr	r0, [pc, #52]	@ (8001480 <subfunct_help+0x9c>)
 800144a:	f008 ff47 	bl	800a2dc <puts>
}
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	0800b33c 	.word	0x0800b33c
 800145c:	0800b38c 	.word	0x0800b38c
 8001460:	0800b394 	.word	0x0800b394
 8001464:	0800b300 	.word	0x0800b300
 8001468:	0800b308 	.word	0x0800b308
 800146c:	0800b314 	.word	0x0800b314
 8001470:	0800b31c 	.word	0x0800b31c
 8001474:	20000004 	.word	0x20000004
 8001478:	0800b3a0 	.word	0x0800b3a0
 800147c:	0800b3a8 	.word	0x0800b3a8
 8001480:	0800b3c4 	.word	0x0800b3c4

08001484 <subfunct_clear>:

void subfunct_clear(char **argv) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 800148c:	f04f 33ff 	mov.w	r3, #4294967295
 8001490:	2208      	movs	r2, #8
 8001492:	4904      	ldr	r1, [pc, #16]	@ (80014a4 <subfunct_clear+0x20>)
 8001494:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <subfunct_clear+0x24>)
 8001496:	f005 fa05 	bl	80068a4 <HAL_UART_Transmit>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000108 	.word	0x20000108
 80014a8:	20000708 	.word	0x20000708

080014ac <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <MX_SPI3_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014b8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014c6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80014ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014cc:	4b14      	ldr	r3, [pc, #80]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d2:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014d8:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014e2:	2238      	movs	r2, #56	@ 0x38
 80014e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014f8:	4b09      	ldr	r3, [pc, #36]	@ (8001520 <MX_SPI3_Init+0x74>)
 80014fa:	2207      	movs	r2, #7
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014fe:	4b08      	ldr	r3, [pc, #32]	@ (8001520 <MX_SPI3_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001504:	4b06      	ldr	r3, [pc, #24]	@ (8001520 <MX_SPI3_Init+0x74>)
 8001506:	2208      	movs	r2, #8
 8001508:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800150a:	4805      	ldr	r0, [pc, #20]	@ (8001520 <MX_SPI3_Init+0x74>)
 800150c:	f004 fceb 	bl	8005ee6 <HAL_SPI_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001516:	f7ff fb9c 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	200006a0 	.word	0x200006a0
 8001524:	40003c00 	.word	0x40003c00

08001528 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
 800153e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <HAL_SPI_MspInit+0xc4>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d14c      	bne.n	80015e4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800154a:	4b29      	ldr	r3, [pc, #164]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 800154c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800154e:	4a28      	ldr	r2, [pc, #160]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 8001550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001554:	6593      	str	r3, [r2, #88]	@ 0x58
 8001556:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 8001558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800155a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800155e:	613b      	str	r3, [r7, #16]
 8001560:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001562:	4b23      	ldr	r3, [pc, #140]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001566:	4a22      	ldr	r2, [pc, #136]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 8001568:	f043 0304 	orr.w	r3, r3, #4
 800156c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156e:	4b20      	ldr	r3, [pc, #128]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001572:	f003 0304 	and.w	r3, r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800157a:	4b1d      	ldr	r3, [pc, #116]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157e:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001586:	4b1a      	ldr	r3, [pc, #104]	@ (80015f0 <HAL_SPI_MspInit+0xc8>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001592:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001598:	2302      	movs	r3, #2
 800159a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a0:	2303      	movs	r3, #3
 80015a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a4:	2306      	movs	r3, #6
 80015a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f107 0314 	add.w	r3, r7, #20
 80015ac:	4619      	mov	r1, r3
 80015ae:	4811      	ldr	r0, [pc, #68]	@ (80015f4 <HAL_SPI_MspInit+0xcc>)
 80015b0:	f000 fdd8 	bl	8002164 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015b4:	2320      	movs	r3, #32
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015c4:	2306      	movs	r3, #6
 80015c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	480a      	ldr	r0, [pc, #40]	@ (80015f8 <HAL_SPI_MspInit+0xd0>)
 80015d0:	f000 fdc8 	bl	8002164 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2105      	movs	r1, #5
 80015d8:	2033      	movs	r0, #51	@ 0x33
 80015da:	f000 fba6 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80015de:	2033      	movs	r0, #51	@ 0x33
 80015e0:	f000 fbbf 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	@ 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40003c00 	.word	0x40003c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	48000800 	.word	0x48000800
 80015f8:	48000400 	.word	0x48000400

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b11      	ldr	r3, [pc, #68]	@ (8001648 <HAL_MspInit+0x4c>)
 8001604:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001606:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <HAL_MspInit+0x4c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6613      	str	r3, [r2, #96]	@ 0x60
 800160e:	4b0e      	ldr	r3, [pc, #56]	@ (8001648 <HAL_MspInit+0x4c>)
 8001610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_MspInit+0x4c>)
 800161c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <HAL_MspInit+0x4c>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001624:	6593      	str	r3, [r2, #88]	@ 0x58
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <HAL_MspInit+0x4c>)
 8001628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f000 fb76 	bl	8001d2a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <NMI_Handler+0x4>

08001654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	bf00      	nop
 8001662:	e7fd      	b.n	8001660 <MemManage_Handler+0x4>

08001664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001668:	bf00      	nop
 800166a:	e7fd      	b.n	8001668 <BusFault_Handler+0x4>

0800166c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001670:	bf00      	nop
 8001672:	e7fd      	b.n	8001670 <UsageFault_Handler+0x4>

08001674 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001686:	f000 fa31 	bl	8001aec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800168a:	f007 fe97 	bl	80093bc <xTaskGetSchedulerState>
 800168e:	4603      	mov	r3, r0
 8001690:	2b01      	cmp	r3, #1
 8001692:	d001      	beq.n	8001698 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001694:	f008 f9f0 	bl	8009a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}

0800169c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <DMA1_Channel6_IRQHandler+0x10>)
 80016a2:	f000 fcb0 	bl	8002006 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	20000554 	.word	0x20000554

080016b0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <DMA1_Channel7_IRQHandler+0x10>)
 80016b6:	f000 fca6 	bl	8002006 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2000059c 	.word	0x2000059c

080016c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <USART2_IRQHandler+0x10>)
 80016ca:	f005 f9c1 	bl	8006a50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000708 	.word	0x20000708

080016d8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80016dc:	4802      	ldr	r0, [pc, #8]	@ (80016e8 <SPI3_IRQHandler+0x10>)
 80016de:	f004 fe1b 	bl	8006318 <HAL_SPI_IRQHandler>

//  spi_tx_complete = 0;
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

  /* USER CODE END SPI3_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	200006a0 	.word	0x200006a0

080016ec <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80016f0:	4803      	ldr	r0, [pc, #12]	@ (8001700 <SAI2_IRQHandler+0x14>)
 80016f2:	f004 f8a5 	bl	8005840 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80016f6:	4803      	ldr	r0, [pc, #12]	@ (8001704 <SAI2_IRQHandler+0x18>)
 80016f8:	f004 f8a2 	bl	8005840 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	2000044c 	.word	0x2000044c
 8001704:	200004d0 	.word	0x200004d0

08001708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return 1;
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_kill>:

int _kill(int pid, int sig)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001722:	f008 ff65 	bl	800a5f0 <__errno>
 8001726:	4603      	mov	r3, r0
 8001728:	2216      	movs	r2, #22
 800172a:	601a      	str	r2, [r3, #0]
  return -1;
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001730:	4618      	mov	r0, r3
 8001732:	3708      	adds	r7, #8
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}

08001738 <_exit>:

void _exit (int status)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffe7 	bl	8001718 <_kill>
  while (1) {}    /* Make sure we hang here */
 800174a:	bf00      	nop
 800174c:	e7fd      	b.n	800174a <_exit+0x12>

0800174e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
 800175e:	e00a      	b.n	8001776 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001760:	f3af 8000 	nop.w
 8001764:	4601      	mov	r1, r0
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	1c5a      	adds	r2, r3, #1
 800176a:	60ba      	str	r2, [r7, #8]
 800176c:	b2ca      	uxtb	r2, r1
 800176e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	3301      	adds	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	429a      	cmp	r2, r3
 800177c:	dbf0      	blt.n	8001760 <_read+0x12>
  }

  return len;
 800177e:	687b      	ldr	r3, [r7, #4]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e009      	b.n	80017ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1c5a      	adds	r2, r3, #1
 800179e:	60ba      	str	r2, [r7, #8]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff f966 	bl	8000a74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbf1      	blt.n	800179a <_write+0x12>
  }
  return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_close>:

int _close(int file)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017e8:	605a      	str	r2, [r3, #4]
  return 0;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_isatty>:

int _isatty(int file)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001800:	2301      	movs	r3, #1
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001830:	4a14      	ldr	r2, [pc, #80]	@ (8001884 <_sbrk+0x5c>)
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <_sbrk+0x60>)
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800183c:	4b13      	ldr	r3, [pc, #76]	@ (800188c <_sbrk+0x64>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <_sbrk+0x64>)
 8001846:	4a12      	ldr	r2, [pc, #72]	@ (8001890 <_sbrk+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184a:	4b10      	ldr	r3, [pc, #64]	@ (800188c <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4413      	add	r3, r2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	429a      	cmp	r2, r3
 8001856:	d207      	bcs.n	8001868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001858:	f008 feca 	bl	800a5f0 <__errno>
 800185c:	4603      	mov	r3, r0
 800185e:	220c      	movs	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
 8001866:	e009      	b.n	800187c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001868:	4b08      	ldr	r3, [pc, #32]	@ (800188c <_sbrk+0x64>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800186e:	4b07      	ldr	r3, [pc, #28]	@ (800188c <_sbrk+0x64>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	4a05      	ldr	r2, [pc, #20]	@ (800188c <_sbrk+0x64>)
 8001878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187a:	68fb      	ldr	r3, [r7, #12]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20018000 	.word	0x20018000
 8001888:	00000400 	.word	0x00000400
 800188c:	20000704 	.word	0x20000704
 8001890:	20003148 	.word	0x20003148

08001894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <SystemInit+0x20>)
 800189a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <SystemInit+0x20>)
 80018a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018be:	4a15      	ldr	r2, [pc, #84]	@ (8001914 <MX_USART2_UART_Init+0x5c>)
 80018c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018c2:	4b13      	ldr	r3, [pc, #76]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80018c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018de:	220c      	movs	r2, #12
 80018e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <MX_USART2_UART_Init+0x58>)
 80018fc:	f004 ff84 	bl	8006808 <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001906:	f7ff f9a4 	bl	8000c52 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000708 	.word	0x20000708
 8001914:	40004400 	.word	0x40004400

08001918 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b0ac      	sub	sp, #176	@ 0xb0
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2288      	movs	r2, #136	@ 0x88
 8001936:	2100      	movs	r1, #0
 8001938:	4618      	mov	r0, r3
 800193a:	f008 fdaf 	bl	800a49c <memset>
  if(uartHandle->Instance==USART2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a25      	ldr	r2, [pc, #148]	@ (80019d8 <HAL_UART_MspInit+0xc0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d143      	bne.n	80019d0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001948:	2302      	movs	r3, #2
 800194a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800194c:	2300      	movs	r3, #0
 800194e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fa4f 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001960:	f7ff f977 	bl	8000c52 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001964:	4b1d      	ldr	r3, [pc, #116]	@ (80019dc <HAL_UART_MspInit+0xc4>)
 8001966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001968:	4a1c      	ldr	r2, [pc, #112]	@ (80019dc <HAL_UART_MspInit+0xc4>)
 800196a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800196e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001970:	4b1a      	ldr	r3, [pc, #104]	@ (80019dc <HAL_UART_MspInit+0xc4>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001974:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_UART_MspInit+0xc4>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001980:	4a16      	ldr	r2, [pc, #88]	@ (80019dc <HAL_UART_MspInit+0xc4>)
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001988:	4b14      	ldr	r3, [pc, #80]	@ (80019dc <HAL_UART_MspInit+0xc4>)
 800198a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001994:	230c      	movs	r3, #12
 8001996:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a6:	2303      	movs	r3, #3
 80019a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ac:	2307      	movs	r3, #7
 80019ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019b6:	4619      	mov	r1, r3
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019bc:	f000 fbd2 	bl	8002164 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2105      	movs	r1, #5
 80019c4:	2026      	movs	r0, #38	@ 0x26
 80019c6:	f000 f9b0 	bl	8001d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ca:	2026      	movs	r0, #38	@ 0x26
 80019cc:	f000 f9c9 	bl	8001d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019d0:	bf00      	nop
 80019d2:	37b0      	adds	r7, #176	@ 0xb0
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40004400 	.word	0x40004400
 80019dc:	40021000 	.word	0x40021000

080019e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e4:	f7ff ff56 	bl	8001894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019e8:	480c      	ldr	r0, [pc, #48]	@ (8001a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80019ea:	490d      	ldr	r1, [pc, #52]	@ (8001a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001a24 <LoopForever+0xe>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f0:	e002      	b.n	80019f8 <LoopCopyDataInit>

080019f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019f6:	3304      	adds	r3, #4

080019f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019fc:	d3f9      	bcc.n	80019f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a00:	4c0a      	ldr	r4, [pc, #40]	@ (8001a2c <LoopForever+0x16>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a04:	e001      	b.n	8001a0a <LoopFillZerobss>

08001a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a08:	3204      	adds	r2, #4

08001a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a0c:	d3fb      	bcc.n	8001a06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f008 fdf5 	bl	800a5fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a12:	f7ff f841 	bl	8000a98 <main>

08001a16 <LoopForever>:

LoopForever:
    b LoopForever
 8001a16:	e7fe      	b.n	8001a16 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001a24:	0800b6cc 	.word	0x0800b6cc
  ldr r2, =_sbss
 8001a28:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001a2c:	20003144 	.word	0x20003144

08001a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC1_2_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <HAL_Init+0x3c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <HAL_Init+0x3c>)
 8001a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a48:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	f000 f962 	bl	8001d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a50:	200f      	movs	r0, #15
 8001a52:	f000 f80f 	bl	8001a74 <HAL_InitTick>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	e001      	b.n	8001a66 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a62:	f7ff fdcb 	bl	80015fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a66:	79fb      	ldrb	r3, [r7, #7]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3708      	adds	r7, #8
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40022000 	.word	0x40022000

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a80:	4b17      	ldr	r3, [pc, #92]	@ (8001ae0 <HAL_InitTick+0x6c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d023      	beq.n	8001ad0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <HAL_InitTick+0x70>)
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <HAL_InitTick+0x6c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	4619      	mov	r1, r3
 8001a92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f96d 	bl	8001d7e <HAL_SYSTICK_Config>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10f      	bne.n	8001aca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b0f      	cmp	r3, #15
 8001aae:	d809      	bhi.n	8001ac4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	6879      	ldr	r1, [r7, #4]
 8001ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab8:	f000 f937 	bl	8001d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_InitTick+0x74>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e007      	b.n	8001ad4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
 8001ac8:	e004      	b.n	8001ad4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	73fb      	strb	r3, [r7, #15]
 8001ace:	e001      	b.n	8001ad4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000118 	.word	0x20000118
 8001ae4:	20000110 	.word	0x20000110
 8001ae8:	20000114 	.word	0x20000114

08001aec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001af0:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_IncTick+0x20>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <HAL_IncTick+0x24>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	4a04      	ldr	r2, [pc, #16]	@ (8001b10 <HAL_IncTick+0x24>)
 8001afe:	6013      	str	r3, [r2, #0]
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	20000118 	.word	0x20000118
 8001b10:	20000790 	.word	0x20000790

08001b14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <HAL_GetTick+0x14>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20000790 	.word	0x20000790

08001b2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b34:	f7ff ffee 	bl	8001b14 <HAL_GetTick>
 8001b38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b44:	d005      	beq.n	8001b52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b46:	4b0a      	ldr	r3, [pc, #40]	@ (8001b70 <HAL_Delay+0x44>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4413      	add	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b52:	bf00      	nop
 8001b54:	f7ff ffde 	bl	8001b14 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d8f7      	bhi.n	8001b54 <HAL_Delay+0x28>
  {
  }
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000118 	.word	0x20000118

08001b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b84:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b8a:	68ba      	ldr	r2, [r7, #8]
 8001b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b90:	4013      	ands	r3, r2
 8001b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ba6:	4a04      	ldr	r2, [pc, #16]	@ (8001bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	60d3      	str	r3, [r2, #12]
}
 8001bac:	bf00      	nop
 8001bae:	3714      	adds	r7, #20
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc0:	4b04      	ldr	r3, [pc, #16]	@ (8001bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	0a1b      	lsrs	r3, r3, #8
 8001bc6:	f003 0307 	and.w	r3, r3, #7
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	db0b      	blt.n	8001c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	f003 021f 	and.w	r2, r3, #31
 8001bf0:	4907      	ldr	r1, [pc, #28]	@ (8001c10 <__NVIC_EnableIRQ+0x38>)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	095b      	lsrs	r3, r3, #5
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100

08001c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	db0a      	blt.n	8001c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	490c      	ldr	r1, [pc, #48]	@ (8001c60 <__NVIC_SetPriority+0x4c>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	0112      	lsls	r2, r2, #4
 8001c34:	b2d2      	uxtb	r2, r2
 8001c36:	440b      	add	r3, r1
 8001c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c3c:	e00a      	b.n	8001c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	4908      	ldr	r1, [pc, #32]	@ (8001c64 <__NVIC_SetPriority+0x50>)
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	3b04      	subs	r3, #4
 8001c4c:	0112      	lsls	r2, r2, #4
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	440b      	add	r3, r1
 8001c52:	761a      	strb	r2, [r3, #24]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000e100 	.word	0xe000e100
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b089      	sub	sp, #36	@ 0x24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	f1c3 0307 	rsb	r3, r3, #7
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	bf28      	it	cs
 8001c86:	2304      	movcs	r3, #4
 8001c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d902      	bls.n	8001c98 <NVIC_EncodePriority+0x30>
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3b03      	subs	r3, #3
 8001c96:	e000      	b.n	8001c9a <NVIC_EncodePriority+0x32>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	401a      	ands	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43d9      	mvns	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc0:	4313      	orrs	r3, r2
         );
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3724      	adds	r7, #36	@ 0x24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce0:	d301      	bcc.n	8001ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e00f      	b.n	8001d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <SysTick_Config+0x40>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3b01      	subs	r3, #1
 8001cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cee:	210f      	movs	r1, #15
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	f7ff ff8e 	bl	8001c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cf8:	4b05      	ldr	r3, [pc, #20]	@ (8001d10 <SysTick_Config+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cfe:	4b04      	ldr	r3, [pc, #16]	@ (8001d10 <SysTick_Config+0x40>)
 8001d00:	2207      	movs	r2, #7
 8001d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	e000e010 	.word	0xe000e010

08001d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff29 	bl	8001b74 <__NVIC_SetPriorityGrouping>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b086      	sub	sp, #24
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	4603      	mov	r3, r0
 8001d32:	60b9      	str	r1, [r7, #8]
 8001d34:	607a      	str	r2, [r7, #4]
 8001d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff3e 	bl	8001bbc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff8e 	bl	8001c68 <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5d 	bl	8001c14 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	4603      	mov	r3, r0
 8001d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff ff31 	bl	8001bd8 <__NVIC_EnableIRQ>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffa2 	bl	8001cd0 <SysTick_Config>
 8001d8c:	4603      	mov	r3, r0
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e098      	b.n	8001edc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee8 <HAL_DMA_Init+0x150>)
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d80f      	bhi.n	8001dd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8001eec <HAL_DMA_Init+0x154>)
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef0 <HAL_DMA_Init+0x158>)
 8001dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc6:	091b      	lsrs	r3, r3, #4
 8001dc8:	009a      	lsls	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a48      	ldr	r2, [pc, #288]	@ (8001ef4 <HAL_DMA_Init+0x15c>)
 8001dd2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001dd4:	e00e      	b.n	8001df4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b46      	ldr	r3, [pc, #280]	@ (8001ef8 <HAL_DMA_Init+0x160>)
 8001dde:	4413      	add	r3, r2
 8001de0:	4a43      	ldr	r2, [pc, #268]	@ (8001ef0 <HAL_DMA_Init+0x158>)
 8001de2:	fba2 2303 	umull	r2, r3, r2, r3
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	009a      	lsls	r2, r3, #2
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a42      	ldr	r2, [pc, #264]	@ (8001efc <HAL_DMA_Init+0x164>)
 8001df2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2202      	movs	r2, #2
 8001df8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001e18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a1b      	ldr	r3, [r3, #32]
 8001e36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001e4e:	d039      	beq.n	8001ec4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	4a27      	ldr	r2, [pc, #156]	@ (8001ef4 <HAL_DMA_Init+0x15c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11a      	bne.n	8001e90 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e5a:	4b29      	ldr	r3, [pc, #164]	@ (8001f00 <HAL_DMA_Init+0x168>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e62:	f003 031c 	and.w	r3, r3, #28
 8001e66:	210f      	movs	r1, #15
 8001e68:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	4924      	ldr	r1, [pc, #144]	@ (8001f00 <HAL_DMA_Init+0x168>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001e74:	4b22      	ldr	r3, [pc, #136]	@ (8001f00 <HAL_DMA_Init+0x168>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6859      	ldr	r1, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e80:	f003 031c 	and.w	r3, r3, #28
 8001e84:	fa01 f303 	lsl.w	r3, r1, r3
 8001e88:	491d      	ldr	r1, [pc, #116]	@ (8001f00 <HAL_DMA_Init+0x168>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
 8001e8e:	e019      	b.n	8001ec4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001e90:	4b1c      	ldr	r3, [pc, #112]	@ (8001f04 <HAL_DMA_Init+0x16c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e98:	f003 031c 	and.w	r3, r3, #28
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	4917      	ldr	r1, [pc, #92]	@ (8001f04 <HAL_DMA_Init+0x16c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_DMA_Init+0x16c>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f003 031c 	and.w	r3, r3, #28
 8001eba:	fa01 f303 	lsl.w	r3, r1, r3
 8001ebe:	4911      	ldr	r1, [pc, #68]	@ (8001f04 <HAL_DMA_Init+0x16c>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	40020407 	.word	0x40020407
 8001eec:	bffdfff8 	.word	0xbffdfff8
 8001ef0:	cccccccd 	.word	0xcccccccd
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	bffdfbf8 	.word	0xbffdfbf8
 8001efc:	40020400 	.word	0x40020400
 8001f00:	400200a8 	.word	0x400200a8
 8001f04:	400204a8 	.word	0x400204a8

08001f08 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d008      	beq.n	8001f32 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2204      	movs	r2, #4
 8001f24:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e022      	b.n	8001f78 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 020e 	bic.w	r2, r2, #14
 8001f40:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 0201 	bic.w	r2, r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f003 021c 	and.w	r2, r3, #28
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2101      	movs	r1, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3714      	adds	r7, #20
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d005      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	e029      	b.n	8001ffc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 020e 	bic.w	r2, r2, #14
 8001fb6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fcc:	f003 021c 	and.w	r2, r3, #28
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fda:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	4798      	blx	r3
    }
  }
  return status;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002022:	f003 031c 	and.w	r3, r3, #28
 8002026:	2204      	movs	r2, #4
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d026      	beq.n	8002080 <HAL_DMA_IRQHandler+0x7a>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d021      	beq.n	8002080 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0320 	and.w	r3, r3, #32
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f022 0204 	bic.w	r2, r2, #4
 8002058:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205e:	f003 021c 	and.w	r2, r3, #28
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	2104      	movs	r1, #4
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	2b00      	cmp	r3, #0
 8002074:	d071      	beq.n	800215a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800207e:	e06c      	b.n	800215a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002084:	f003 031c 	and.w	r3, r3, #28
 8002088:	2202      	movs	r2, #2
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d02e      	beq.n	80020f2 <HAL_DMA_IRQHandler+0xec>
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d029      	beq.n	80020f2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0320 	and.w	r3, r3, #32
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d10b      	bne.n	80020c4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 020a 	bic.w	r2, r2, #10
 80020ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c8:	f003 021c 	and.w	r2, r3, #28
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	2102      	movs	r1, #2
 80020d2:	fa01 f202 	lsl.w	r2, r1, r2
 80020d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d038      	beq.n	800215a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020f0:	e033      	b.n	800215a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f003 031c 	and.w	r3, r3, #28
 80020fa:	2208      	movs	r2, #8
 80020fc:	409a      	lsls	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d02a      	beq.n	800215c <HAL_DMA_IRQHandler+0x156>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f003 0308 	and.w	r3, r3, #8
 800210c:	2b00      	cmp	r3, #0
 800210e:	d025      	beq.n	800215c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 020e 	bic.w	r2, r2, #14
 800211e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	f003 021c 	and.w	r2, r3, #28
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	2101      	movs	r1, #1
 800212e:	fa01 f202 	lsl.w	r2, r1, r2
 8002132:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2201      	movs	r2, #1
 800213e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800214e:	2b00      	cmp	r3, #0
 8002150:	d004      	beq.n	800215c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800215a:	bf00      	nop
 800215c:	bf00      	nop
}
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002172:	e17f      	b.n	8002474 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2101      	movs	r1, #1
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	4013      	ands	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 8171 	beq.w	800246e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	2b01      	cmp	r3, #1
 8002196:	d005      	beq.n	80021a4 <HAL_GPIO_Init+0x40>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d130      	bne.n	8002206 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	2203      	movs	r2, #3
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4013      	ands	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021da:	2201      	movs	r2, #1
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4013      	ands	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	091b      	lsrs	r3, r3, #4
 80021f0:	f003 0201 	and.w	r2, r3, #1
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b03      	cmp	r3, #3
 8002210:	d118      	bne.n	8002244 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	08db      	lsrs	r3, r3, #3
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	2b03      	cmp	r3, #3
 800224e:	d017      	beq.n	8002280 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	2203      	movs	r2, #3
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4013      	ands	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d123      	bne.n	80022d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	08da      	lsrs	r2, r3, #3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3208      	adds	r2, #8
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	220f      	movs	r2, #15
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	691a      	ldr	r2, [r3, #16]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	08da      	lsrs	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3208      	adds	r2, #8
 80022ce:	6939      	ldr	r1, [r7, #16]
 80022d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	2203      	movs	r2, #3
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	4013      	ands	r3, r2
 80022ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80ac 	beq.w	800246e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	4b5f      	ldr	r3, [pc, #380]	@ (8002494 <HAL_GPIO_Init+0x330>)
 8002318:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231a:	4a5e      	ldr	r2, [pc, #376]	@ (8002494 <HAL_GPIO_Init+0x330>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6613      	str	r3, [r2, #96]	@ 0x60
 8002322:	4b5c      	ldr	r3, [pc, #368]	@ (8002494 <HAL_GPIO_Init+0x330>)
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800232e:	4a5a      	ldr	r2, [pc, #360]	@ (8002498 <HAL_GPIO_Init+0x334>)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	220f      	movs	r2, #15
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43db      	mvns	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002358:	d025      	beq.n	80023a6 <HAL_GPIO_Init+0x242>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a4f      	ldr	r2, [pc, #316]	@ (800249c <HAL_GPIO_Init+0x338>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d01f      	beq.n	80023a2 <HAL_GPIO_Init+0x23e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a4e      	ldr	r2, [pc, #312]	@ (80024a0 <HAL_GPIO_Init+0x33c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d019      	beq.n	800239e <HAL_GPIO_Init+0x23a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a4d      	ldr	r2, [pc, #308]	@ (80024a4 <HAL_GPIO_Init+0x340>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d013      	beq.n	800239a <HAL_GPIO_Init+0x236>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4c      	ldr	r2, [pc, #304]	@ (80024a8 <HAL_GPIO_Init+0x344>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00d      	beq.n	8002396 <HAL_GPIO_Init+0x232>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4b      	ldr	r2, [pc, #300]	@ (80024ac <HAL_GPIO_Init+0x348>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d007      	beq.n	8002392 <HAL_GPIO_Init+0x22e>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4a      	ldr	r2, [pc, #296]	@ (80024b0 <HAL_GPIO_Init+0x34c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_GPIO_Init+0x22a>
 800238a:	2306      	movs	r3, #6
 800238c:	e00c      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 800238e:	2307      	movs	r3, #7
 8002390:	e00a      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 8002392:	2305      	movs	r3, #5
 8002394:	e008      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 8002396:	2304      	movs	r3, #4
 8002398:	e006      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 800239a:	2303      	movs	r3, #3
 800239c:	e004      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 800239e:	2302      	movs	r3, #2
 80023a0:	e002      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_GPIO_Init+0x244>
 80023a6:	2300      	movs	r3, #0
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	f002 0203 	and.w	r2, r2, #3
 80023ae:	0092      	lsls	r2, r2, #2
 80023b0:	4093      	lsls	r3, r2
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023b8:	4937      	ldr	r1, [pc, #220]	@ (8002498 <HAL_GPIO_Init+0x334>)
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	3302      	adds	r3, #2
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023c6:	4b3b      	ldr	r3, [pc, #236]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	43db      	mvns	r3, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4013      	ands	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023ea:	4a32      	ldr	r2, [pc, #200]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023f0:	4b30      	ldr	r3, [pc, #192]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	43db      	mvns	r3, r3
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4013      	ands	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4313      	orrs	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002414:	4a27      	ldr	r2, [pc, #156]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800241a:	4b26      	ldr	r3, [pc, #152]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800243e:	4a1d      	ldr	r2, [pc, #116]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002444:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002468:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <HAL_GPIO_Init+0x350>)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	3301      	adds	r3, #1
 8002472:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	f47f ae78 	bne.w	8002174 <HAL_GPIO_Init+0x10>
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	40010000 	.word	0x40010000
 800249c:	48000400 	.word	0x48000400
 80024a0:	48000800 	.word	0x48000800
 80024a4:	48000c00 	.word	0x48000c00
 80024a8:	48001000 	.word	0x48001000
 80024ac:	48001400 	.word	0x48001400
 80024b0:	48001800 	.word	0x48001800
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024c8:	787b      	ldrb	r3, [r7, #1]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d003      	beq.n	80024d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ce:	887a      	ldrh	r2, [r7, #2]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024d4:	e002      	b.n	80024dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e08d      	b.n	8002616 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7fe fa52 	bl	80009b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2224      	movs	r2, #36	@ 0x24
 8002518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0201 	bic.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	e006      	b.n	8002570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800256e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b02      	cmp	r3, #2
 8002576:	d108      	bne.n	800258a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	e007      	b.n	800259a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002598:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80025a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	691a      	ldr	r2, [r3, #16]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69d9      	ldr	r1, [r3, #28]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2220      	movs	r2, #32
 8002602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b088      	sub	sp, #32
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	4608      	mov	r0, r1
 800262a:	4611      	mov	r1, r2
 800262c:	461a      	mov	r2, r3
 800262e:	4603      	mov	r3, r0
 8002630:	817b      	strh	r3, [r7, #10]
 8002632:	460b      	mov	r3, r1
 8002634:	813b      	strh	r3, [r7, #8]
 8002636:	4613      	mov	r3, r2
 8002638:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b20      	cmp	r3, #32
 8002644:	f040 80f9 	bne.w	800283a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002648:	6a3b      	ldr	r3, [r7, #32]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_I2C_Mem_Write+0x34>
 800264e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800265a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e0ed      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_I2C_Mem_Write+0x4e>
 800266a:	2302      	movs	r3, #2
 800266c:	e0e6      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002676:	f7ff fa4d 	bl	8001b14 <HAL_GetTick>
 800267a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2319      	movs	r3, #25
 8002682:	2201      	movs	r2, #1
 8002684:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 fac3 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d1      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2221      	movs	r2, #33	@ 0x21
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2240      	movs	r2, #64	@ 0x40
 80026a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a3a      	ldr	r2, [r7, #32]
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026c0:	88f8      	ldrh	r0, [r7, #6]
 80026c2:	893a      	ldrh	r2, [r7, #8]
 80026c4:	8979      	ldrh	r1, [r7, #10]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	4603      	mov	r3, r0
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f000 f9d3 	bl	8002a7c <I2C_RequestMemoryWrite>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d005      	beq.n	80026e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0a9      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	2bff      	cmp	r3, #255	@ 0xff
 80026f0:	d90e      	bls.n	8002710 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	22ff      	movs	r2, #255	@ 0xff
 80026f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	8979      	ldrh	r1, [r7, #10]
 8002700:	2300      	movs	r3, #0
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002708:	68f8      	ldr	r0, [r7, #12]
 800270a:	f000 fc47 	bl	8002f9c <I2C_TransferConfig>
 800270e:	e00f      	b.n	8002730 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271e:	b2da      	uxtb	r2, r3
 8002720:	8979      	ldrh	r1, [r7, #10]
 8002722:	2300      	movs	r3, #0
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f000 fc36 	bl	8002f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fac6 	bl	8002cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e07b      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	1c5a      	adds	r2, r3, #1
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b01      	subs	r3, #1
 8002762:	b29a      	uxth	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800276c:	3b01      	subs	r3, #1
 800276e:	b29a      	uxth	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002778:	b29b      	uxth	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d034      	beq.n	80027e8 <HAL_I2C_Mem_Write+0x1c8>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	d130      	bne.n	80027e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278c:	2200      	movs	r2, #0
 800278e:	2180      	movs	r1, #128	@ 0x80
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f000 fa3f 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e04d      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2bff      	cmp	r3, #255	@ 0xff
 80027a8:	d90e      	bls.n	80027c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	22ff      	movs	r2, #255	@ 0xff
 80027ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	8979      	ldrh	r1, [r7, #10]
 80027b8:	2300      	movs	r3, #0
 80027ba:	9300      	str	r3, [sp, #0]
 80027bc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027c0:	68f8      	ldr	r0, [r7, #12]
 80027c2:	f000 fbeb 	bl	8002f9c <I2C_TransferConfig>
 80027c6:	e00f      	b.n	80027e8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	8979      	ldrh	r1, [r7, #10]
 80027da:	2300      	movs	r3, #0
 80027dc:	9300      	str	r3, [sp, #0]
 80027de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fbda 	bl	8002f9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d19e      	bne.n	8002730 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027f6:	68f8      	ldr	r0, [r7, #12]
 80027f8:	f000 faac 	bl	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e01a      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2220      	movs	r2, #32
 800280c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b0a      	ldr	r3, [pc, #40]	@ (8002844 <HAL_I2C_Mem_Write+0x224>)
 800281a:	400b      	ands	r3, r1
 800281c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2220      	movs	r2, #32
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800283a:	2302      	movs	r3, #2
  }
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	fe00e800 	.word	0xfe00e800

08002848 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af02      	add	r7, sp, #8
 800284e:	60f8      	str	r0, [r7, #12]
 8002850:	4608      	mov	r0, r1
 8002852:	4611      	mov	r1, r2
 8002854:	461a      	mov	r2, r3
 8002856:	4603      	mov	r3, r0
 8002858:	817b      	strh	r3, [r7, #10]
 800285a:	460b      	mov	r3, r1
 800285c:	813b      	strh	r3, [r7, #8]
 800285e:	4613      	mov	r3, r2
 8002860:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b20      	cmp	r3, #32
 800286c:	f040 80fd 	bne.w	8002a6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_I2C_Mem_Read+0x34>
 8002876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002878:	2b00      	cmp	r3, #0
 800287a:	d105      	bne.n	8002888 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002882:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0f1      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_I2C_Mem_Read+0x4e>
 8002892:	2302      	movs	r3, #2
 8002894:	e0ea      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800289e:	f7ff f939 	bl	8001b14 <HAL_GetTick>
 80028a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2319      	movs	r3, #25
 80028aa:	2201      	movs	r2, #1
 80028ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 f9af 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0d5      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2222      	movs	r2, #34	@ 0x22
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2240      	movs	r2, #64	@ 0x40
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80028e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e8:	88f8      	ldrh	r0, [r7, #6]
 80028ea:	893a      	ldrh	r2, [r7, #8]
 80028ec:	8979      	ldrh	r1, [r7, #10]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	4603      	mov	r3, r0
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 f913 	bl	8002b24 <I2C_RequestMemoryRead>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0ad      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	2bff      	cmp	r3, #255	@ 0xff
 8002918:	d90e      	bls.n	8002938 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002924:	b2da      	uxtb	r2, r3
 8002926:	8979      	ldrh	r1, [r7, #10]
 8002928:	4b52      	ldr	r3, [pc, #328]	@ (8002a74 <HAL_I2C_Mem_Read+0x22c>)
 800292a:	9300      	str	r3, [sp, #0]
 800292c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f000 fb33 	bl	8002f9c <I2C_TransferConfig>
 8002936:	e00f      	b.n	8002958 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002946:	b2da      	uxtb	r2, r3
 8002948:	8979      	ldrh	r1, [r7, #10]
 800294a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <HAL_I2C_Mem_Read+0x22c>)
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fb22 	bl	8002f9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800295e:	2200      	movs	r2, #0
 8002960:	2104      	movs	r1, #4
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 f956 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07c      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298e:	3b01      	subs	r3, #1
 8002990:	b29a      	uxth	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d034      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x1d0>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d130      	bne.n	8002a18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	2200      	movs	r2, #0
 80029be:	2180      	movs	r1, #128	@ 0x80
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f927 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e04d      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	2bff      	cmp	r3, #255	@ 0xff
 80029d8:	d90e      	bls.n	80029f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	8979      	ldrh	r1, [r7, #10]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fad3 	bl	8002f9c <I2C_TransferConfig>
 80029f6:	e00f      	b.n	8002a18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fac2 	bl	8002f9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d19a      	bne.n	8002958 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f994 	bl	8002d54 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e01a      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_I2C_Mem_Read+0x230>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2220      	movs	r2, #32
 8002a52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2302      	movs	r3, #2
  }
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	80002400 	.word	0x80002400
 8002a78:	fe00e800 	.word	0xfe00e800

08002a7c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	4608      	mov	r0, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	817b      	strh	r3, [r7, #10]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	813b      	strh	r3, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	8979      	ldrh	r1, [r7, #10]
 8002a9c:	4b20      	ldr	r3, [pc, #128]	@ (8002b20 <I2C_RequestMemoryWrite+0xa4>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fa79 	bl	8002f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aaa:	69fa      	ldr	r2, [r7, #28]
 8002aac:	69b9      	ldr	r1, [r7, #24]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f909 	bl	8002cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e02c      	b.n	8002b18 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ac4:	893b      	ldrh	r3, [r7, #8]
 8002ac6:	b2da      	uxtb	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ace:	e015      	b.n	8002afc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ad0:	893b      	ldrh	r3, [r7, #8]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	69b9      	ldr	r1, [r7, #24]
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8ef 	bl	8002cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e012      	b.n	8002b18 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002af2:	893b      	ldrh	r3, [r7, #8]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2200      	movs	r2, #0
 8002b04:	2180      	movs	r1, #128	@ 0x80
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f884 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	80002000 	.word	0x80002000

08002b24 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	4608      	mov	r0, r1
 8002b2e:	4611      	mov	r1, r2
 8002b30:	461a      	mov	r2, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	817b      	strh	r3, [r7, #10]
 8002b36:	460b      	mov	r3, r1
 8002b38:	813b      	strh	r3, [r7, #8]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	8979      	ldrh	r1, [r7, #10]
 8002b44:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <I2C_RequestMemoryRead+0xa4>)
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fa26 	bl	8002f9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	69b9      	ldr	r1, [r7, #24]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f8b6 	bl	8002cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e02c      	b.n	8002bbe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b64:	88fb      	ldrh	r3, [r7, #6]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d105      	bne.n	8002b76 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b6a:	893b      	ldrh	r3, [r7, #8]
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b74:	e015      	b.n	8002ba2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002b76:	893b      	ldrh	r3, [r7, #8]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b84:	69fa      	ldr	r2, [r7, #28]
 8002b86:	69b9      	ldr	r1, [r7, #24]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f89c 	bl	8002cc6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e012      	b.n	8002bbe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b98:	893b      	ldrh	r3, [r7, #8]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2140      	movs	r1, #64	@ 0x40
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f831 	bl	8002c14 <I2C_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	80002000 	.word	0x80002000

08002bcc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d103      	bne.n	8002bea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d007      	beq.n	8002c08 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699a      	ldr	r2, [r3, #24]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	619a      	str	r2, [r3, #24]
  }
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c24:	e03b      	b.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	6839      	ldr	r1, [r7, #0]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f8d6 	bl	8002ddc <I2C_IsErrorOccurred>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e041      	b.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c40:	d02d      	beq.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c42:	f7fe ff67 	bl	8001b14 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d122      	bne.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4013      	ands	r3, r2
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	79fb      	ldrb	r3, [r7, #7]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d113      	bne.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7a:	f043 0220 	orr.w	r2, r3, #32
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00f      	b.n	8002cbe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699a      	ldr	r2, [r3, #24]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	68ba      	ldr	r2, [r7, #8]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	bf0c      	ite	eq
 8002cae:	2301      	moveq	r3, #1
 8002cb0:	2300      	movne	r3, #0
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d0b4      	beq.n	8002c26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cd2:	e033      	b.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	68b9      	ldr	r1, [r7, #8]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f87f 	bl	8002ddc <I2C_IsErrorOccurred>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e031      	b.n	8002d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cee:	d025      	beq.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf0:	f7fe ff10 	bl	8001b14 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d302      	bcc.n	8002d06 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d11a      	bne.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0302 	and.w	r3, r3, #2
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d013      	beq.n	8002d3c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d18:	f043 0220 	orr.w	r2, r3, #32
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2220      	movs	r2, #32
 8002d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e007      	b.n	8002d4c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d1c4      	bne.n	8002cd4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d60:	e02f      	b.n	8002dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f838 	bl	8002ddc <I2C_IsErrorOccurred>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e02d      	b.n	8002dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7fe fecd 	bl	8001b14 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11a      	bne.n	8002dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	f003 0320 	and.w	r3, r3, #32
 8002d96:	2b20      	cmp	r3, #32
 8002d98:	d013      	beq.n	8002dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2220      	movs	r2, #32
 8002daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e007      	b.n	8002dd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d1c8      	bne.n	8002d62 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	@ 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de8:	2300      	movs	r3, #0
 8002dea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d068      	beq.n	8002eda <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2210      	movs	r2, #16
 8002e0e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e10:	e049      	b.n	8002ea6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e18:	d045      	beq.n	8002ea6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7fe fe7b 	bl	8001b14 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	68ba      	ldr	r2, [r7, #8]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d302      	bcc.n	8002e30 <I2C_IsErrorOccurred+0x54>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d13a      	bne.n	8002ea6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e3a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e42:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e52:	d121      	bne.n	8002e98 <I2C_IsErrorOccurred+0xbc>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e5a:	d01d      	beq.n	8002e98 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e5c:	7cfb      	ldrb	r3, [r7, #19]
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	d01a      	beq.n	8002e98 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e70:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e72:	f7fe fe4f 	bl	8001b14 <HAL_GetTick>
 8002e76:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e78:	e00e      	b.n	8002e98 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e7a:	f7fe fe4b 	bl	8001b14 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b19      	cmp	r3, #25
 8002e86:	d907      	bls.n	8002e98 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f043 0320 	orr.w	r3, r3, #32
 8002e8e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e96:	e006      	b.n	8002ea6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d1e9      	bne.n	8002e7a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b20      	cmp	r3, #32
 8002eb2:	d003      	beq.n	8002ebc <I2C_IsErrorOccurred+0xe0>
 8002eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0aa      	beq.n	8002e12 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d103      	bne.n	8002ecc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	f043 0304 	orr.w	r3, r3, #4
 8002ed2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00b      	beq.n	8002f04 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f043 0301 	orr.w	r3, r3, #1
 8002ef2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002efc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00b      	beq.n	8002f26 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00b      	beq.n	8002f48 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f30:	6a3b      	ldr	r3, [r7, #32]
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01c      	beq.n	8002f8a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fe3b 	bl	8002bcc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6859      	ldr	r1, [r3, #4]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <I2C_IsErrorOccurred+0x1bc>)
 8002f62:	400b      	ands	r3, r1
 8002f64:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3728      	adds	r7, #40	@ 0x28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	fe00e800 	.word	0xfe00e800

08002f9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	607b      	str	r3, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	817b      	strh	r3, [r7, #10]
 8002faa:	4613      	mov	r3, r2
 8002fac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fae:	897b      	ldrh	r3, [r7, #10]
 8002fb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fb4:	7a7b      	ldrb	r3, [r7, #9]
 8002fb6:	041b      	lsls	r3, r3, #16
 8002fb8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002fca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	0d5b      	lsrs	r3, r3, #21
 8002fd6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <I2C_TransferConfig+0x60>)
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	ea02 0103 	and.w	r1, r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fee:	bf00      	nop
 8002ff0:	371c      	adds	r7, #28
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	03ff63ff 	.word	0x03ff63ff

08003000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b20      	cmp	r3, #32
 8003014:	d138      	bne.n	8003088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003020:	2302      	movs	r3, #2
 8003022:	e032      	b.n	800308a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	@ 0x24
 8003030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6819      	ldr	r1, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003096:	b480      	push	{r7}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d139      	bne.n	8003120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e033      	b.n	8003122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2224      	movs	r2, #36	@ 0x24
 80030c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f022 0201 	bic.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80030e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	021b      	lsls	r3, r3, #8
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	e000      	b.n	8003122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003120:	2302      	movs	r3, #2
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3714      	adds	r7, #20
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003134:	4b04      	ldr	r3, [pc, #16]	@ (8003148 <HAL_PWREx_GetVoltageRange+0x18>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40007000 	.word	0x40007000

0800314c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800315a:	d130      	bne.n	80031be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800315c:	4b23      	ldr	r3, [pc, #140]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003168:	d038      	beq.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800316a:	4b20      	ldr	r3, [pc, #128]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003172:	4a1e      	ldr	r2, [pc, #120]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003174:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003178:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800317a:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2232      	movs	r2, #50	@ 0x32
 8003180:	fb02 f303 	mul.w	r3, r2, r3
 8003184:	4a1b      	ldr	r2, [pc, #108]	@ (80031f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	3301      	adds	r3, #1
 800318e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003190:	e002      	b.n	8003198 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3b01      	subs	r3, #1
 8003196:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003198:	4b14      	ldr	r3, [pc, #80]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031a4:	d102      	bne.n	80031ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1f2      	bne.n	8003192 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ac:	4b0f      	ldr	r3, [pc, #60]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b8:	d110      	bne.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e00f      	b.n	80031de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031be:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80031c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ca:	d007      	beq.n	80031dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031cc:	4b07      	ldr	r3, [pc, #28]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80031d4:	4a05      	ldr	r2, [pc, #20]	@ (80031ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031dc:	2300      	movs	r3, #0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3714      	adds	r7, #20
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40007000 	.word	0x40007000
 80031f0:	20000110 	.word	0x20000110
 80031f4:	431bde83 	.word	0x431bde83

080031f8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e3ca      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800320a:	4b97      	ldr	r3, [pc, #604]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 030c 	and.w	r3, r3, #12
 8003212:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003214:	4b94      	ldr	r3, [pc, #592]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80e4 	beq.w	80033f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d007      	beq.n	8003242 <HAL_RCC_OscConfig+0x4a>
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b0c      	cmp	r3, #12
 8003236:	f040 808b 	bne.w	8003350 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 8087 	bne.w	8003350 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003242:	4b89      	ldr	r3, [pc, #548]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_RCC_OscConfig+0x62>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e3a2      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a1a      	ldr	r2, [r3, #32]
 800325e:	4b82      	ldr	r3, [pc, #520]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	2b00      	cmp	r3, #0
 8003268:	d004      	beq.n	8003274 <HAL_RCC_OscConfig+0x7c>
 800326a:	4b7f      	ldr	r3, [pc, #508]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003272:	e005      	b.n	8003280 <HAL_RCC_OscConfig+0x88>
 8003274:	4b7c      	ldr	r3, [pc, #496]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800327a:	091b      	lsrs	r3, r3, #4
 800327c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003280:	4293      	cmp	r3, r2
 8003282:	d223      	bcs.n	80032cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a1b      	ldr	r3, [r3, #32]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fd55 	bl	8003d38 <RCC_SetFlashLatencyFromMSIRange>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e383      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003298:	4b73      	ldr	r3, [pc, #460]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a72      	ldr	r2, [pc, #456]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800329e:	f043 0308 	orr.w	r3, r3, #8
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b70      	ldr	r3, [pc, #448]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	496d      	ldr	r1, [pc, #436]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	4968      	ldr	r1, [pc, #416]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	604b      	str	r3, [r1, #4]
 80032ca:	e025      	b.n	8003318 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032cc:	4b66      	ldr	r3, [pc, #408]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032d2:	f043 0308 	orr.w	r3, r3, #8
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b63      	ldr	r3, [pc, #396]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	4960      	ldr	r1, [pc, #384]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	495b      	ldr	r1, [pc, #364]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d109      	bne.n	8003318 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fd15 	bl	8003d38 <RCC_SetFlashLatencyFromMSIRange>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e343      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003318:	f000 fc4a 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b52      	ldr	r3, [pc, #328]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 030f 	and.w	r3, r3, #15
 8003328:	4950      	ldr	r1, [pc, #320]	@ (800346c <HAL_RCC_OscConfig+0x274>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	f003 031f 	and.w	r3, r3, #31
 8003330:	fa22 f303 	lsr.w	r3, r2, r3
 8003334:	4a4e      	ldr	r2, [pc, #312]	@ (8003470 <HAL_RCC_OscConfig+0x278>)
 8003336:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003338:	4b4e      	ldr	r3, [pc, #312]	@ (8003474 <HAL_RCC_OscConfig+0x27c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fb99 	bl	8001a74 <HAL_InitTick>
 8003342:	4603      	mov	r3, r0
 8003344:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d052      	beq.n	80033f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	e327      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d032      	beq.n	80033be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003358:	4b43      	ldr	r3, [pc, #268]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a42      	ldr	r2, [pc, #264]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800335e:	f043 0301 	orr.w	r3, r3, #1
 8003362:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003364:	f7fe fbd6 	bl	8001b14 <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800336c:	f7fe fbd2 	bl	8001b14 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e310      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800337e:	4b3a      	ldr	r3, [pc, #232]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d0f0      	beq.n	800336c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800338a:	4b37      	ldr	r3, [pc, #220]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a36      	ldr	r2, [pc, #216]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	6013      	str	r3, [r2, #0]
 8003396:	4b34      	ldr	r3, [pc, #208]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	4931      	ldr	r1, [pc, #196]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033a8:	4b2f      	ldr	r3, [pc, #188]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	492c      	ldr	r1, [pc, #176]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	e01a      	b.n	80033f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033be:	4b2a      	ldr	r3, [pc, #168]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a29      	ldr	r2, [pc, #164]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80033c4:	f023 0301 	bic.w	r3, r3, #1
 80033c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033ca:	f7fe fba3 	bl	8001b14 <HAL_GetTick>
 80033ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033d0:	e008      	b.n	80033e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d2:	f7fe fb9f 	bl	8001b14 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	2b02      	cmp	r3, #2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e2dd      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033e4:	4b20      	ldr	r3, [pc, #128]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f0      	bne.n	80033d2 <HAL_RCC_OscConfig+0x1da>
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d074      	beq.n	80034ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b08      	cmp	r3, #8
 8003404:	d005      	beq.n	8003412 <HAL_RCC_OscConfig+0x21a>
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b0c      	cmp	r3, #12
 800340a:	d10e      	bne.n	800342a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b03      	cmp	r3, #3
 8003410:	d10b      	bne.n	800342a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003412:	4b15      	ldr	r3, [pc, #84]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d064      	beq.n	80034e8 <HAL_RCC_OscConfig+0x2f0>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d160      	bne.n	80034e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e2ba      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x24a>
 8003434:	4b0c      	ldr	r3, [pc, #48]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0b      	ldr	r2, [pc, #44]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800343a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	e026      	b.n	8003490 <HAL_RCC_OscConfig+0x298>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800344a:	d115      	bne.n	8003478 <HAL_RCC_OscConfig+0x280>
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a05      	ldr	r2, [pc, #20]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 8003452:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b03      	ldr	r3, [pc, #12]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a02      	ldr	r2, [pc, #8]	@ (8003468 <HAL_RCC_OscConfig+0x270>)
 800345e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e014      	b.n	8003490 <HAL_RCC_OscConfig+0x298>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	0800b490 	.word	0x0800b490
 8003470:	20000110 	.word	0x20000110
 8003474:	20000114 	.word	0x20000114
 8003478:	4ba0      	ldr	r3, [pc, #640]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a9f      	ldr	r2, [pc, #636]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 800347e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003482:	6013      	str	r3, [r2, #0]
 8003484:	4b9d      	ldr	r3, [pc, #628]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a9c      	ldr	r2, [pc, #624]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 800348a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800348e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d013      	beq.n	80034c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003498:	f7fe fb3c 	bl	8001b14 <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a0:	f7fe fb38 	bl	8001b14 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b64      	cmp	r3, #100	@ 0x64
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e276      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b2:	4b92      	ldr	r3, [pc, #584]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d0f0      	beq.n	80034a0 <HAL_RCC_OscConfig+0x2a8>
 80034be:	e014      	b.n	80034ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe fb28 	bl	8001b14 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7fe fb24 	bl	8001b14 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	@ 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e262      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034da:	4b88      	ldr	r3, [pc, #544]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x2d0>
 80034e6:	e000      	b.n	80034ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d060      	beq.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d005      	beq.n	8003508 <HAL_RCC_OscConfig+0x310>
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	2b0c      	cmp	r3, #12
 8003500:	d119      	bne.n	8003536 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d116      	bne.n	8003536 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003508:	4b7c      	ldr	r3, [pc, #496]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d005      	beq.n	8003520 <HAL_RCC_OscConfig+0x328>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e23f      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003520:	4b76      	ldr	r3, [pc, #472]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	4973      	ldr	r1, [pc, #460]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003530:	4313      	orrs	r3, r2
 8003532:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003534:	e040      	b.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d023      	beq.n	8003586 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800353e:	4b6f      	ldr	r3, [pc, #444]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6e      	ldr	r2, [pc, #440]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fe fae3 	bl	8001b14 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003552:	f7fe fadf 	bl	8001b14 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e21d      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003564:	4b65      	ldr	r3, [pc, #404]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003570:	4b62      	ldr	r3, [pc, #392]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	061b      	lsls	r3, r3, #24
 800357e:	495f      	ldr	r1, [pc, #380]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003580:	4313      	orrs	r3, r2
 8003582:	604b      	str	r3, [r1, #4]
 8003584:	e018      	b.n	80035b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003586:	4b5d      	ldr	r3, [pc, #372]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a5c      	ldr	r2, [pc, #368]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 800358c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003592:	f7fe fabf 	bl	8001b14 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359a:	f7fe fabb 	bl	8001b14 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1f9      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ac:	4b53      	ldr	r3, [pc, #332]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03c      	beq.n	800363e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d01c      	beq.n	8003606 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035cc:	4b4b      	ldr	r3, [pc, #300]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d2:	4a4a      	ldr	r2, [pc, #296]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035dc:	f7fe fa9a 	bl	8001b14 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e4:	f7fe fa96 	bl	8001b14 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1d4      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035f6:	4b41      	ldr	r3, [pc, #260]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80035f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0ef      	beq.n	80035e4 <HAL_RCC_OscConfig+0x3ec>
 8003604:	e01b      	b.n	800363e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003606:	4b3d      	ldr	r3, [pc, #244]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003608:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360c:	4a3b      	ldr	r2, [pc, #236]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003616:	f7fe fa7d 	bl	8001b14 <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361e:	f7fe fa79 	bl	8001b14 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b02      	cmp	r3, #2
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e1b7      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003630:	4b32      	ldr	r3, [pc, #200]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003632:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1ef      	bne.n	800361e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80a6 	beq.w	8003798 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364c:	2300      	movs	r3, #0
 800364e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003650:	4b2a      	ldr	r3, [pc, #168]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003652:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003654:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10d      	bne.n	8003678 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365c:	4b27      	ldr	r3, [pc, #156]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003660:	4a26      	ldr	r2, [pc, #152]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 8003662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003666:	6593      	str	r3, [r2, #88]	@ 0x58
 8003668:	4b24      	ldr	r3, [pc, #144]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800366c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003670:	60bb      	str	r3, [r7, #8]
 8003672:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003674:	2301      	movs	r3, #1
 8003676:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003678:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <HAL_RCC_OscConfig+0x508>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d118      	bne.n	80036b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003684:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <HAL_RCC_OscConfig+0x508>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1d      	ldr	r2, [pc, #116]	@ (8003700 <HAL_RCC_OscConfig+0x508>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800368e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003690:	f7fe fa40 	bl	8001b14 <HAL_GetTick>
 8003694:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003698:	f7fe fa3c 	bl	8001b14 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e17a      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036aa:	4b15      	ldr	r3, [pc, #84]	@ (8003700 <HAL_RCC_OscConfig+0x508>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d0f0      	beq.n	8003698 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d108      	bne.n	80036d0 <HAL_RCC_OscConfig+0x4d8>
 80036be:	4b0f      	ldr	r3, [pc, #60]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	4a0d      	ldr	r2, [pc, #52]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80036c6:	f043 0301 	orr.w	r3, r3, #1
 80036ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ce:	e029      	b.n	8003724 <HAL_RCC_OscConfig+0x52c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b05      	cmp	r3, #5
 80036d6:	d115      	bne.n	8003704 <HAL_RCC_OscConfig+0x50c>
 80036d8:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	4a07      	ldr	r2, [pc, #28]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80036e0:	f043 0304 	orr.w	r3, r3, #4
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	4a03      	ldr	r2, [pc, #12]	@ (80036fc <HAL_RCC_OscConfig+0x504>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036f8:	e014      	b.n	8003724 <HAL_RCC_OscConfig+0x52c>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	40007000 	.word	0x40007000
 8003704:	4b9c      	ldr	r3, [pc, #624]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800370a:	4a9b      	ldr	r2, [pc, #620]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800370c:	f023 0301 	bic.w	r3, r3, #1
 8003710:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003714:	4b98      	ldr	r3, [pc, #608]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	4a97      	ldr	r2, [pc, #604]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d016      	beq.n	800375a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7fe f9f2 	bl	8001b14 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7fe f9ee 	bl	8001b14 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e12a      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374a:	4b8b      	ldr	r3, [pc, #556]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ed      	beq.n	8003734 <HAL_RCC_OscConfig+0x53c>
 8003758:	e015      	b.n	8003786 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375a:	f7fe f9db 	bl	8001b14 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe f9d7 	bl	8001b14 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e113      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003778:	4b7f      	ldr	r3, [pc, #508]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ed      	bne.n	8003762 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003786:	7ffb      	ldrb	r3, [r7, #31]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378c:	4b7a      	ldr	r3, [pc, #488]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	4a79      	ldr	r2, [pc, #484]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003796:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80fe 	beq.w	800399e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	f040 80d0 	bne.w	800394c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80037ac:	4b72      	ldr	r3, [pc, #456]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0203 	and.w	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037bc:	429a      	cmp	r2, r3
 80037be:	d130      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ca:	3b01      	subs	r3, #1
 80037cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d127      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d11f      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037ec:	2a07      	cmp	r2, #7
 80037ee:	bf14      	ite	ne
 80037f0:	2201      	movne	r2, #1
 80037f2:	2200      	moveq	r2, #0
 80037f4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d113      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003804:	085b      	lsrs	r3, r3, #1
 8003806:	3b01      	subs	r3, #1
 8003808:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d109      	bne.n	8003822 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	085b      	lsrs	r3, r3, #1
 800381a:	3b01      	subs	r3, #1
 800381c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d06e      	beq.n	8003900 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	2b0c      	cmp	r3, #12
 8003826:	d069      	beq.n	80038fc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003828:	4b53      	ldr	r3, [pc, #332]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d105      	bne.n	8003840 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003834:	4b50      	ldr	r3, [pc, #320]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d001      	beq.n	8003844 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0ad      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003844:	4b4c      	ldr	r3, [pc, #304]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a4b      	ldr	r2, [pc, #300]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800384a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800384e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003850:	f7fe f960 	bl	8001b14 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003858:	f7fe f95c 	bl	8001b14 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b02      	cmp	r3, #2
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e09a      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800386a:	4b43      	ldr	r3, [pc, #268]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1f0      	bne.n	8003858 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003876:	4b40      	ldr	r3, [pc, #256]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	4b40      	ldr	r3, [pc, #256]	@ (800397c <HAL_RCC_OscConfig+0x784>)
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003886:	3a01      	subs	r2, #1
 8003888:	0112      	lsls	r2, r2, #4
 800388a:	4311      	orrs	r1, r2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003890:	0212      	lsls	r2, r2, #8
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003898:	0852      	lsrs	r2, r2, #1
 800389a:	3a01      	subs	r2, #1
 800389c:	0552      	lsls	r2, r2, #21
 800389e:	4311      	orrs	r1, r2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80038a4:	0852      	lsrs	r2, r2, #1
 80038a6:	3a01      	subs	r2, #1
 80038a8:	0652      	lsls	r2, r2, #25
 80038aa:	4311      	orrs	r1, r2
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80038b0:	0912      	lsrs	r2, r2, #4
 80038b2:	0452      	lsls	r2, r2, #17
 80038b4:	430a      	orrs	r2, r1
 80038b6:	4930      	ldr	r1, [pc, #192]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80038bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038c8:	4b2b      	ldr	r3, [pc, #172]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	4a2a      	ldr	r2, [pc, #168]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 80038ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d4:	f7fe f91e 	bl	8001b14 <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038dc:	f7fe f91a 	bl	8001b14 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e058      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ee:	4b22      	ldr	r3, [pc, #136]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038fa:	e050      	b.n	800399e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e04f      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d148      	bne.n	800399e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800390c:	4b1a      	ldr	r3, [pc, #104]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a19      	ldr	r2, [pc, #100]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003916:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003918:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a16      	ldr	r2, [pc, #88]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 800391e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003922:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003924:	f7fe f8f6 	bl	8001b14 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe f8f2 	bl	8001b14 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e030      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800393e:	4b0e      	ldr	r3, [pc, #56]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0f0      	beq.n	800392c <HAL_RCC_OscConfig+0x734>
 800394a:	e028      	b.n	800399e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2b0c      	cmp	r3, #12
 8003950:	d023      	beq.n	800399a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b09      	ldr	r3, [pc, #36]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a08      	ldr	r2, [pc, #32]	@ (8003978 <HAL_RCC_OscConfig+0x780>)
 8003958:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800395c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800395e:	f7fe f8d9 	bl	8001b14 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003964:	e00c      	b.n	8003980 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003966:	f7fe f8d5 	bl	8001b14 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d905      	bls.n	8003980 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e013      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
 8003978:	40021000 	.word	0x40021000
 800397c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003980:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <HAL_RCC_OscConfig+0x7b0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ec      	bne.n	8003966 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800398c:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <HAL_RCC_OscConfig+0x7b0>)
 800398e:	68da      	ldr	r2, [r3, #12]
 8003990:	4905      	ldr	r1, [pc, #20]	@ (80039a8 <HAL_RCC_OscConfig+0x7b0>)
 8003992:	4b06      	ldr	r3, [pc, #24]	@ (80039ac <HAL_RCC_OscConfig+0x7b4>)
 8003994:	4013      	ands	r3, r2
 8003996:	60cb      	str	r3, [r1, #12]
 8003998:	e001      	b.n	800399e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	feeefffc 	.word	0xfeeefffc

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0e7      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b75      	ldr	r3, [pc, #468]	@ (8003b9c <HAL_RCC_ClockConfig+0x1ec>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d910      	bls.n	80039f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b72      	ldr	r3, [pc, #456]	@ (8003b9c <HAL_RCC_ClockConfig+0x1ec>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 0207 	bic.w	r2, r3, #7
 80039da:	4970      	ldr	r1, [pc, #448]	@ (8003b9c <HAL_RCC_ClockConfig+0x1ec>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b6e      	ldr	r3, [pc, #440]	@ (8003b9c <HAL_RCC_ClockConfig+0x1ec>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d001      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0cf      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0302 	and.w	r3, r3, #2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d010      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	4b66      	ldr	r3, [pc, #408]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d908      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a10:	4b63      	ldr	r3, [pc, #396]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	4960      	ldr	r1, [pc, #384]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d04c      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d107      	bne.n	8003a46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a36:	4b5a      	ldr	r3, [pc, #360]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d121      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0a6      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4e:	4b54      	ldr	r3, [pc, #336]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d115      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e09a      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a66:	4b4e      	ldr	r3, [pc, #312]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e08e      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a76:	4b4a      	ldr	r3, [pc, #296]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e086      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	4b46      	ldr	r3, [pc, #280]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4943      	ldr	r1, [pc, #268]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a98:	f7fe f83c 	bl	8001b14 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fe f838 	bl	8001b14 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e06e      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	4b3a      	ldr	r3, [pc, #232]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 020c 	and.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d1eb      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d010      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	4b31      	ldr	r3, [pc, #196]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d208      	bcs.n	8003af6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	492b      	ldr	r1, [pc, #172]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003af2:	4313      	orrs	r3, r2
 8003af4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003af6:	4b29      	ldr	r3, [pc, #164]	@ (8003b9c <HAL_RCC_ClockConfig+0x1ec>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0307 	and.w	r3, r3, #7
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d210      	bcs.n	8003b26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b04:	4b25      	ldr	r3, [pc, #148]	@ (8003b9c <HAL_RCC_ClockConfig+0x1ec>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 0207 	bic.w	r2, r3, #7
 8003b0c:	4923      	ldr	r1, [pc, #140]	@ (8003b9c <HAL_RCC_ClockConfig+0x1ec>)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b14:	4b21      	ldr	r3, [pc, #132]	@ (8003b9c <HAL_RCC_ClockConfig+0x1ec>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e036      	b.n	8003b94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d008      	beq.n	8003b44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b32:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	4918      	ldr	r1, [pc, #96]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b50:	4b13      	ldr	r3, [pc, #76]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	00db      	lsls	r3, r3, #3
 8003b5e:	4910      	ldr	r1, [pc, #64]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b64:	f000 f824 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	490b      	ldr	r1, [pc, #44]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1f4>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b80:	4a09      	ldr	r2, [pc, #36]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1f8>)
 8003b82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b84:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <HAL_RCC_ClockConfig+0x1fc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd ff73 	bl	8001a74 <HAL_InitTick>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b92:	7afb      	ldrb	r3, [r7, #11]
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40022000 	.word	0x40022000
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	0800b490 	.word	0x0800b490
 8003ba8:	20000110 	.word	0x20000110
 8003bac:	20000114 	.word	0x20000114

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b089      	sub	sp, #36	@ 0x24
 8003bb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bbe:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f003 030c 	and.w	r3, r3, #12
 8003bc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b0c      	cmp	r3, #12
 8003bdc:	d121      	bne.n	8003c22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d11e      	bne.n	8003c22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003be4:	4b34      	ldr	r3, [pc, #208]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bf0:	4b31      	ldr	r3, [pc, #196]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003bf6:	0a1b      	lsrs	r3, r3, #8
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	61fb      	str	r3, [r7, #28]
 8003bfe:	e005      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c00:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	091b      	lsrs	r3, r3, #4
 8003c06:	f003 030f 	and.w	r3, r3, #15
 8003c0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c20:	e00a      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b04      	cmp	r3, #4
 8003c26:	d102      	bne.n	8003c2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c28:	4b25      	ldr	r3, [pc, #148]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e004      	b.n	8003c38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d101      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c34:	4b23      	ldr	r3, [pc, #140]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b0c      	cmp	r3, #12
 8003c3c:	d134      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d003      	beq.n	8003c56 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d003      	beq.n	8003c5c <HAL_RCC_GetSysClockFreq+0xac>
 8003c54:	e005      	b.n	8003c62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c56:	4b1a      	ldr	r3, [pc, #104]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c58:	617b      	str	r3, [r7, #20]
      break;
 8003c5a:	e005      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c5c:	4b19      	ldr	r3, [pc, #100]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c5e:	617b      	str	r3, [r7, #20]
      break;
 8003c60:	e002      	b.n	8003c68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	617b      	str	r3, [r7, #20]
      break;
 8003c66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c68:	4b13      	ldr	r3, [pc, #76]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	3301      	adds	r3, #1
 8003c74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c76:	4b10      	ldr	r3, [pc, #64]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	fb03 f202 	mul.w	r2, r3, r2
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	0e5b      	lsrs	r3, r3, #25
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	3301      	adds	r3, #1
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ca8:	69bb      	ldr	r3, [r7, #24]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	@ 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	0800b4a8 	.word	0x0800b4a8
 8003cc0:	00f42400 	.word	0x00f42400
 8003cc4:	007a1200 	.word	0x007a1200

08003cc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000110 	.word	0x20000110

08003ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ce4:	f7ff fff0 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4904      	ldr	r1, [pc, #16]	@ (8003d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40021000 	.word	0x40021000
 8003d08:	0800b4a0 	.word	0x0800b4a0

08003d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d10:	f7ff ffda 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003d14:	4602      	mov	r2, r0
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	0adb      	lsrs	r3, r3, #11
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	4904      	ldr	r1, [pc, #16]	@ (8003d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d22:	5ccb      	ldrb	r3, [r1, r3]
 8003d24:	f003 031f 	and.w	r3, r3, #31
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40021000 	.word	0x40021000
 8003d34:	0800b4a0 	.word	0x0800b4a0

08003d38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d40:	2300      	movs	r3, #0
 8003d42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d44:	4b2a      	ldr	r3, [pc, #168]	@ (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d50:	f7ff f9ee 	bl	8003130 <HAL_PWREx_GetVoltageRange>
 8003d54:	6178      	str	r0, [r7, #20]
 8003d56:	e014      	b.n	8003d82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d58:	4b25      	ldr	r3, [pc, #148]	@ (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5c:	4a24      	ldr	r2, [pc, #144]	@ (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d64:	4b22      	ldr	r3, [pc, #136]	@ (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d70:	f7ff f9de 	bl	8003130 <HAL_PWREx_GetVoltageRange>
 8003d74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d76:	4b1e      	ldr	r3, [pc, #120]	@ (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d80:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d88:	d10b      	bne.n	8003da2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2b80      	cmp	r3, #128	@ 0x80
 8003d8e:	d919      	bls.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d94:	d902      	bls.n	8003d9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d96:	2302      	movs	r3, #2
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	e013      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	e010      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b80      	cmp	r3, #128	@ 0x80
 8003da6:	d902      	bls.n	8003dae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003da8:	2303      	movs	r3, #3
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e00a      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b80      	cmp	r3, #128	@ 0x80
 8003db2:	d102      	bne.n	8003dba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003db4:	2302      	movs	r3, #2
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e004      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b70      	cmp	r3, #112	@ 0x70
 8003dbe:	d101      	bne.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 0207 	bic.w	r2, r3, #7
 8003dcc:	4909      	ldr	r1, [pc, #36]	@ (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dd4:	4b07      	ldr	r3, [pc, #28]	@ (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d001      	beq.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40022000 	.word	0x40022000

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e00:	2300      	movs	r3, #0
 8003e02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e04:	2300      	movs	r3, #0
 8003e06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d041      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e18:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e1c:	d02a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e1e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003e22:	d824      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e28:	d008      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e2a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003e2e:	d81e      	bhi.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003e34:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e38:	d010      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e3a:	e018      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e3c:	4b86      	ldr	r3, [pc, #536]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4a85      	ldr	r2, [pc, #532]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e48:	e015      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	2100      	movs	r1, #0
 8003e50:	4618      	mov	r0, r3
 8003e52:	f001 f829 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e5a:	e00c      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3320      	adds	r3, #32
 8003e60:	2100      	movs	r1, #0
 8003e62:	4618      	mov	r0, r3
 8003e64:	f001 f914 	bl	8005090 <RCCEx_PLLSAI2_Config>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e6c:	e003      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	74fb      	strb	r3, [r7, #19]
      break;
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e76:	7cfb      	ldrb	r3, [r7, #19]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e7c:	4b76      	ldr	r3, [pc, #472]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e82:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e8a:	4973      	ldr	r1, [pc, #460]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e92:	e001      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	7cfb      	ldrb	r3, [r7, #19]
 8003e96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d041      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ea8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eac:	d02a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003eae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003eb2:	d824      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003eb4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003eb8:	d008      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003eba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ebe:	d81e      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003ec4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ec8:	d010      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003eca:	e018      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ecc:	4b62      	ldr	r3, [pc, #392]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a61      	ldr	r2, [pc, #388]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003ed8:	e015      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 ffe1 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003eea:	e00c      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3320      	adds	r3, #32
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 f8cc 	bl	8005090 <RCCEx_PLLSAI2_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003efc:	e003      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	74fb      	strb	r3, [r7, #19]
      break;
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f0c:	4b52      	ldr	r3, [pc, #328]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f1a:	494f      	ldr	r1, [pc, #316]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003f22:	e001      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80a0 	beq.w	8004076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f3a:	4b47      	ldr	r3, [pc, #284]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00d      	beq.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f50:	4b41      	ldr	r3, [pc, #260]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f54:	4a40      	ldr	r2, [pc, #256]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	60bb      	str	r3, [r7, #8]
 8003f66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a3a      	ldr	r2, [pc, #232]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f78:	f7fd fdcc 	bl	8001b14 <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f7e:	e009      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f80:	f7fd fdc8 	bl	8001b14 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d902      	bls.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	74fb      	strb	r3, [r7, #19]
        break;
 8003f92:	e005      	b.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f94:	4b31      	ldr	r3, [pc, #196]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ef      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d15c      	bne.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01f      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d019      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fc4:	4b24      	ldr	r3, [pc, #144]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fd0:	4b21      	ldr	r3, [pc, #132]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd6:	4a20      	ldr	r2, [pc, #128]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fe0:	4b1d      	ldr	r3, [pc, #116]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ff0:	4a19      	ldr	r2, [pc, #100]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d016      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004002:	f7fd fd87 	bl	8001b14 <HAL_GetTick>
 8004006:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004008:	e00b      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fd fd83 	bl	8001b14 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d902      	bls.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	74fb      	strb	r3, [r7, #19]
            break;
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004022:	4b0d      	ldr	r3, [pc, #52]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ec      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10c      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004036:	4b08      	ldr	r3, [pc, #32]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800403c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004046:	4904      	ldr	r1, [pc, #16]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800404e:	e009      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004050:	7cfb      	ldrb	r3, [r7, #19]
 8004052:	74bb      	strb	r3, [r7, #18]
 8004054:	e006      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004060:	7cfb      	ldrb	r3, [r7, #19]
 8004062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004064:	7c7b      	ldrb	r3, [r7, #17]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d105      	bne.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800406a:	4b9e      	ldr	r3, [pc, #632]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406e:	4a9d      	ldr	r2, [pc, #628]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004074:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004082:	4b98      	ldr	r3, [pc, #608]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004088:	f023 0203 	bic.w	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004090:	4994      	ldr	r1, [pc, #592]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a4:	4b8f      	ldr	r3, [pc, #572]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040aa:	f023 020c 	bic.w	r2, r3, #12
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b2:	498c      	ldr	r1, [pc, #560]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040c6:	4b87      	ldr	r3, [pc, #540]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d4:	4983      	ldr	r1, [pc, #524]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040e8:	4b7e      	ldr	r3, [pc, #504]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f6:	497b      	ldr	r1, [pc, #492]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800410a:	4b76      	ldr	r3, [pc, #472]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004110:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004118:	4972      	ldr	r1, [pc, #456]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800412c:	4b6d      	ldr	r3, [pc, #436]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004132:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800413a:	496a      	ldr	r1, [pc, #424]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800414e:	4b65      	ldr	r3, [pc, #404]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004154:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415c:	4961      	ldr	r1, [pc, #388]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415e:	4313      	orrs	r3, r2
 8004160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004170:	4b5c      	ldr	r3, [pc, #368]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004176:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417e:	4959      	ldr	r1, [pc, #356]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004180:	4313      	orrs	r3, r2
 8004182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004192:	4b54      	ldr	r3, [pc, #336]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004198:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041a0:	4950      	ldr	r1, [pc, #320]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00a      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041b4:	4b4b      	ldr	r3, [pc, #300]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c2:	4948      	ldr	r1, [pc, #288]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00a      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d6:	4b43      	ldr	r3, [pc, #268]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e4:	493f      	ldr	r1, [pc, #252]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d028      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041f8:	4b3a      	ldr	r3, [pc, #232]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004206:	4937      	ldr	r1, [pc, #220]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	4313      	orrs	r3, r2
 800420a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004216:	d106      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004218:	4b32      	ldr	r3, [pc, #200]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4a31      	ldr	r2, [pc, #196]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800421e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004222:	60d3      	str	r3, [r2, #12]
 8004224:	e011      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800422a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800422e:	d10c      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3304      	adds	r3, #4
 8004234:	2101      	movs	r1, #1
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fe36 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 800423c:	4603      	mov	r3, r0
 800423e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004240:	7cfb      	ldrb	r3, [r7, #19]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004246:	7cfb      	ldrb	r3, [r7, #19]
 8004248:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d028      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004256:	4b23      	ldr	r3, [pc, #140]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004264:	491f      	ldr	r1, [pc, #124]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004270:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004274:	d106      	bne.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004276:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	4a1a      	ldr	r2, [pc, #104]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004280:	60d3      	str	r3, [r2, #12]
 8004282:	e011      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004288:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800428c:	d10c      	bne.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3304      	adds	r3, #4
 8004292:	2101      	movs	r1, #1
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fe07 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 800429a:	4603      	mov	r3, r0
 800429c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429e:	7cfb      	ldrb	r3, [r7, #19]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80042a4:	7cfb      	ldrb	r3, [r7, #19]
 80042a6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02b      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042b4:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042c2:	4908      	ldr	r1, [pc, #32]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80042d2:	d109      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042d4:	4b03      	ldr	r3, [pc, #12]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	4a02      	ldr	r2, [pc, #8]	@ (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042de:	60d3      	str	r3, [r2, #12]
 80042e0:	e014      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80042f0:	d10c      	bne.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2101      	movs	r1, #1
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fdd5 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004302:	7cfb      	ldrb	r3, [r7, #19]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004308:	7cfb      	ldrb	r3, [r7, #19]
 800430a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d02f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004318:	4b2b      	ldr	r3, [pc, #172]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800431a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004326:	4928      	ldr	r1, [pc, #160]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004332:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004336:	d10d      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3304      	adds	r3, #4
 800433c:	2102      	movs	r1, #2
 800433e:	4618      	mov	r0, r3
 8004340:	f000 fdb2 	bl	8004ea8 <RCCEx_PLLSAI1_Config>
 8004344:	4603      	mov	r3, r0
 8004346:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004348:	7cfb      	ldrb	r3, [r7, #19]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d014      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800434e:	7cfb      	ldrb	r3, [r7, #19]
 8004350:	74bb      	strb	r3, [r7, #18]
 8004352:	e011      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004358:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800435c:	d10c      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3320      	adds	r3, #32
 8004362:	2102      	movs	r1, #2
 8004364:	4618      	mov	r0, r3
 8004366:	f000 fe93 	bl	8005090 <RCCEx_PLLSAI2_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004384:	4b10      	ldr	r3, [pc, #64]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004392:	490d      	ldr	r1, [pc, #52]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a6:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ac:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b6:	4904      	ldr	r1, [pc, #16]	@ (80043c8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043be:	7cbb      	ldrb	r3, [r7, #18]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043de:	d13e      	bne.n	800445e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80043e0:	4bb2      	ldr	r3, [pc, #712]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80043e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ea:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043f2:	d028      	beq.n	8004446 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043fa:	f200 8542 	bhi.w	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004404:	d005      	beq.n	8004412 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800440c:	d00e      	beq.n	800442c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800440e:	f000 bd38 	b.w	8004e82 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004412:	4ba6      	ldr	r3, [pc, #664]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	f040 8532 	bne.w	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8004422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004426:	61fb      	str	r3, [r7, #28]
      break;
 8004428:	f000 bd2d 	b.w	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800442c:	4b9f      	ldr	r3, [pc, #636]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800442e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	f040 8527 	bne.w	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 800443c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004440:	61fb      	str	r3, [r7, #28]
      break;
 8004442:	f000 bd22 	b.w	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004446:	4b99      	ldr	r3, [pc, #612]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800444e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004452:	f040 851c 	bne.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8004456:	4b96      	ldr	r3, [pc, #600]	@ (80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8004458:	61fb      	str	r3, [r7, #28]
      break;
 800445a:	f000 bd18 	b.w	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800445e:	4b93      	ldr	r3, [pc, #588]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d036      	beq.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	2b03      	cmp	r3, #3
 8004472:	d840      	bhi.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d003      	beq.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d020      	beq.n	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004480:	e039      	b.n	80044f6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004482:	4b8a      	ldr	r3, [pc, #552]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b02      	cmp	r3, #2
 800448c:	d116      	bne.n	80044bc <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800448e:	4b87      	ldr	r3, [pc, #540]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0308 	and.w	r3, r3, #8
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800449a:	4b84      	ldr	r3, [pc, #528]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	091b      	lsrs	r3, r3, #4
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	e005      	b.n	80044b2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80044a6:	4b81      	ldr	r3, [pc, #516]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80044a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044ac:	0a1b      	lsrs	r3, r3, #8
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	4a80      	ldr	r2, [pc, #512]	@ (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80044b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044b8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044ba:	e01f      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	61bb      	str	r3, [r7, #24]
      break;
 80044c0:	e01c      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044c2:	4b7a      	ldr	r3, [pc, #488]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044ce:	d102      	bne.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 80044d0:	4b79      	ldr	r3, [pc, #484]	@ (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80044d2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044d4:	e012      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61bb      	str	r3, [r7, #24]
      break;
 80044da:	e00f      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80044dc:	4b73      	ldr	r3, [pc, #460]	@ (80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80044e8:	d102      	bne.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 80044ea:	4b74      	ldr	r3, [pc, #464]	@ (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 80044ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 80044ee:	e005      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 80044f0:	2300      	movs	r3, #0
 80044f2:	61bb      	str	r3, [r7, #24]
      break;
 80044f4:	e002      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	61bb      	str	r3, [r7, #24]
      break;
 80044fa:	bf00      	nop
    }

    switch(PeriphClk)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004502:	f000 80dd 	beq.w	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800450c:	f200 84c1 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004516:	f000 80d3 	beq.w	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004520:	f200 84b7 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452a:	f000 835f 	beq.w	8004bec <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004534:	f200 84ad 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453e:	f000 847e 	beq.w	8004e3e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004548:	f200 84a3 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004552:	f000 82cd 	beq.w	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800455c:	f200 8499 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004566:	f000 80ab 	beq.w	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004570:	f200 848f 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800457a:	f000 8090 	beq.w	800469e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004584:	f200 8485 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800458e:	d07f      	beq.n	8004690 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004596:	f200 847c 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045a0:	f000 8403 	beq.w	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045aa:	f200 8472 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b4:	f000 83af 	beq.w	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045be:	f200 8468 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045c8:	f000 8379 	beq.w	8004cbe <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045d2:	f200 845e 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b80      	cmp	r3, #128	@ 0x80
 80045da:	f000 8344 	beq.w	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2b80      	cmp	r3, #128	@ 0x80
 80045e2:	f200 8456 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d84b      	bhi.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	f000 844f 	beq.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	2b1f      	cmp	r3, #31
 80045fa:	f200 844a 	bhi.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 80045fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004604 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004604:	080047ed 	.word	0x080047ed
 8004608:	0800485b 	.word	0x0800485b
 800460c:	08004e93 	.word	0x08004e93
 8004610:	080048ef 	.word	0x080048ef
 8004614:	08004e93 	.word	0x08004e93
 8004618:	08004e93 	.word	0x08004e93
 800461c:	08004e93 	.word	0x08004e93
 8004620:	08004975 	.word	0x08004975
 8004624:	08004e93 	.word	0x08004e93
 8004628:	08004e93 	.word	0x08004e93
 800462c:	08004e93 	.word	0x08004e93
 8004630:	08004e93 	.word	0x08004e93
 8004634:	08004e93 	.word	0x08004e93
 8004638:	08004e93 	.word	0x08004e93
 800463c:	08004e93 	.word	0x08004e93
 8004640:	080049ed 	.word	0x080049ed
 8004644:	08004e93 	.word	0x08004e93
 8004648:	08004e93 	.word	0x08004e93
 800464c:	08004e93 	.word	0x08004e93
 8004650:	08004e93 	.word	0x08004e93
 8004654:	08004e93 	.word	0x08004e93
 8004658:	08004e93 	.word	0x08004e93
 800465c:	08004e93 	.word	0x08004e93
 8004660:	08004e93 	.word	0x08004e93
 8004664:	08004e93 	.word	0x08004e93
 8004668:	08004e93 	.word	0x08004e93
 800466c:	08004e93 	.word	0x08004e93
 8004670:	08004e93 	.word	0x08004e93
 8004674:	08004e93 	.word	0x08004e93
 8004678:	08004e93 	.word	0x08004e93
 800467c:	08004e93 	.word	0x08004e93
 8004680:	08004a6f 	.word	0x08004a6f
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b40      	cmp	r3, #64	@ 0x40
 8004688:	f000 82c1 	beq.w	8004c0e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800468c:	f000 bc01 	b.w	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004690:	69b9      	ldr	r1, [r7, #24]
 8004692:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004696:	f000 fdd9 	bl	800524c <RCCEx_GetSAIxPeriphCLKFreq>
 800469a:	61f8      	str	r0, [r7, #28]
      break;
 800469c:	e3fa      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800469e:	69b9      	ldr	r1, [r7, #24]
 80046a0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80046a4:	f000 fdd2 	bl	800524c <RCCEx_GetSAIxPeriphCLKFreq>
 80046a8:	61f8      	str	r0, [r7, #28]
      break;
 80046aa:	e3f3      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80046ac:	40021000 	.word	0x40021000
 80046b0:	0003d090 	.word	0x0003d090
 80046b4:	0800b4a8 	.word	0x0800b4a8
 80046b8:	00f42400 	.word	0x00f42400
 80046bc:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80046c0:	4ba9      	ldr	r3, [pc, #676]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046d2:	d00c      	beq.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80046da:	d87f      	bhi.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80046e2:	d04e      	beq.n	8004782 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80046ea:	d01d      	beq.n	8004728 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80046ec:	e076      	b.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80046ee:	4b9e      	ldr	r3, [pc, #632]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0302 	and.w	r3, r3, #2
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d172      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80046fa:	4b9b      	ldr	r3, [pc, #620]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8004706:	4b98      	ldr	r3, [pc, #608]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	091b      	lsrs	r3, r3, #4
 800470c:	f003 030f 	and.w	r3, r3, #15
 8004710:	e005      	b.n	800471e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004712:	4b95      	ldr	r3, [pc, #596]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004714:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004718:	0a1b      	lsrs	r3, r3, #8
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	4a93      	ldr	r2, [pc, #588]	@ (800496c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004724:	61fb      	str	r3, [r7, #28]
          break;
 8004726:	e05b      	b.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004728:	4b8f      	ldr	r3, [pc, #572]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004730:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004734:	d156      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004736:	4b8c      	ldr	r3, [pc, #560]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800473e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004742:	d14f      	bne.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004744:	4b88      	ldr	r3, [pc, #544]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	0a1b      	lsrs	r3, r3, #8
 800474a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800474e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	fb03 f202 	mul.w	r2, r3, r2
 8004758:	4b83      	ldr	r3, [pc, #524]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	3301      	adds	r3, #1
 8004764:	fbb2 f3f3 	udiv	r3, r2, r3
 8004768:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800476a:	4b7f      	ldr	r3, [pc, #508]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	0d5b      	lsrs	r3, r3, #21
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	3301      	adds	r3, #1
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	fbb2 f3f3 	udiv	r3, r2, r3
 800477e:	61fb      	str	r3, [r7, #28]
          break;
 8004780:	e030      	b.n	80047e4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004782:	4b79      	ldr	r3, [pc, #484]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800478a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800478e:	d12b      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004790:	4b75      	ldr	r3, [pc, #468]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800479c:	d124      	bne.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800479e:	4b72      	ldr	r3, [pc, #456]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047a8:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	fb03 f202 	mul.w	r2, r3, r2
 80047b2:	4b6d      	ldr	r3, [pc, #436]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	091b      	lsrs	r3, r3, #4
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	3301      	adds	r3, #1
 80047be:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80047c4:	4b68      	ldr	r3, [pc, #416]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	0d5b      	lsrs	r3, r3, #21
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	3301      	adds	r3, #1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	61fb      	str	r3, [r7, #28]
          break;
 80047da:	e005      	b.n	80047e8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80047dc:	bf00      	nop
 80047de:	e359      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047e0:	bf00      	nop
 80047e2:	e357      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047e4:	bf00      	nop
 80047e6:	e355      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80047e8:	bf00      	nop
        break;
 80047ea:	e353      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80047ec:	4b5e      	ldr	r3, [pc, #376]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d827      	bhi.n	800484e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80047fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004804 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004804:	08004815 	.word	0x08004815
 8004808:	0800481d 	.word	0x0800481d
 800480c:	08004825 	.word	0x08004825
 8004810:	08004839 	.word	0x08004839
          frequency = HAL_RCC_GetPCLK2Freq();
 8004814:	f7ff fa7a 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8004818:	61f8      	str	r0, [r7, #28]
          break;
 800481a:	e01d      	b.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 800481c:	f7ff f9c8 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004820:	61f8      	str	r0, [r7, #28]
          break;
 8004822:	e019      	b.n	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004824:	4b50      	ldr	r3, [pc, #320]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004830:	d10f      	bne.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004832:	4b4f      	ldr	r3, [pc, #316]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004834:	61fb      	str	r3, [r7, #28]
          break;
 8004836:	e00c      	b.n	8004852 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004838:	4b4b      	ldr	r3, [pc, #300]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b02      	cmp	r3, #2
 8004844:	d107      	bne.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800484a:	61fb      	str	r3, [r7, #28]
          break;
 800484c:	e003      	b.n	8004856 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800484e:	bf00      	nop
 8004850:	e320      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004852:	bf00      	nop
 8004854:	e31e      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004856:	bf00      	nop
        break;
 8004858:	e31c      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800485a:	4b43      	ldr	r3, [pc, #268]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004860:	f003 030c 	and.w	r3, r3, #12
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d83a      	bhi.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800486c:	a201      	add	r2, pc, #4	@ (adr r2, 8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	080048a9 	.word	0x080048a9
 8004878:	080048e3 	.word	0x080048e3
 800487c:	080048e3 	.word	0x080048e3
 8004880:	080048e3 	.word	0x080048e3
 8004884:	080048b1 	.word	0x080048b1
 8004888:	080048e3 	.word	0x080048e3
 800488c:	080048e3 	.word	0x080048e3
 8004890:	080048e3 	.word	0x080048e3
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048e3 	.word	0x080048e3
 800489c:	080048e3 	.word	0x080048e3
 80048a0:	080048e3 	.word	0x080048e3
 80048a4:	080048cd 	.word	0x080048cd
          frequency = HAL_RCC_GetPCLK1Freq();
 80048a8:	f7ff fa1a 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80048ac:	61f8      	str	r0, [r7, #28]
          break;
 80048ae:	e01d      	b.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80048b0:	f7ff f97e 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 80048b4:	61f8      	str	r0, [r7, #28]
          break;
 80048b6:	e019      	b.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80048c4:	d10f      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80048c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80048c8:	61fb      	str	r3, [r7, #28]
          break;
 80048ca:	e00c      	b.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80048cc:	4b26      	ldr	r3, [pc, #152]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80048ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d107      	bne.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80048da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048de:	61fb      	str	r3, [r7, #28]
          break;
 80048e0:	e003      	b.n	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80048e2:	bf00      	nop
 80048e4:	e2d6      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048e6:	bf00      	nop
 80048e8:	e2d4      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80048ea:	bf00      	nop
        break;
 80048ec:	e2d2      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80048ee:	4b1e      	ldr	r3, [pc, #120]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b30      	cmp	r3, #48	@ 0x30
 80048fe:	d021      	beq.n	8004944 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b30      	cmp	r3, #48	@ 0x30
 8004904:	d829      	bhi.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b20      	cmp	r3, #32
 800490a:	d011      	beq.n	8004930 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b20      	cmp	r3, #32
 8004910:	d823      	bhi.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d003      	beq.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b10      	cmp	r3, #16
 800491c:	d004      	beq.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800491e:	e01c      	b.n	800495a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004920:	f7ff f9de 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004924:	61f8      	str	r0, [r7, #28]
          break;
 8004926:	e01d      	b.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004928:	f7ff f942 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 800492c:	61f8      	str	r0, [r7, #28]
          break;
 800492e:	e019      	b.n	8004964 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004930:	4b0d      	ldr	r3, [pc, #52]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800493c:	d10f      	bne.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800493e:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004940:	61fb      	str	r3, [r7, #28]
          break;
 8004942:	e00c      	b.n	800495e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004944:	4b08      	ldr	r3, [pc, #32]	@ (8004968 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d107      	bne.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004952:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004956:	61fb      	str	r3, [r7, #28]
          break;
 8004958:	e003      	b.n	8004962 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800495a:	bf00      	nop
 800495c:	e29a      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800495e:	bf00      	nop
 8004960:	e298      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004962:	bf00      	nop
        break;
 8004964:	e296      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	0800b4a8 	.word	0x0800b4a8
 8004970:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004974:	4b9b      	ldr	r3, [pc, #620]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	2bc0      	cmp	r3, #192	@ 0xc0
 8004984:	d021      	beq.n	80049ca <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2bc0      	cmp	r3, #192	@ 0xc0
 800498a:	d829      	bhi.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b80      	cmp	r3, #128	@ 0x80
 8004990:	d011      	beq.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	2b80      	cmp	r3, #128	@ 0x80
 8004996:	d823      	bhi.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d004      	beq.n	80049ae <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 80049a4:	e01c      	b.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 80049a6:	f7ff f99b 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80049aa:	61f8      	str	r0, [r7, #28]
          break;
 80049ac:	e01d      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 80049ae:	f7ff f8ff 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 80049b2:	61f8      	str	r0, [r7, #28]
          break;
 80049b4:	e019      	b.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049b6:	4b8b      	ldr	r3, [pc, #556]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c2:	d10f      	bne.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80049c4:	4b88      	ldr	r3, [pc, #544]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80049c6:	61fb      	str	r3, [r7, #28]
          break;
 80049c8:	e00c      	b.n	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049ca:	4b86      	ldr	r3, [pc, #536]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d107      	bne.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80049d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049dc:	61fb      	str	r3, [r7, #28]
          break;
 80049de:	e003      	b.n	80049e8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80049e0:	bf00      	nop
 80049e2:	e257      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049e4:	bf00      	nop
 80049e6:	e255      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80049e8:	bf00      	nop
        break;
 80049ea:	e253      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80049ec:	4b7d      	ldr	r3, [pc, #500]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80049ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049fe:	d025      	beq.n	8004a4c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a06:	d82c      	bhi.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a0e:	d013      	beq.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a16:	d824      	bhi.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d004      	beq.n	8004a28 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a24:	d004      	beq.n	8004a30 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004a26:	e01c      	b.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004a28:	f7ff f95a 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	61f8      	str	r0, [r7, #28]
          break;
 8004a2e:	e01d      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004a30:	f7ff f8be 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004a34:	61f8      	str	r0, [r7, #28]
          break;
 8004a36:	e019      	b.n	8004a6c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a38:	4b6a      	ldr	r3, [pc, #424]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a44:	d10f      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004a46:	4b68      	ldr	r3, [pc, #416]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004a48:	61fb      	str	r3, [r7, #28]
          break;
 8004a4a:	e00c      	b.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004a4c:	4b65      	ldr	r3, [pc, #404]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d107      	bne.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8004a5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a5e:	61fb      	str	r3, [r7, #28]
          break;
 8004a60:	e003      	b.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004a62:	bf00      	nop
 8004a64:	e216      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a66:	bf00      	nop
 8004a68:	e214      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004a6a:	bf00      	nop
        break;
 8004a6c:	e212      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a78:	613b      	str	r3, [r7, #16]
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a80:	d025      	beq.n	8004ace <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a88:	d82c      	bhi.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a90:	d013      	beq.n	8004aba <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a98:	d824      	bhi.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d004      	beq.n	8004aaa <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa6:	d004      	beq.n	8004ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004aa8:	e01c      	b.n	8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004aaa:	f7ff f919 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004aae:	61f8      	str	r0, [r7, #28]
          break;
 8004ab0:	e01d      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ab2:	f7ff f87d 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004ab6:	61f8      	str	r0, [r7, #28]
          break;
 8004ab8:	e019      	b.n	8004aee <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004aba:	4b4a      	ldr	r3, [pc, #296]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ac6:	d10f      	bne.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 8004ac8:	4b47      	ldr	r3, [pc, #284]	@ (8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004aca:	61fb      	str	r3, [r7, #28]
          break;
 8004acc:	e00c      	b.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ace:	4b45      	ldr	r3, [pc, #276]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d107      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004adc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ae0:	61fb      	str	r3, [r7, #28]
          break;
 8004ae2:	e003      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004ae4:	bf00      	nop
 8004ae6:	e1d5      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004ae8:	bf00      	nop
 8004aea:	e1d3      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004aec:	bf00      	nop
        break;
 8004aee:	e1d1      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004af0:	4b3c      	ldr	r3, [pc, #240]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004af6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b02:	d00c      	beq.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004b0a:	d864      	bhi.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b12:	d008      	beq.n	8004b26 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b1a:	d030      	beq.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004b1c:	e05b      	b.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004b1e:	f7ff f847 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004b22:	61f8      	str	r0, [r7, #28]
          break;
 8004b24:	e05c      	b.n	8004be0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004b26:	4b2f      	ldr	r3, [pc, #188]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b32:	d152      	bne.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004b34:	4b2b      	ldr	r3, [pc, #172]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d04c      	beq.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004b40:	4b28      	ldr	r3, [pc, #160]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	0a1b      	lsrs	r3, r3, #8
 8004b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b4a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	fb03 f202 	mul.w	r2, r3, r2
 8004b54:	4b23      	ldr	r3, [pc, #140]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 0307 	and.w	r3, r3, #7
 8004b5e:	3301      	adds	r3, #1
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004b66:	4b1f      	ldr	r3, [pc, #124]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	0e5b      	lsrs	r3, r3, #25
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	3301      	adds	r3, #1
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	69ba      	ldr	r2, [r7, #24]
 8004b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b7a:	61fb      	str	r3, [r7, #28]
          break;
 8004b7c:	e02d      	b.n	8004bda <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8004b7e:	4b19      	ldr	r3, [pc, #100]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b8a:	d128      	bne.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004b8c:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d022      	beq.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004b9a:	695b      	ldr	r3, [r3, #20]
 8004b9c:	0a1b      	lsrs	r3, r3, #8
 8004b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ba2:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004ba4:	69bb      	ldr	r3, [r7, #24]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	fb03 f202 	mul.w	r2, r3, r2
 8004bac:	4b0d      	ldr	r3, [pc, #52]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 0307 	and.w	r3, r3, #7
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bbc:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004bbe:	4b09      	ldr	r3, [pc, #36]	@ (8004be4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	0e5b      	lsrs	r3, r3, #25
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	3301      	adds	r3, #1
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	69ba      	ldr	r2, [r7, #24]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	61fb      	str	r3, [r7, #28]
          break;
 8004bd4:	e003      	b.n	8004bde <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 8004bd6:	bf00      	nop
 8004bd8:	e15c      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bda:	bf00      	nop
 8004bdc:	e15a      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004bde:	bf00      	nop
        break;
 8004be0:	e158      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004bec:	4b9d      	ldr	r3, [pc, #628]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bf6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d103      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004bfe:	f7ff f885 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8004c02:	61f8      	str	r0, [r7, #28]
        break;
 8004c04:	e146      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c06:	f7fe ffd3 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004c0a:	61f8      	str	r0, [r7, #28]
        break;
 8004c0c:	e142      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004c0e:	4b95      	ldr	r3, [pc, #596]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c14:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004c18:	613b      	str	r3, [r7, #16]
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c20:	d013      	beq.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c28:	d819      	bhi.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c36:	d004      	beq.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004c38:	e011      	b.n	8004c5e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c3a:	f7ff f851 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004c3e:	61f8      	str	r0, [r7, #28]
          break;
 8004c40:	e010      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c42:	f7fe ffb5 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004c46:	61f8      	str	r0, [r7, #28]
          break;
 8004c48:	e00c      	b.n	8004c64 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c4a:	4b86      	ldr	r3, [pc, #536]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c56:	d104      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004c58:	4b83      	ldr	r3, [pc, #524]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004c5a:	61fb      	str	r3, [r7, #28]
          break;
 8004c5c:	e001      	b.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 8004c5e:	bf00      	nop
 8004c60:	e118      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004c62:	bf00      	nop
        break;
 8004c64:	e116      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004c66:	4b7f      	ldr	r3, [pc, #508]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004c70:	613b      	str	r3, [r7, #16]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c78:	d013      	beq.n	8004ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c80:	d819      	bhi.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c8e:	d004      	beq.n	8004c9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004c90:	e011      	b.n	8004cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004c92:	f7ff f825 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004c96:	61f8      	str	r0, [r7, #28]
          break;
 8004c98:	e010      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004c9a:	f7fe ff89 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004c9e:	61f8      	str	r0, [r7, #28]
          break;
 8004ca0:	e00c      	b.n	8004cbc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ca2:	4b70      	ldr	r3, [pc, #448]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004caa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cae:	d104      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004cb0:	4b6d      	ldr	r3, [pc, #436]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004cb2:	61fb      	str	r3, [r7, #28]
          break;
 8004cb4:	e001      	b.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 8004cb6:	bf00      	nop
 8004cb8:	e0ec      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004cba:	bf00      	nop
        break;
 8004cbc:	e0ea      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004cbe:	4b69      	ldr	r3, [pc, #420]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cd0:	d013      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cd8:	d819      	bhi.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d004      	beq.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ce6:	d004      	beq.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 8004ce8:	e011      	b.n	8004d0e <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004cea:	f7fe fff9 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004cee:	61f8      	str	r0, [r7, #28]
          break;
 8004cf0:	e010      	b.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004cf2:	f7fe ff5d 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004cf6:	61f8      	str	r0, [r7, #28]
          break;
 8004cf8:	e00c      	b.n	8004d14 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cfa:	4b5a      	ldr	r3, [pc, #360]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d06:	d104      	bne.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 8004d08:	4b57      	ldr	r3, [pc, #348]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004d0a:	61fb      	str	r3, [r7, #28]
          break;
 8004d0c:	e001      	b.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004d0e:	bf00      	nop
 8004d10:	e0c0      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d12:	bf00      	nop
        break;
 8004d14:	e0be      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004d16:	4b53      	ldr	r3, [pc, #332]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d1c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004d20:	613b      	str	r3, [r7, #16]
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d28:	d02c      	beq.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d30:	d833      	bhi.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d38:	d01a      	beq.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d40:	d82b      	bhi.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d004      	beq.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d4e:	d004      	beq.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004d50:	e023      	b.n	8004d9a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004d52:	f7fe ffc5 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004d56:	61f8      	str	r0, [r7, #28]
          break;
 8004d58:	e026      	b.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004d5a:	4b42      	ldr	r3, [pc, #264]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d11a      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004d68:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004d6c:	61fb      	str	r3, [r7, #28]
          break;
 8004d6e:	e016      	b.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d70:	4b3c      	ldr	r3, [pc, #240]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d7c:	d111      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 8004d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004d80:	61fb      	str	r3, [r7, #28]
          break;
 8004d82:	e00e      	b.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004d84:	4b37      	ldr	r3, [pc, #220]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d109      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d96:	61fb      	str	r3, [r7, #28]
          break;
 8004d98:	e005      	b.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 8004d9a:	bf00      	nop
 8004d9c:	e07a      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004d9e:	bf00      	nop
 8004da0:	e078      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004da2:	bf00      	nop
 8004da4:	e076      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004da6:	bf00      	nop
        break;
 8004da8:	e074      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004daa:	4b2e      	ldr	r3, [pc, #184]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004db0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dbc:	d02c      	beq.n	8004e18 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dc4:	d833      	bhi.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dcc:	d01a      	beq.n	8004e04 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dd4:	d82b      	bhi.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d004      	beq.n	8004de6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004de2:	d004      	beq.n	8004dee <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004de4:	e023      	b.n	8004e2e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004de6:	f7fe ff7b 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004dea:	61f8      	str	r0, [r7, #28]
          break;
 8004dec:	e026      	b.n	8004e3c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004dee:	4b1d      	ldr	r3, [pc, #116]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d11a      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004dfc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004e00:	61fb      	str	r3, [r7, #28]
          break;
 8004e02:	e016      	b.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e04:	4b17      	ldr	r3, [pc, #92]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e10:	d111      	bne.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004e12:	4b15      	ldr	r3, [pc, #84]	@ (8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004e14:	61fb      	str	r3, [r7, #28]
          break;
 8004e16:	e00e      	b.n	8004e36 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e18:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d109      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e2a:	61fb      	str	r3, [r7, #28]
          break;
 8004e2c:	e005      	b.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 8004e2e:	bf00      	nop
 8004e30:	e030      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e32:	bf00      	nop
 8004e34:	e02e      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e36:	bf00      	nop
 8004e38:	e02c      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004e3a:	bf00      	nop
        break;
 8004e3c:	e02a      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 8004e3e:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e44:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e48:	613b      	str	r3, [r7, #16]
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d004      	beq.n	8004e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e56:	d009      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004e58:	e012      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e5a:	f7fe ff41 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004e5e:	61f8      	str	r0, [r7, #28]
          break;
 8004e60:	e00e      	b.n	8004e80 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000
 8004e68:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e78:	d101      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004e7c:	61fb      	str	r3, [r7, #28]
          break;
 8004e7e:	bf00      	nop
        break;
 8004e80:	e008      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e82:	bf00      	nop
 8004e84:	e006      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e86:	bf00      	nop
 8004e88:	e004      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e002      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e000      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004e92:	bf00      	nop
    }
  }

  return(frequency);
 8004e94:	69fb      	ldr	r3, [r7, #28]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40021000 	.word	0x40021000
 8004ea4:	00f42400 	.word	0x00f42400

08004ea8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eb6:	4b75      	ldr	r3, [pc, #468]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d018      	beq.n	8004ef4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ec2:	4b72      	ldr	r3, [pc, #456]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f003 0203 	and.w	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d10d      	bne.n	8004eee <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d009      	beq.n	8004eee <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004eda:	4b6c      	ldr	r3, [pc, #432]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004edc:	68db      	ldr	r3, [r3, #12]
 8004ede:	091b      	lsrs	r3, r3, #4
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	1c5a      	adds	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
       ||
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d047      	beq.n	8004f7e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	e044      	b.n	8004f7e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d018      	beq.n	8004f2e <RCCEx_PLLSAI1_Config+0x86>
 8004efc:	2b03      	cmp	r3, #3
 8004efe:	d825      	bhi.n	8004f4c <RCCEx_PLLSAI1_Config+0xa4>
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d002      	beq.n	8004f0a <RCCEx_PLLSAI1_Config+0x62>
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d009      	beq.n	8004f1c <RCCEx_PLLSAI1_Config+0x74>
 8004f08:	e020      	b.n	8004f4c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f0a:	4b60      	ldr	r3, [pc, #384]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d11d      	bne.n	8004f52 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1a:	e01a      	b.n	8004f52 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f1c:	4b5b      	ldr	r3, [pc, #364]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f2c:	e013      	b.n	8004f56 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f2e:	4b57      	ldr	r3, [pc, #348]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10f      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f3a:	4b54      	ldr	r3, [pc, #336]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d109      	bne.n	8004f5a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f4a:	e006      	b.n	8004f5a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f50:	e004      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f52:	bf00      	nop
 8004f54:	e002      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f56:	bf00      	nop
 8004f58:	e000      	b.n	8004f5c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f5a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f5c:	7bfb      	ldrb	r3, [r7, #15]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10d      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f62:	4b4a      	ldr	r3, [pc, #296]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6819      	ldr	r1, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	430b      	orrs	r3, r1
 8004f78:	4944      	ldr	r1, [pc, #272]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d17d      	bne.n	8005080 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f84:	4b41      	ldr	r3, [pc, #260]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a40      	ldr	r2, [pc, #256]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f90:	f7fc fdc0 	bl	8001b14 <HAL_GetTick>
 8004f94:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f96:	e009      	b.n	8004fac <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f98:	f7fc fdbc 	bl	8001b14 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d902      	bls.n	8004fac <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	73fb      	strb	r3, [r7, #15]
        break;
 8004faa:	e005      	b.n	8004fb8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fac:	4b37      	ldr	r3, [pc, #220]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1ef      	bne.n	8004f98 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d160      	bne.n	8005080 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d111      	bne.n	8004fe8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc4:	4b31      	ldr	r3, [pc, #196]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6892      	ldr	r2, [r2, #8]
 8004fd4:	0211      	lsls	r1, r2, #8
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	68d2      	ldr	r2, [r2, #12]
 8004fda:	0912      	lsrs	r2, r2, #4
 8004fdc:	0452      	lsls	r2, r2, #17
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	492a      	ldr	r1, [pc, #168]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	610b      	str	r3, [r1, #16]
 8004fe6:	e027      	b.n	8005038 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d112      	bne.n	8005014 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fee:	4b27      	ldr	r3, [pc, #156]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004ff6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6892      	ldr	r2, [r2, #8]
 8004ffe:	0211      	lsls	r1, r2, #8
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6912      	ldr	r2, [r2, #16]
 8005004:	0852      	lsrs	r2, r2, #1
 8005006:	3a01      	subs	r2, #1
 8005008:	0552      	lsls	r2, r2, #21
 800500a:	430a      	orrs	r2, r1
 800500c:	491f      	ldr	r1, [pc, #124]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 800500e:	4313      	orrs	r3, r2
 8005010:	610b      	str	r3, [r1, #16]
 8005012:	e011      	b.n	8005038 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005014:	4b1d      	ldr	r3, [pc, #116]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800501c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6892      	ldr	r2, [r2, #8]
 8005024:	0211      	lsls	r1, r2, #8
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6952      	ldr	r2, [r2, #20]
 800502a:	0852      	lsrs	r2, r2, #1
 800502c:	3a01      	subs	r2, #1
 800502e:	0652      	lsls	r2, r2, #25
 8005030:	430a      	orrs	r2, r1
 8005032:	4916      	ldr	r1, [pc, #88]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005038:	4b14      	ldr	r3, [pc, #80]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a13      	ldr	r2, [pc, #76]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 800503e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005042:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fc fd66 	bl	8001b14 <HAL_GetTick>
 8005048:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800504a:	e009      	b.n	8005060 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800504c:	f7fc fd62 	bl	8001b14 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d902      	bls.n	8005060 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	73fb      	strb	r3, [r7, #15]
          break;
 800505e:	e005      	b.n	800506c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005060:	4b0a      	ldr	r3, [pc, #40]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ef      	beq.n	800504c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800506c:	7bfb      	ldrb	r3, [r7, #15]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d106      	bne.n	8005080 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005072:	4b06      	ldr	r3, [pc, #24]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005074:	691a      	ldr	r2, [r3, #16]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	4904      	ldr	r1, [pc, #16]	@ (800508c <RCCEx_PLLSAI1_Config+0x1e4>)
 800507c:	4313      	orrs	r3, r2
 800507e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005080:	7bfb      	ldrb	r3, [r7, #15]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40021000 	.word	0x40021000

08005090 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800509a:	2300      	movs	r3, #0
 800509c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800509e:	4b6a      	ldr	r3, [pc, #424]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d018      	beq.n	80050dc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80050aa:	4b67      	ldr	r3, [pc, #412]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f003 0203 	and.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d10d      	bne.n	80050d6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
       ||
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80050c2:	4b61      	ldr	r3, [pc, #388]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	091b      	lsrs	r3, r3, #4
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
       ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d047      	beq.n	8005166 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	73fb      	strb	r3, [r7, #15]
 80050da:	e044      	b.n	8005166 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d018      	beq.n	8005116 <RCCEx_PLLSAI2_Config+0x86>
 80050e4:	2b03      	cmp	r3, #3
 80050e6:	d825      	bhi.n	8005134 <RCCEx_PLLSAI2_Config+0xa4>
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d002      	beq.n	80050f2 <RCCEx_PLLSAI2_Config+0x62>
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d009      	beq.n	8005104 <RCCEx_PLLSAI2_Config+0x74>
 80050f0:	e020      	b.n	8005134 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050f2:	4b55      	ldr	r3, [pc, #340]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d11d      	bne.n	800513a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005102:	e01a      	b.n	800513a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005104:	4b50      	ldr	r3, [pc, #320]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800510c:	2b00      	cmp	r3, #0
 800510e:	d116      	bne.n	800513e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005114:	e013      	b.n	800513e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005116:	4b4c      	ldr	r3, [pc, #304]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10f      	bne.n	8005142 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005122:	4b49      	ldr	r3, [pc, #292]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d109      	bne.n	8005142 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005132:	e006      	b.n	8005142 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      break;
 8005138:	e004      	b.n	8005144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800513a:	bf00      	nop
 800513c:	e002      	b.n	8005144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005142:	bf00      	nop
    }

    if(status == HAL_OK)
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10d      	bne.n	8005166 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800514a:	4b3f      	ldr	r3, [pc, #252]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6819      	ldr	r1, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	3b01      	subs	r3, #1
 800515c:	011b      	lsls	r3, r3, #4
 800515e:	430b      	orrs	r3, r1
 8005160:	4939      	ldr	r1, [pc, #228]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005162:	4313      	orrs	r3, r2
 8005164:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005166:	7bfb      	ldrb	r3, [r7, #15]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d167      	bne.n	800523c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800516c:	4b36      	ldr	r3, [pc, #216]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a35      	ldr	r2, [pc, #212]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005178:	f7fc fccc 	bl	8001b14 <HAL_GetTick>
 800517c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800517e:	e009      	b.n	8005194 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005180:	f7fc fcc8 	bl	8001b14 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d902      	bls.n	8005194 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	73fb      	strb	r3, [r7, #15]
        break;
 8005192:	e005      	b.n	80051a0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005194:	4b2c      	ldr	r3, [pc, #176]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d1ef      	bne.n	8005180 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80051a0:	7bfb      	ldrb	r3, [r7, #15]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d14a      	bne.n	800523c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d111      	bne.n	80051d0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051ac:	4b26      	ldr	r3, [pc, #152]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ae:	695b      	ldr	r3, [r3, #20]
 80051b0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80051b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6892      	ldr	r2, [r2, #8]
 80051bc:	0211      	lsls	r1, r2, #8
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68d2      	ldr	r2, [r2, #12]
 80051c2:	0912      	lsrs	r2, r2, #4
 80051c4:	0452      	lsls	r2, r2, #17
 80051c6:	430a      	orrs	r2, r1
 80051c8:	491f      	ldr	r1, [pc, #124]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	614b      	str	r3, [r1, #20]
 80051ce:	e011      	b.n	80051f4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80051d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80051d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6892      	ldr	r2, [r2, #8]
 80051e0:	0211      	lsls	r1, r2, #8
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6912      	ldr	r2, [r2, #16]
 80051e6:	0852      	lsrs	r2, r2, #1
 80051e8:	3a01      	subs	r2, #1
 80051ea:	0652      	lsls	r2, r2, #25
 80051ec:	430a      	orrs	r2, r1
 80051ee:	4916      	ldr	r1, [pc, #88]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051f4:	4b14      	ldr	r3, [pc, #80]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a13      	ldr	r2, [pc, #76]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fc fc88 	bl	8001b14 <HAL_GetTick>
 8005204:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005206:	e009      	b.n	800521c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005208:	f7fc fc84 	bl	8001b14 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d902      	bls.n	800521c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	73fb      	strb	r3, [r7, #15]
          break;
 800521a:	e005      	b.n	8005228 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800521c:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d0ef      	beq.n	8005208 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d106      	bne.n	800523c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800522e:	4b06      	ldr	r3, [pc, #24]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005230:	695a      	ldr	r2, [r3, #20]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	4904      	ldr	r1, [pc, #16]	@ (8005248 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005238:	4313      	orrs	r3, r2
 800523a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000

0800524c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 800524c:	b480      	push	{r7}
 800524e:	b089      	sub	sp, #36	@ 0x24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005256:	2300      	movs	r3, #0
 8005258:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005268:	d10c      	bne.n	8005284 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800526a:	4b6e      	ldr	r3, [pc, #440]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005270:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8005274:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800527c:	d112      	bne.n	80052a4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800527e:	4b6a      	ldr	r3, [pc, #424]	@ (8005428 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8005280:	61fb      	str	r3, [r7, #28]
 8005282:	e00f      	b.n	80052a4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800528a:	d10b      	bne.n	80052a4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800528c:	4b65      	ldr	r3, [pc, #404]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005292:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8005296:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800529e:	d101      	bne.n	80052a4 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80052a0:	4b61      	ldr	r3, [pc, #388]	@ (8005428 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80052a2:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 80b4 	bne.w	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80052b6:	d003      	beq.n	80052c0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052be:	d135      	bne.n	800532c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80052c0:	4b58      	ldr	r3, [pc, #352]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052cc:	f040 80a1 	bne.w	8005412 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 80052d0:	4b54      	ldr	r3, [pc, #336]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 809a 	beq.w	8005412 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80052de:	4b51      	ldr	r3, [pc, #324]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	091b      	lsrs	r3, r3, #4
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	3301      	adds	r3, #1
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80052f2:	4b4c      	ldr	r3, [pc, #304]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	0a1b      	lsrs	r3, r3, #8
 80052f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052fc:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005304:	4b47      	ldr	r3, [pc, #284]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d002      	beq.n	8005316 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8005310:	2311      	movs	r3, #17
 8005312:	617b      	str	r3, [r7, #20]
 8005314:	e001      	b.n	800531a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8005316:	2307      	movs	r3, #7
 8005318:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	fb03 f202 	mul.w	r2, r3, r2
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800532a:	e072      	b.n	8005412 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d133      	bne.n	800539a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8005332:	4b3c      	ldr	r3, [pc, #240]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800533a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800533e:	d169      	bne.n	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005340:	4b38      	ldr	r3, [pc, #224]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d063      	beq.n	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800534c:	4b35      	ldr	r3, [pc, #212]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 0307 	and.w	r3, r3, #7
 8005356:	3301      	adds	r3, #1
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	fbb2 f3f3 	udiv	r3, r2, r3
 800535e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005360:	4b30      	ldr	r3, [pc, #192]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	0a1b      	lsrs	r3, r3, #8
 8005366:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800536a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005372:	4b2c      	ldr	r3, [pc, #176]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800537e:	2311      	movs	r3, #17
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e001      	b.n	8005388 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005384:	2307      	movs	r3, #7
 8005386:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	fb03 f202 	mul.w	r2, r3, r2
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	fbb2 f3f3 	udiv	r3, r2, r3
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	e03c      	b.n	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053a0:	d003      	beq.n	80053aa <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053a8:	d134      	bne.n	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80053aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053b6:	d12d      	bne.n	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80053b8:	4b1a      	ldr	r3, [pc, #104]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d027      	beq.n	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80053c4:	4b17      	ldr	r3, [pc, #92]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	3301      	adds	r3, #1
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80053d8:	4b12      	ldr	r3, [pc, #72]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	0a1b      	lsrs	r3, r3, #8
 80053de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053e2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80053ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005424 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80053f6:	2311      	movs	r3, #17
 80053f8:	617b      	str	r3, [r7, #20]
 80053fa:	e001      	b.n	8005400 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80053fc:	2307      	movs	r3, #7
 80053fe:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	fb03 f202 	mul.w	r2, r3, r2
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	e000      	b.n	8005414 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8005412:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8005414:	69fb      	ldr	r3, [r7, #28]
}
 8005416:	4618      	mov	r0, r3
 8005418:	3724      	adds	r7, #36	@ 0x24
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40021000 	.word	0x40021000
 8005428:	001fff68 	.word	0x001fff68

0800542c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d904      	bls.n	800544a <HAL_SAI_InitProtocol+0x1e>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	3b03      	subs	r3, #3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d812      	bhi.n	800546e <HAL_SAI_InitProtocol+0x42>
 8005448:	e008      	b.n	800545c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	68b9      	ldr	r1, [r7, #8]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 fba3 	bl	8005b9c <SAI_InitI2S>
 8005456:	4603      	mov	r3, r0
 8005458:	75fb      	strb	r3, [r7, #23]
      break;
 800545a:	e00b      	b.n	8005474 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 fc4c 	bl	8005d00 <SAI_InitPCM>
 8005468:	4603      	mov	r3, r0
 800546a:	75fb      	strb	r3, [r7, #23]
      break;
 800546c:	e002      	b.n	8005474 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	75fb      	strb	r3, [r7, #23]
      break;
 8005472:	bf00      	nop
  }

  if (status == HAL_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d104      	bne.n	8005484 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f808 	bl	8005490 <HAL_SAI_Init>
 8005480:	4603      	mov	r3, r0
 8005482:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
	...

08005490 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b088      	sub	sp, #32
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e155      	b.n	800574e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d106      	bne.n	80054bc <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f7fb fc32 	bl	8000d20 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 fca1 	bl	8005e04 <SAI_Disable>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e140      	b.n	800574e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d00c      	beq.n	80054f6 <HAL_SAI_Init+0x66>
 80054dc:	2b02      	cmp	r3, #2
 80054de:	d80d      	bhi.n	80054fc <HAL_SAI_Init+0x6c>
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_SAI_Init+0x5a>
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d003      	beq.n	80054f0 <HAL_SAI_Init+0x60>
 80054e8:	e008      	b.n	80054fc <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80054ea:	2300      	movs	r3, #0
 80054ec:	61fb      	str	r3, [r7, #28]
      break;
 80054ee:	e008      	b.n	8005502 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80054f0:	2310      	movs	r3, #16
 80054f2:	61fb      	str	r3, [r7, #28]
      break;
 80054f4:	e005      	b.n	8005502 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80054f6:	2320      	movs	r3, #32
 80054f8:	61fb      	str	r3, [r7, #28]
      break;
 80054fa:	e002      	b.n	8005502 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61fb      	str	r3, [r7, #28]
      break;
 8005500:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	2b03      	cmp	r3, #3
 8005508:	d81d      	bhi.n	8005546 <HAL_SAI_Init+0xb6>
 800550a:	a201      	add	r2, pc, #4	@ (adr r2, 8005510 <HAL_SAI_Init+0x80>)
 800550c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005510:	08005521 	.word	0x08005521
 8005514:	08005527 	.word	0x08005527
 8005518:	0800552f 	.word	0x0800552f
 800551c:	08005537 	.word	0x08005537
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005520:	2300      	movs	r3, #0
 8005522:	617b      	str	r3, [r7, #20]
      break;
 8005524:	e012      	b.n	800554c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800552a:	617b      	str	r3, [r7, #20]
      break;
 800552c:	e00e      	b.n	800554c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800552e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005532:	617b      	str	r3, [r7, #20]
      break;
 8005534:	e00a      	b.n	800554c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005536:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800553a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	61fb      	str	r3, [r7, #28]
      break;
 8005544:	e002      	b.n	800554c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
      break;
 800554a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a81      	ldr	r2, [pc, #516]	@ (8005758 <HAL_SAI_Init+0x2c8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_SAI_Init+0xd0>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a80      	ldr	r2, [pc, #512]	@ (800575c <HAL_SAI_Init+0x2cc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d103      	bne.n	8005568 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005560:	4a7f      	ldr	r2, [pc, #508]	@ (8005760 <HAL_SAI_Init+0x2d0>)
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e002      	b.n	800556e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005568:	4a7e      	ldr	r2, [pc, #504]	@ (8005764 <HAL_SAI_Init+0x2d4>)
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d041      	beq.n	80055fa <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a77      	ldr	r2, [pc, #476]	@ (8005758 <HAL_SAI_Init+0x2c8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d004      	beq.n	800558a <HAL_SAI_Init+0xfa>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a75      	ldr	r2, [pc, #468]	@ (800575c <HAL_SAI_Init+0x2cc>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d105      	bne.n	8005596 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800558a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800558e:	f7fe ff1d 	bl	80043cc <HAL_RCCEx_GetPeriphCLKFreq>
 8005592:	6138      	str	r0, [r7, #16]
 8005594:	e004      	b.n	80055a0 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005596:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800559a:	f7fe ff17 	bl	80043cc <HAL_RCCEx_GetPeriphCLKFreq>
 800559e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4613      	mov	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	461a      	mov	r2, r3
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	69db      	ldr	r3, [r3, #28]
 80055b0:	025b      	lsls	r3, r3, #9
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005768 <HAL_SAI_Init+0x2d8>)
 80055bc:	fba2 2303 	umull	r2, r3, r2, r3
 80055c0:	08da      	lsrs	r2, r3, #3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80055c6:	68f9      	ldr	r1, [r7, #12]
 80055c8:	4b67      	ldr	r3, [pc, #412]	@ (8005768 <HAL_SAI_Init+0x2d8>)
 80055ca:	fba3 2301 	umull	r2, r3, r3, r1
 80055ce:	08da      	lsrs	r2, r3, #3
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	005b      	lsls	r3, r3, #1
 80055d8:	1aca      	subs	r2, r1, r3
 80055da:	2a08      	cmp	r2, #8
 80055dc:	d904      	bls.n	80055e8 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	1c5a      	adds	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d104      	bne.n	80055fa <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	085a      	lsrs	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_SAI_Init+0x17a>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b02      	cmp	r3, #2
 8005608:	d109      	bne.n	800561e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800560e:	2b01      	cmp	r3, #1
 8005610:	d101      	bne.n	8005616 <HAL_SAI_Init+0x186>
 8005612:	2300      	movs	r3, #0
 8005614:	e001      	b.n	800561a <HAL_SAI_Init+0x18a>
 8005616:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	e008      	b.n	8005630 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d102      	bne.n	800562c <HAL_SAI_Init+0x19c>
 8005626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800562a:	e000      	b.n	800562e <HAL_SAI_Init+0x19e>
 800562c:	2300      	movs	r3, #0
 800562e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	4b4c      	ldr	r3, [pc, #304]	@ (800576c <HAL_SAI_Init+0x2dc>)
 800563c:	400b      	ands	r3, r1
 800563e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800564e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005654:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565a:	431a      	orrs	r2, r3
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005668:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005674:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	051b      	lsls	r3, r3, #20
 800567c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	6812      	ldr	r2, [r2, #0]
 8005690:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005694:	f023 030f 	bic.w	r3, r3, #15
 8005698:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6859      	ldr	r1, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	699a      	ldr	r2, [r3, #24]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ae:	431a      	orrs	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	430a      	orrs	r2, r1
 80056b6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6899      	ldr	r1, [r3, #8]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b2b      	ldr	r3, [pc, #172]	@ (8005770 <HAL_SAI_Init+0x2e0>)
 80056c4:	400b      	ands	r3, r1
 80056c6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6899      	ldr	r1, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056d8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80056de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80056e4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	3b01      	subs	r3, #1
 80056ec:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80056ee:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68d9      	ldr	r1, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8005706:	400b      	ands	r3, r1
 8005708:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	68d9      	ldr	r1, [r3, #12]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005718:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800571e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005720:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005726:	3b01      	subs	r3, #1
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40015404 	.word	0x40015404
 800575c:	40015424 	.word	0x40015424
 8005760:	40015400 	.word	0x40015400
 8005764:	40015800 	.word	0x40015800
 8005768:	cccccccd 	.word	0xcccccccd
 800576c:	ff05c010 	.word	0xff05c010
 8005770:	fff88000 	.word	0xfff88000

08005774 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800577c:	2300      	movs	r3, #0
 800577e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d101      	bne.n	800578e <HAL_SAI_Abort+0x1a>
 800578a:	2302      	movs	r3, #2
 800578c:	e053      	b.n	8005836 <HAL_SAI_Abort+0xc2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fb34 	bl	8005e04 <SAI_Disable>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d001      	beq.n	80057a6 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057b4:	d125      	bne.n	8005802 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80057c4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	2b12      	cmp	r3, #18
 80057d0:	d108      	bne.n	80057e4 <HAL_SAI_Abort+0x70>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d004      	beq.n	80057e4 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057de:	4618      	mov	r0, r3
 80057e0:	f7fc fb92 	bl	8001f08 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b22      	cmp	r3, #34	@ 0x22
 80057ee:	d108      	bne.n	8005802 <HAL_SAI_Abort+0x8e>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d004      	beq.n	8005802 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7fc fb83 	bl	8001f08 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f04f 32ff 	mov.w	r2, #4294967295
 8005812:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0208 	orr.w	r2, r2, #8
 8005822:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
	...

08005840 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8192 	beq.w	8005b7a <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <HAL_SAI_IRQHandler+0x4c>
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f003 0308 	and.w	r3, r3, #8
 800587e:	2b00      	cmp	r3, #0
 8005880:	d004      	beq.n	800588c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	4798      	blx	r3
 800588a:	e176      	b.n	8005b7a <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f003 0301 	and.w	r3, r3, #1
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01e      	beq.n	80058d4 <HAL_SAI_IRQHandler+0x94>
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d019      	beq.n	80058d4 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2201      	movs	r2, #1
 80058a6:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b22      	cmp	r3, #34	@ 0x22
 80058b2:	d101      	bne.n	80058b8 <HAL_SAI_IRQHandler+0x78>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e000      	b.n	80058ba <HAL_SAI_IRQHandler+0x7a>
 80058b8:	2302      	movs	r3, #2
 80058ba:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f95b 	bl	8005b88 <HAL_SAI_ErrorCallback>
 80058d2:	e152      	b.n	8005b7a <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d011      	beq.n	8005902 <HAL_SAI_IRQHandler+0xc2>
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00c      	beq.n	8005902 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2202      	movs	r2, #2
 80058ee:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	f000 8140 	beq.w	8005b7a <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058fe:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005900:	e13b      	b.n	8005b7a <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f003 0320 	and.w	r3, r3, #32
 8005908:	2b00      	cmp	r3, #0
 800590a:	d055      	beq.n	80059b8 <HAL_SAI_IRQHandler+0x178>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f003 0320 	and.w	r3, r3, #32
 8005912:	2b00      	cmp	r3, #0
 8005914:	d050      	beq.n	80059b8 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2220      	movs	r2, #32
 800591c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005924:	f043 0204 	orr.w	r2, r3, #4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d038      	beq.n	80059aa <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800593c:	2b00      	cmp	r3, #0
 800593e:	d016      	beq.n	800596e <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005944:	4a8f      	ldr	r2, [pc, #572]	@ (8005b84 <HAL_SAI_IRQHandler+0x344>)
 8005946:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800594c:	4618      	mov	r0, r3
 800594e:	f7fc fb19 	bl	8001f84 <HAL_DMA_Abort_IT>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00a      	beq.n	800596e <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800595e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f90d 	bl	8005b88 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80fc 	beq.w	8005b70 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800597c:	4a81      	ldr	r2, [pc, #516]	@ (8005b84 <HAL_SAI_IRQHandler+0x344>)
 800597e:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005984:	4618      	mov	r0, r3
 8005986:	f7fc fafd 	bl	8001f84 <HAL_DMA_Abort_IT>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 80ef 	beq.w	8005b70 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005998:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f8f0 	bl	8005b88 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059a8:	e0e2      	b.n	8005b70 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7ff fee2 	bl	8005774 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f8e9 	bl	8005b88 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059b6:	e0db      	b.n	8005b70 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d055      	beq.n	8005a6e <HAL_SAI_IRQHandler+0x22e>
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d050      	beq.n	8005a6e <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2240      	movs	r2, #64	@ 0x40
 80059d2:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059da:	f043 0208 	orr.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d038      	beq.n	8005a60 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d016      	beq.n	8005a24 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059fa:	4a62      	ldr	r2, [pc, #392]	@ (8005b84 <HAL_SAI_IRQHandler+0x344>)
 80059fc:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7fc fabe 	bl	8001f84 <HAL_DMA_Abort_IT>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00a      	beq.n	8005a24 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8b2 	bl	8005b88 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f000 80a3 	beq.w	8005b74 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a32:	4a54      	ldr	r2, [pc, #336]	@ (8005b84 <HAL_SAI_IRQHandler+0x344>)
 8005a34:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fc faa2 	bl	8001f84 <HAL_DMA_Abort_IT>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8096 	beq.w	8005b74 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a4e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f895 	bl	8005b88 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a5e:	e089      	b.n	8005b74 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f7ff fe87 	bl	8005774 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f88e 	bl	8005b88 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a6c:	e082      	b.n	8005b74 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d061      	beq.n	8005b3c <HAL_SAI_IRQHandler+0x2fc>
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f003 0304 	and.w	r3, r3, #4
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d05c      	beq.n	8005b3c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2204      	movs	r2, #4
 8005a88:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a90:	f043 0220 	orr.w	r2, r3, #32
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d036      	beq.n	8005b12 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d016      	beq.n	8005ada <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ab0:	4a34      	ldr	r2, [pc, #208]	@ (8005b84 <HAL_SAI_IRQHandler+0x344>)
 8005ab2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fc fa63 	bl	8001f84 <HAL_DMA_Abort_IT>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f857 	bl	8005b88 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d04a      	beq.n	8005b78 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae6:	4a27      	ldr	r2, [pc, #156]	@ (8005b84 <HAL_SAI_IRQHandler+0x344>)
 8005ae8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fc fa48 	bl	8001f84 <HAL_DMA_Abort_IT>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d03e      	beq.n	8005b78 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b00:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f83c 	bl	8005b88 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b10:	e032      	b.n	8005b78 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2200      	movs	r2, #0
 8005b18:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005b22:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f827 	bl	8005b88 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b3a:	e01d      	b.n	8005b78 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d019      	beq.n	8005b7a <HAL_SAI_IRQHandler+0x33a>
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d014      	beq.n	8005b7a <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2210      	movs	r2, #16
 8005b56:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5e:	f043 0210 	orr.w	r2, r3, #16
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f80d 	bl	8005b88 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8005b6e:	e004      	b.n	8005b7a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b70:	bf00      	nop
 8005b72:	e002      	b.n	8005b7a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b74:	bf00      	nop
 8005b76:	e000      	b.n	8005b7a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005b78:	bf00      	nop
}
 8005b7a:	bf00      	nop
 8005b7c:	3718      	adds	r7, #24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	08005e79 	.word	0x08005e79

08005b88 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
 8005ba8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <SAI_InitI2S+0x2e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d103      	bne.n	8005bd2 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005bd0:	e002      	b.n	8005bd8 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005bde:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005be6:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e077      	b.n	8005cf2 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d107      	bne.n	8005c18 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005c14:	651a      	str	r2, [r3, #80]	@ 0x50
 8005c16:	e006      	b.n	8005c26 <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005c1e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2200      	movs	r2, #0
 8005c24:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d84f      	bhi.n	8005ccc <SAI_InitI2S+0x130>
 8005c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005c34 <SAI_InitI2S+0x98>)
 8005c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c32:	bf00      	nop
 8005c34:	08005c45 	.word	0x08005c45
 8005c38:	08005c67 	.word	0x08005c67
 8005c3c:	08005c89 	.word	0x08005c89
 8005c40:	08005cab 	.word	0x08005cab
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2280      	movs	r2, #128	@ 0x80
 8005c48:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	085b      	lsrs	r3, r3, #1
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	085b      	lsrs	r3, r3, #1
 8005c58:	011a      	lsls	r2, r3, #4
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2240      	movs	r2, #64	@ 0x40
 8005c62:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c64:	e035      	b.n	8005cd2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2280      	movs	r2, #128	@ 0x80
 8005c6a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	085b      	lsrs	r3, r3, #1
 8005c70:	019a      	lsls	r2, r3, #6
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2280      	movs	r2, #128	@ 0x80
 8005c84:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005c86:	e024      	b.n	8005cd2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	22c0      	movs	r2, #192	@ 0xc0
 8005c8c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	085b      	lsrs	r3, r3, #1
 8005c92:	019a      	lsls	r2, r3, #6
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	085b      	lsrs	r3, r3, #1
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2280      	movs	r2, #128	@ 0x80
 8005ca6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005ca8:	e013      	b.n	8005cd2 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	22e0      	movs	r2, #224	@ 0xe0
 8005cae:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	019a      	lsls	r2, r3, #6
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	085b      	lsrs	r3, r3, #1
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2280      	movs	r2, #128	@ 0x80
 8005cc8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005cca:	e002      	b.n	8005cd2 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd0:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d10b      	bne.n	8005cf0 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d102      	bne.n	8005ce4 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2210      	movs	r2, #16
 8005ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d102      	bne.n	8005cf0 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2208      	movs	r2, #8
 8005cee:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	371c      	adds	r7, #28
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop

08005d00 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <SAI_InitPCM+0x2e>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d103      	bne.n	8005d36 <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2201      	movs	r2, #1
 8005d32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005d34:	e002      	b.n	8005d3c <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005d48:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005d50:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	683a      	ldr	r2, [r7, #0]
 8005d5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d64:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b04      	cmp	r3, #4
 8005d6a:	d103      	bne.n	8005d74 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	645a      	str	r2, [r3, #68]	@ 0x44
 8005d72:	e002      	b.n	8005d7a <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	220d      	movs	r2, #13
 8005d78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d837      	bhi.n	8005df0 <SAI_InitPCM+0xf0>
 8005d80:	a201      	add	r2, pc, #4	@ (adr r2, 8005d88 <SAI_InitPCM+0x88>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005d99 	.word	0x08005d99
 8005d8c:	08005daf 	.word	0x08005daf
 8005d90:	08005dc5 	.word	0x08005dc5
 8005d94:	08005ddb 	.word	0x08005ddb
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2280      	movs	r2, #128	@ 0x80
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	011a      	lsls	r2, r3, #4
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2240      	movs	r2, #64	@ 0x40
 8005daa:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005dac:	e023      	b.n	8005df6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2280      	movs	r2, #128	@ 0x80
 8005db2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2280      	movs	r2, #128	@ 0x80
 8005dc0:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005dc2:	e018      	b.n	8005df6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	22c0      	movs	r2, #192	@ 0xc0
 8005dc8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	015a      	lsls	r2, r3, #5
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2280      	movs	r2, #128	@ 0x80
 8005dd6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005dd8:	e00d      	b.n	8005df6 <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	22e0      	movs	r2, #224	@ 0xe0
 8005dde:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	015a      	lsls	r2, r3, #5
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2280      	movs	r2, #128	@ 0x80
 8005dec:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005dee:	e002      	b.n	8005df6 <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75fb      	strb	r3, [r7, #23]
      break;
 8005df4:	bf00      	nop
  }

  return status;
 8005df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	371c      	adds	r7, #28
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005e0c:	4b18      	ldr	r3, [pc, #96]	@ (8005e70 <SAI_Disable+0x6c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a18      	ldr	r2, [pc, #96]	@ (8005e74 <SAI_Disable+0x70>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	0b1b      	lsrs	r3, r3, #12
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005e2e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d10a      	bne.n	8005e4c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e3c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	72fb      	strb	r3, [r7, #11]
      break;
 8005e4a:	e009      	b.n	8005e60 <SAI_Disable+0x5c>
    }
    count--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e7      	bne.n	8005e30 <SAI_Disable+0x2c>

  return status;
 8005e60:	7afb      	ldrb	r3, [r7, #11]
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3714      	adds	r7, #20
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	20000110 	.word	0x20000110
 8005e74:	95cbec1b 	.word	0x95cbec1b

08005e78 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e84:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005e94:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ea6:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eae:	2b20      	cmp	r3, #32
 8005eb0:	d00a      	beq.n	8005ec8 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7ff ffa6 	bl	8005e04 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0208 	orr.w	r2, r2, #8
 8005ec6:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f7ff fe55 	bl	8005b88 <HAL_SAI_ErrorCallback>
#endif
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e095      	b.n	8006024 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d108      	bne.n	8005f12 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f08:	d009      	beq.n	8005f1e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	61da      	str	r2, [r3, #28]
 8005f10:	e005      	b.n	8005f1e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d106      	bne.n	8005f3e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fb faf5 	bl	8001528 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2202      	movs	r2, #2
 8005f42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f54:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f5e:	d902      	bls.n	8005f66 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]
 8005f64:	e002      	b.n	8005f6c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005f6a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005f74:	d007      	beq.n	8005f86 <HAL_SPI_Init+0xa0>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005f7e:	d002      	beq.n	8005f86 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005f96:	431a      	orrs	r2, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc8:	ea42 0103 	orr.w	r1, r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fd0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	f003 0204 	and.w	r2, r3, #4
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fea:	f003 0310 	and.w	r3, r3, #16
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	431a      	orrs	r2, r3
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006002:	ea42 0103 	orr.w	r1, r2, r3
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b088      	sub	sp, #32
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	603b      	str	r3, [r7, #0]
 8006038:	4613      	mov	r3, r2
 800603a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800603c:	f7fb fd6a 	bl	8001b14 <HAL_GetTick>
 8006040:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d001      	beq.n	8006056 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006052:	2302      	movs	r3, #2
 8006054:	e15c      	b.n	8006310 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <HAL_SPI_Transmit+0x36>
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e154      	b.n	8006310 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800606c:	2b01      	cmp	r3, #1
 800606e:	d101      	bne.n	8006074 <HAL_SPI_Transmit+0x48>
 8006070:	2302      	movs	r3, #2
 8006072:	e14d      	b.n	8006310 <HAL_SPI_Transmit+0x2e4>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2203      	movs	r2, #3
 8006080:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	88fa      	ldrh	r2, [r7, #6]
 8006094:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	88fa      	ldrh	r2, [r7, #6]
 800609a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060c6:	d10f      	bne.n	80060e8 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060f2:	2b40      	cmp	r3, #64	@ 0x40
 80060f4:	d007      	beq.n	8006106 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006104:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800610e:	d952      	bls.n	80061b6 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <HAL_SPI_Transmit+0xf2>
 8006118:	8b7b      	ldrh	r3, [r7, #26]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d145      	bne.n	80061aa <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006122:	881a      	ldrh	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612e:	1c9a      	adds	r2, r3, #2
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006142:	e032      	b.n	80061aa <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f003 0302 	and.w	r3, r3, #2
 800614e:	2b02      	cmp	r3, #2
 8006150:	d112      	bne.n	8006178 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	881a      	ldrh	r2, [r3, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006162:	1c9a      	adds	r2, r3, #2
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006176:	e018      	b.n	80061aa <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006178:	f7fb fccc 	bl	8001b14 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	429a      	cmp	r2, r3
 8006186:	d803      	bhi.n	8006190 <HAL_SPI_Transmit+0x164>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618e:	d102      	bne.n	8006196 <HAL_SPI_Transmit+0x16a>
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d109      	bne.n	80061aa <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	e0b2      	b.n	8006310 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1c7      	bne.n	8006144 <HAL_SPI_Transmit+0x118>
 80061b4:	e083      	b.n	80062be <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_SPI_Transmit+0x198>
 80061be:	8b7b      	ldrh	r3, [r7, #26]
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d177      	bne.n	80062b4 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d912      	bls.n	80061f4 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d2:	881a      	ldrh	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b02      	subs	r3, #2
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80061f2:	e05f      	b.n	80062b4 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	7812      	ldrb	r2, [r2, #0]
 8006200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	1c5a      	adds	r2, r3, #1
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006210:	b29b      	uxth	r3, r3
 8006212:	3b01      	subs	r3, #1
 8006214:	b29a      	uxth	r2, r3
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800621a:	e04b      	b.n	80062b4 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b02      	cmp	r3, #2
 8006228:	d12b      	bne.n	8006282 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800622e:	b29b      	uxth	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	d912      	bls.n	800625a <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006238:	881a      	ldrh	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006244:	1c9a      	adds	r2, r3, #2
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800624e:	b29b      	uxth	r3, r3
 8006250:	3b02      	subs	r3, #2
 8006252:	b29a      	uxth	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006258:	e02c      	b.n	80062b4 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	7812      	ldrb	r2, [r2, #0]
 8006266:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b29a      	uxth	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006280:	e018      	b.n	80062b4 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006282:	f7fb fc47 	bl	8001b14 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	683a      	ldr	r2, [r7, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d803      	bhi.n	800629a <HAL_SPI_Transmit+0x26e>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d102      	bne.n	80062a0 <HAL_SPI_Transmit+0x274>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d109      	bne.n	80062b4 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e02d      	b.n	8006310 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1ae      	bne.n	800621c <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062be:	69fa      	ldr	r2, [r7, #28]
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f000 fa5a 	bl	800677c <SPI_EndRxTxTransaction>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	2220      	movs	r2, #32
 80062d2:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10a      	bne.n	80062f2 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062dc:	2300      	movs	r3, #0
 80062de:	617b      	str	r3, [r7, #20]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e000      	b.n	8006310 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800630e:	2300      	movs	r3, #0
  }
}
 8006310:	4618      	mov	r0, r3
 8006312:	3720      	adds	r7, #32
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10e      	bne.n	8006358 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006340:	2b00      	cmp	r3, #0
 8006342:	d009      	beq.n	8006358 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d004      	beq.n	8006358 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	4798      	blx	r3
    return;
 8006356:	e0ce      	b.n	80064f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <HAL_SPI_IRQHandler+0x5e>
 8006362:	69fb      	ldr	r3, [r7, #28]
 8006364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	4798      	blx	r3
    return;
 8006374:	e0bf      	b.n	80064f6 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <HAL_SPI_IRQHandler+0x7e>
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006386:	2b00      	cmp	r3, #0
 8006388:	d105      	bne.n	8006396 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80b0 	beq.w	80064f6 <HAL_SPI_IRQHandler+0x1de>
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	f003 0320 	and.w	r3, r3, #32
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80aa 	beq.w	80064f6 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d023      	beq.n	80063f4 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d011      	beq.n	80063dc <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063bc:	f043 0204 	orr.w	r2, r3, #4
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063c4:	2300      	movs	r3, #0
 80063c6:	617b      	str	r3, [r7, #20]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	e00b      	b.n	80063f4 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063dc:	2300      	movs	r3, #0
 80063de:	613b      	str	r3, [r7, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	613b      	str	r3, [r7, #16]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]
        return;
 80063f2:	e080      	b.n	80064f6 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d014      	beq.n	8006428 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006402:	f043 0201 	orr.w	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	60fb      	str	r3, [r7, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006428:	69bb      	ldr	r3, [r7, #24]
 800642a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00c      	beq.n	800644c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006436:	f043 0208 	orr.w	r2, r3, #8
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800643e:	2300      	movs	r3, #0
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006450:	2b00      	cmp	r3, #0
 8006452:	d04f      	beq.n	80064f4 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006462:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <HAL_SPI_IRQHandler+0x168>
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	f003 0301 	and.w	r3, r3, #1
 800647c:	2b00      	cmp	r3, #0
 800647e:	d034      	beq.n	80064ea <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f022 0203 	bic.w	r2, r2, #3
 800648e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006494:	2b00      	cmp	r3, #0
 8006496:	d011      	beq.n	80064bc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800649c:	4a17      	ldr	r2, [pc, #92]	@ (80064fc <HAL_SPI_IRQHandler+0x1e4>)
 800649e:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fb fd6d 	bl	8001f84 <HAL_DMA_Abort_IT>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d005      	beq.n	80064bc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064b4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d016      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c8:	4a0c      	ldr	r2, [pc, #48]	@ (80064fc <HAL_SPI_IRQHandler+0x1e4>)
 80064ca:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7fb fd57 	bl	8001f84 <HAL_DMA_Abort_IT>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00a      	beq.n	80064f2 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80064e8:	e003      	b.n	80064f2 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f808 	bl	8006500 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80064f0:	e000      	b.n	80064f4 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80064f2:	bf00      	nop
    return;
 80064f4:	bf00      	nop
  }
}
 80064f6:	3720      	adds	r7, #32
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	08006515 	.word	0x08006515

08006500 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006500:	b480      	push	{r7}
 8006502:	b083      	sub	sp, #12
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006520:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2200      	movs	r2, #0
 8006526:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f7ff ffe5 	bl	8006500 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	4613      	mov	r3, r2
 800654e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006550:	f7fb fae0 	bl	8001b14 <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	1a9b      	subs	r3, r3, r2
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4413      	add	r3, r2
 800655e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006560:	f7fb fad8 	bl	8001b14 <HAL_GetTick>
 8006564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006566:	4b39      	ldr	r3, [pc, #228]	@ (800664c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	015b      	lsls	r3, r3, #5
 800656c:	0d1b      	lsrs	r3, r3, #20
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	fb02 f303 	mul.w	r3, r2, r3
 8006574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006576:	e054      	b.n	8006622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d050      	beq.n	8006622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006580:	f7fb fac8 	bl	8001b14 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	429a      	cmp	r2, r3
 800658e:	d902      	bls.n	8006596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d13d      	bne.n	8006612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065ae:	d111      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b8:	d004      	beq.n	80065c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c2:	d107      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065dc:	d10f      	bne.n	80065fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e017      	b.n	8006642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	3b01      	subs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	429a      	cmp	r2, r3
 8006630:	bf0c      	ite	eq
 8006632:	2301      	moveq	r3, #1
 8006634:	2300      	movne	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	429a      	cmp	r2, r3
 800663e:	d19b      	bne.n	8006578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000110 	.word	0x20000110

08006650 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	@ 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006662:	f7fb fa57 	bl	8001b14 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	1a9b      	subs	r3, r3, r2
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	4413      	add	r3, r2
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8006672:	f7fb fa4f 	bl	8001b14 <HAL_GetTick>
 8006676:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006680:	4b3d      	ldr	r3, [pc, #244]	@ (8006778 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006682:	681a      	ldr	r2, [r3, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	00da      	lsls	r2, r3, #3
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	0d1b      	lsrs	r3, r3, #20
 8006690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006692:	fb02 f303 	mul.w	r3, r2, r3
 8006696:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006698:	e060      	b.n	800675c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80066a0:	d107      	bne.n	80066b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80066b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d050      	beq.n	800675c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80066ba:	f7fb fa2b 	bl	8001b14 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d902      	bls.n	80066d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d13d      	bne.n	800674c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80066de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066e8:	d111      	bne.n	800670e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066f2:	d004      	beq.n	80066fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066fc:	d107      	bne.n	800670e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800670c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006716:	d10f      	bne.n	8006738 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006736:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e010      	b.n	800676e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	3b01      	subs	r3, #1
 800675a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	689a      	ldr	r2, [r3, #8]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4013      	ands	r3, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	429a      	cmp	r2, r3
 800676a:	d196      	bne.n	800669a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3728      	adds	r7, #40	@ 0x28
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	20000110 	.word	0x20000110

0800677c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b086      	sub	sp, #24
 8006780:	af02      	add	r7, sp, #8
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	2200      	movs	r2, #0
 8006790:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006794:	68f8      	ldr	r0, [r7, #12]
 8006796:	f7ff ff5b 	bl	8006650 <SPI_WaitFifoStateUntilTimeout>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d007      	beq.n	80067b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a4:	f043 0220 	orr.w	r2, r3, #32
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e027      	b.n	8006800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2200      	movs	r2, #0
 80067b8:	2180      	movs	r1, #128	@ 0x80
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f7ff fec0 	bl	8006540 <SPI_WaitFlagStateUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d007      	beq.n	80067d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067ca:	f043 0220 	orr.w	r2, r3, #32
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e014      	b.n	8006800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2200      	movs	r2, #0
 80067de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f7ff ff34 	bl	8006650 <SPI_WaitFifoStateUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067f2:	f043 0220 	orr.w	r2, r3, #32
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e000      	b.n	8006800 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e040      	b.n	800689c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7fb f874 	bl	8001918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2224      	movs	r2, #36	@ 0x24
 8006834:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f022 0201 	bic.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fedc 	bl	800760c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fc21 	bl	800709c <UART_SetConfig>
 800685a:	4603      	mov	r3, r0
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e01b      	b.n	800689c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685a      	ldr	r2, [r3, #4]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006872:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006882:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 ff5b 	bl	8007750 <UART_CheckIdleState>
 800689a:	4603      	mov	r3, r0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b08a      	sub	sp, #40	@ 0x28
 80068a8:	af02      	add	r7, sp, #8
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	4613      	mov	r3, r2
 80068b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d177      	bne.n	80069ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_UART_Transmit+0x24>
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e070      	b.n	80069ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2221      	movs	r2, #33	@ 0x21
 80068d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068da:	f7fb f91b 	bl	8001b14 <HAL_GetTick>
 80068de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	88fa      	ldrh	r2, [r7, #6]
 80068e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f8:	d108      	bne.n	800690c <HAL_UART_Transmit+0x68>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d104      	bne.n	800690c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e003      	b.n	8006914 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006914:	e02f      	b.n	8006976 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2200      	movs	r2, #0
 800691e:	2180      	movs	r1, #128	@ 0x80
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 ffbd 	bl	80078a0 <UART_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e03b      	b.n	80069ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	881a      	ldrh	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006948:	b292      	uxth	r2, r2
 800694a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	3302      	adds	r3, #2
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	e007      	b.n	8006964 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	781a      	ldrb	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	3301      	adds	r3, #1
 8006962:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800696a:	b29b      	uxth	r3, r3
 800696c:	3b01      	subs	r3, #1
 800696e:	b29a      	uxth	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1c9      	bne.n	8006916 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	9300      	str	r3, [sp, #0]
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2200      	movs	r2, #0
 800698a:	2140      	movs	r1, #64	@ 0x40
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 ff87 	bl	80078a0 <UART_WaitOnFlagUntilTimeout>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d004      	beq.n	80069a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2220      	movs	r2, #32
 800699c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e005      	b.n	80069ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	e000      	b.n	80069ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069ac:	2302      	movs	r3, #2
  }
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3720      	adds	r7, #32
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	@ 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069cc:	2b20      	cmp	r3, #32
 80069ce:	d137      	bne.n	8006a40 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d002      	beq.n	80069dc <HAL_UART_Receive_IT+0x24>
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d101      	bne.n	80069e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e030      	b.n	8006a42 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a18      	ldr	r2, [pc, #96]	@ (8006a4c <HAL_UART_Receive_IT+0x94>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d01f      	beq.n	8006a30 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d018      	beq.n	8006a30 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	623b      	str	r3, [r7, #32]
 8006a1e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	6a3a      	ldr	r2, [r7, #32]
 8006a24:	e841 2300 	strex	r3, r2, [r1]
 8006a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1e6      	bne.n	80069fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a30:	88fb      	ldrh	r3, [r7, #6]
 8006a32:	461a      	mov	r2, r3
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f000 ffa0 	bl	800797c <UART_Start_Receive_IT>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	e000      	b.n	8006a42 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a40:	2302      	movs	r3, #2
  }
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3728      	adds	r7, #40	@ 0x28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40008000 	.word	0x40008000

08006a50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b0ba      	sub	sp, #232	@ 0xe8
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006a7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006a7e:	4013      	ands	r3, r2
 8006a80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006a84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d115      	bne.n	8006ab8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a90:	f003 0320 	and.w	r3, r3, #32
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00f      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a9c:	f003 0320 	and.w	r3, r3, #32
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d009      	beq.n	8006ab8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 82ca 	beq.w	8007042 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
      }
      return;
 8006ab6:	e2c4      	b.n	8007042 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006ab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8117 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006ac2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d106      	bne.n	8006adc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006ace:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006ad2:	4b85      	ldr	r3, [pc, #532]	@ (8006ce8 <HAL_UART_IRQHandler+0x298>)
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f000 810a 	beq.w	8006cf0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d011      	beq.n	8006b0c <HAL_UART_IRQHandler+0xbc>
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2201      	movs	r2, #1
 8006afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b02:	f043 0201 	orr.w	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b10:	f003 0302 	and.w	r3, r3, #2
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d011      	beq.n	8006b3c <HAL_UART_IRQHandler+0xec>
 8006b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00b      	beq.n	8006b3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b32:	f043 0204 	orr.w	r2, r3, #4
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d011      	beq.n	8006b6c <HAL_UART_IRQHandler+0x11c>
 8006b48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00b      	beq.n	8006b6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2204      	movs	r2, #4
 8006b5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b62:	f043 0202 	orr.w	r2, r3, #2
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d017      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b7c:	f003 0320 	and.w	r3, r3, #32
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2208      	movs	r2, #8
 8006b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b9e:	f043 0208 	orr.w	r2, r3, #8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d012      	beq.n	8006bda <HAL_UART_IRQHandler+0x18a>
 8006bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00c      	beq.n	8006bda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006bd0:	f043 0220 	orr.w	r2, r3, #32
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 8230 	beq.w	8007046 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00d      	beq.n	8006c0e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf6:	f003 0320 	and.w	r3, r3, #32
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d007      	beq.n	8006c0e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006c14:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c22:	2b40      	cmp	r3, #64	@ 0x40
 8006c24:	d005      	beq.n	8006c32 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c2a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d04f      	beq.n	8006cd2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 ff68 	bl	8007b08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c42:	2b40      	cmp	r3, #64	@ 0x40
 8006c44:	d141      	bne.n	8006cca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c54:	e853 3f00 	ldrex	r3, [r3]
 8006c58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c72:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006c76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006c7e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006c82:	e841 2300 	strex	r3, r2, [r1]
 8006c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006c8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1d9      	bne.n	8006c46 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d013      	beq.n	8006cc2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c9e:	4a13      	ldr	r2, [pc, #76]	@ (8006cec <HAL_UART_IRQHandler+0x29c>)
 8006ca0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fb f96c 	bl	8001f84 <HAL_DMA_Abort_IT>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d017      	beq.n	8006ce2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc0:	e00f      	b.n	8006ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f9d4 	bl	8007070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	e00b      	b.n	8006ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f9d0 	bl	8007070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd0:	e007      	b.n	8006ce2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f9cc 	bl	8007070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006ce0:	e1b1      	b.n	8007046 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ce2:	bf00      	nop
    return;
 8006ce4:	e1af      	b.n	8007046 <HAL_UART_IRQHandler+0x5f6>
 8006ce6:	bf00      	nop
 8006ce8:	04000120 	.word	0x04000120
 8006cec:	08007bd1 	.word	0x08007bd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	f040 816a 	bne.w	8006fce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cfe:	f003 0310 	and.w	r3, r3, #16
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8163 	beq.w	8006fce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 815c 	beq.w	8006fce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d28:	2b40      	cmp	r3, #64	@ 0x40
 8006d2a:	f040 80d4 	bne.w	8006ed6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 80ad 	beq.w	8006e9e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	f080 80a5 	bcs.w	8006e9e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f003 0320 	and.w	r3, r3, #32
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f040 8086 	bne.w	8006e7c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d7c:	e853 3f00 	ldrex	r3, [r3]
 8006d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	461a      	mov	r2, r3
 8006d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006d9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006d9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006daa:	e841 2300 	strex	r3, r2, [r1]
 8006dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1da      	bne.n	8006d70 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dc4:	e853 3f00 	ldrex	r3, [r3]
 8006dc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006dca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006dde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006de2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006df0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e1      	bne.n	8006dba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	3308      	adds	r3, #8
 8006dfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	3308      	adds	r3, #8
 8006e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e3      	bne.n	8006df6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2220      	movs	r2, #32
 8006e32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e4c:	f023 0310 	bic.w	r3, r3, #16
 8006e50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006e5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e4      	bne.n	8006e3c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fb f846 	bl	8001f08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2202      	movs	r2, #2
 8006e80:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 f8f4 	bl	8007084 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006e9c:	e0d5      	b.n	800704a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ea4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	f040 80ce 	bne.w	800704a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 0320 	and.w	r3, r3, #32
 8006eba:	2b20      	cmp	r3, #32
 8006ebc:	f040 80c5 	bne.w	800704a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f8d8 	bl	8007084 <HAL_UARTEx_RxEventCallback>
      return;
 8006ed4:	e0b9      	b.n	800704a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80ab 	beq.w	800704e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8006ef8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	f000 80a6 	beq.w	800704e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	e853 3f00 	ldrex	r3, [r3]
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f16:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f26:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f2c:	e841 2300 	strex	r3, r2, [r1]
 8006f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1e4      	bne.n	8006f02 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3308      	adds	r3, #8
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f42:	e853 3f00 	ldrex	r3, [r3]
 8006f46:	623b      	str	r3, [r7, #32]
   return(result);
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	f023 0301 	bic.w	r3, r3, #1
 8006f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	3308      	adds	r3, #8
 8006f58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f64:	e841 2300 	strex	r3, r2, [r1]
 8006f68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e3      	bne.n	8006f38 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2220      	movs	r2, #32
 8006f74:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	e853 3f00 	ldrex	r3, [r3]
 8006f90:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f023 0310 	bic.w	r3, r3, #16
 8006f98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006fa6:	61fb      	str	r3, [r7, #28]
 8006fa8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	69b9      	ldr	r1, [r7, #24]
 8006fac:	69fa      	ldr	r2, [r7, #28]
 8006fae:	e841 2300 	strex	r3, r2, [r1]
 8006fb2:	617b      	str	r3, [r7, #20]
   return(result);
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1e4      	bne.n	8006f84 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2202      	movs	r2, #2
 8006fbe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f85c 	bl	8007084 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fcc:	e03f      	b.n	800704e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00e      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x5a8>
 8006fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d008      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006fee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 ffe9 	bl	8007fc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ff6:	e02d      	b.n	8007054 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ffc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00e      	beq.n	8007022 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d01c      	beq.n	8007052 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
    }
    return;
 8007020:	e017      	b.n	8007052 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702a:	2b00      	cmp	r3, #0
 800702c:	d012      	beq.n	8007054 <HAL_UART_IRQHandler+0x604>
 800702e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00c      	beq.n	8007054 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fdde 	bl	8007bfc <UART_EndTransmit_IT>
    return;
 8007040:	e008      	b.n	8007054 <HAL_UART_IRQHandler+0x604>
      return;
 8007042:	bf00      	nop
 8007044:	e006      	b.n	8007054 <HAL_UART_IRQHandler+0x604>
    return;
 8007046:	bf00      	nop
 8007048:	e004      	b.n	8007054 <HAL_UART_IRQHandler+0x604>
      return;
 800704a:	bf00      	nop
 800704c:	e002      	b.n	8007054 <HAL_UART_IRQHandler+0x604>
      return;
 800704e:	bf00      	nop
 8007050:	e000      	b.n	8007054 <HAL_UART_IRQHandler+0x604>
    return;
 8007052:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007054:	37e8      	adds	r7, #232	@ 0xe8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop

0800705c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007078:	bf00      	nop
 800707a:	370c      	adds	r7, #12
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800709c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070a0:	b08a      	sub	sp, #40	@ 0x28
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	691b      	ldr	r3, [r3, #16]
 80070b4:	431a      	orrs	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	695b      	ldr	r3, [r3, #20]
 80070ba:	431a      	orrs	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	4ba4      	ldr	r3, [pc, #656]	@ (800735c <UART_SetConfig+0x2c0>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070d4:	430b      	orrs	r3, r1
 80070d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a99      	ldr	r2, [pc, #612]	@ (8007360 <UART_SetConfig+0x2c4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d004      	beq.n	8007108 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007104:	4313      	orrs	r3, r2
 8007106:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007118:	430a      	orrs	r2, r1
 800711a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a90      	ldr	r2, [pc, #576]	@ (8007364 <UART_SetConfig+0x2c8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d126      	bne.n	8007174 <UART_SetConfig+0xd8>
 8007126:	4b90      	ldr	r3, [pc, #576]	@ (8007368 <UART_SetConfig+0x2cc>)
 8007128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800712c:	f003 0303 	and.w	r3, r3, #3
 8007130:	2b03      	cmp	r3, #3
 8007132:	d81b      	bhi.n	800716c <UART_SetConfig+0xd0>
 8007134:	a201      	add	r2, pc, #4	@ (adr r2, 800713c <UART_SetConfig+0xa0>)
 8007136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800713a:	bf00      	nop
 800713c:	0800714d 	.word	0x0800714d
 8007140:	0800715d 	.word	0x0800715d
 8007144:	08007155 	.word	0x08007155
 8007148:	08007165 	.word	0x08007165
 800714c:	2301      	movs	r3, #1
 800714e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007152:	e116      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007154:	2302      	movs	r3, #2
 8007156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800715a:	e112      	b.n	8007382 <UART_SetConfig+0x2e6>
 800715c:	2304      	movs	r3, #4
 800715e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007162:	e10e      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007164:	2308      	movs	r3, #8
 8007166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800716a:	e10a      	b.n	8007382 <UART_SetConfig+0x2e6>
 800716c:	2310      	movs	r3, #16
 800716e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007172:	e106      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a7c      	ldr	r2, [pc, #496]	@ (800736c <UART_SetConfig+0x2d0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d138      	bne.n	80071f0 <UART_SetConfig+0x154>
 800717e:	4b7a      	ldr	r3, [pc, #488]	@ (8007368 <UART_SetConfig+0x2cc>)
 8007180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007184:	f003 030c 	and.w	r3, r3, #12
 8007188:	2b0c      	cmp	r3, #12
 800718a:	d82d      	bhi.n	80071e8 <UART_SetConfig+0x14c>
 800718c:	a201      	add	r2, pc, #4	@ (adr r2, 8007194 <UART_SetConfig+0xf8>)
 800718e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007192:	bf00      	nop
 8007194:	080071c9 	.word	0x080071c9
 8007198:	080071e9 	.word	0x080071e9
 800719c:	080071e9 	.word	0x080071e9
 80071a0:	080071e9 	.word	0x080071e9
 80071a4:	080071d9 	.word	0x080071d9
 80071a8:	080071e9 	.word	0x080071e9
 80071ac:	080071e9 	.word	0x080071e9
 80071b0:	080071e9 	.word	0x080071e9
 80071b4:	080071d1 	.word	0x080071d1
 80071b8:	080071e9 	.word	0x080071e9
 80071bc:	080071e9 	.word	0x080071e9
 80071c0:	080071e9 	.word	0x080071e9
 80071c4:	080071e1 	.word	0x080071e1
 80071c8:	2300      	movs	r3, #0
 80071ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ce:	e0d8      	b.n	8007382 <UART_SetConfig+0x2e6>
 80071d0:	2302      	movs	r3, #2
 80071d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071d6:	e0d4      	b.n	8007382 <UART_SetConfig+0x2e6>
 80071d8:	2304      	movs	r3, #4
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071de:	e0d0      	b.n	8007382 <UART_SetConfig+0x2e6>
 80071e0:	2308      	movs	r3, #8
 80071e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071e6:	e0cc      	b.n	8007382 <UART_SetConfig+0x2e6>
 80071e8:	2310      	movs	r3, #16
 80071ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80071ee:	e0c8      	b.n	8007382 <UART_SetConfig+0x2e6>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a5e      	ldr	r2, [pc, #376]	@ (8007370 <UART_SetConfig+0x2d4>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d125      	bne.n	8007246 <UART_SetConfig+0x1aa>
 80071fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007368 <UART_SetConfig+0x2cc>)
 80071fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007200:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007204:	2b30      	cmp	r3, #48	@ 0x30
 8007206:	d016      	beq.n	8007236 <UART_SetConfig+0x19a>
 8007208:	2b30      	cmp	r3, #48	@ 0x30
 800720a:	d818      	bhi.n	800723e <UART_SetConfig+0x1a2>
 800720c:	2b20      	cmp	r3, #32
 800720e:	d00a      	beq.n	8007226 <UART_SetConfig+0x18a>
 8007210:	2b20      	cmp	r3, #32
 8007212:	d814      	bhi.n	800723e <UART_SetConfig+0x1a2>
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <UART_SetConfig+0x182>
 8007218:	2b10      	cmp	r3, #16
 800721a:	d008      	beq.n	800722e <UART_SetConfig+0x192>
 800721c:	e00f      	b.n	800723e <UART_SetConfig+0x1a2>
 800721e:	2300      	movs	r3, #0
 8007220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007224:	e0ad      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007226:	2302      	movs	r3, #2
 8007228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800722c:	e0a9      	b.n	8007382 <UART_SetConfig+0x2e6>
 800722e:	2304      	movs	r3, #4
 8007230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007234:	e0a5      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007236:	2308      	movs	r3, #8
 8007238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800723c:	e0a1      	b.n	8007382 <UART_SetConfig+0x2e6>
 800723e:	2310      	movs	r3, #16
 8007240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007244:	e09d      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a4a      	ldr	r2, [pc, #296]	@ (8007374 <UART_SetConfig+0x2d8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d125      	bne.n	800729c <UART_SetConfig+0x200>
 8007250:	4b45      	ldr	r3, [pc, #276]	@ (8007368 <UART_SetConfig+0x2cc>)
 8007252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007256:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800725a:	2bc0      	cmp	r3, #192	@ 0xc0
 800725c:	d016      	beq.n	800728c <UART_SetConfig+0x1f0>
 800725e:	2bc0      	cmp	r3, #192	@ 0xc0
 8007260:	d818      	bhi.n	8007294 <UART_SetConfig+0x1f8>
 8007262:	2b80      	cmp	r3, #128	@ 0x80
 8007264:	d00a      	beq.n	800727c <UART_SetConfig+0x1e0>
 8007266:	2b80      	cmp	r3, #128	@ 0x80
 8007268:	d814      	bhi.n	8007294 <UART_SetConfig+0x1f8>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d002      	beq.n	8007274 <UART_SetConfig+0x1d8>
 800726e:	2b40      	cmp	r3, #64	@ 0x40
 8007270:	d008      	beq.n	8007284 <UART_SetConfig+0x1e8>
 8007272:	e00f      	b.n	8007294 <UART_SetConfig+0x1f8>
 8007274:	2300      	movs	r3, #0
 8007276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800727a:	e082      	b.n	8007382 <UART_SetConfig+0x2e6>
 800727c:	2302      	movs	r3, #2
 800727e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007282:	e07e      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007284:	2304      	movs	r3, #4
 8007286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800728a:	e07a      	b.n	8007382 <UART_SetConfig+0x2e6>
 800728c:	2308      	movs	r3, #8
 800728e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007292:	e076      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007294:	2310      	movs	r3, #16
 8007296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800729a:	e072      	b.n	8007382 <UART_SetConfig+0x2e6>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a35      	ldr	r2, [pc, #212]	@ (8007378 <UART_SetConfig+0x2dc>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d12a      	bne.n	80072fc <UART_SetConfig+0x260>
 80072a6:	4b30      	ldr	r3, [pc, #192]	@ (8007368 <UART_SetConfig+0x2cc>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072b4:	d01a      	beq.n	80072ec <UART_SetConfig+0x250>
 80072b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ba:	d81b      	bhi.n	80072f4 <UART_SetConfig+0x258>
 80072bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c0:	d00c      	beq.n	80072dc <UART_SetConfig+0x240>
 80072c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80072c6:	d815      	bhi.n	80072f4 <UART_SetConfig+0x258>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <UART_SetConfig+0x238>
 80072cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072d0:	d008      	beq.n	80072e4 <UART_SetConfig+0x248>
 80072d2:	e00f      	b.n	80072f4 <UART_SetConfig+0x258>
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072da:	e052      	b.n	8007382 <UART_SetConfig+0x2e6>
 80072dc:	2302      	movs	r3, #2
 80072de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072e2:	e04e      	b.n	8007382 <UART_SetConfig+0x2e6>
 80072e4:	2304      	movs	r3, #4
 80072e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072ea:	e04a      	b.n	8007382 <UART_SetConfig+0x2e6>
 80072ec:	2308      	movs	r3, #8
 80072ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072f2:	e046      	b.n	8007382 <UART_SetConfig+0x2e6>
 80072f4:	2310      	movs	r3, #16
 80072f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80072fa:	e042      	b.n	8007382 <UART_SetConfig+0x2e6>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a17      	ldr	r2, [pc, #92]	@ (8007360 <UART_SetConfig+0x2c4>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d13a      	bne.n	800737c <UART_SetConfig+0x2e0>
 8007306:	4b18      	ldr	r3, [pc, #96]	@ (8007368 <UART_SetConfig+0x2cc>)
 8007308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800730c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007310:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007314:	d01a      	beq.n	800734c <UART_SetConfig+0x2b0>
 8007316:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800731a:	d81b      	bhi.n	8007354 <UART_SetConfig+0x2b8>
 800731c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007320:	d00c      	beq.n	800733c <UART_SetConfig+0x2a0>
 8007322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007326:	d815      	bhi.n	8007354 <UART_SetConfig+0x2b8>
 8007328:	2b00      	cmp	r3, #0
 800732a:	d003      	beq.n	8007334 <UART_SetConfig+0x298>
 800732c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007330:	d008      	beq.n	8007344 <UART_SetConfig+0x2a8>
 8007332:	e00f      	b.n	8007354 <UART_SetConfig+0x2b8>
 8007334:	2300      	movs	r3, #0
 8007336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800733a:	e022      	b.n	8007382 <UART_SetConfig+0x2e6>
 800733c:	2302      	movs	r3, #2
 800733e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007342:	e01e      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007344:	2304      	movs	r3, #4
 8007346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800734a:	e01a      	b.n	8007382 <UART_SetConfig+0x2e6>
 800734c:	2308      	movs	r3, #8
 800734e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007352:	e016      	b.n	8007382 <UART_SetConfig+0x2e6>
 8007354:	2310      	movs	r3, #16
 8007356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800735a:	e012      	b.n	8007382 <UART_SetConfig+0x2e6>
 800735c:	efff69f3 	.word	0xefff69f3
 8007360:	40008000 	.word	0x40008000
 8007364:	40013800 	.word	0x40013800
 8007368:	40021000 	.word	0x40021000
 800736c:	40004400 	.word	0x40004400
 8007370:	40004800 	.word	0x40004800
 8007374:	40004c00 	.word	0x40004c00
 8007378:	40005000 	.word	0x40005000
 800737c:	2310      	movs	r3, #16
 800737e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a9f      	ldr	r2, [pc, #636]	@ (8007604 <UART_SetConfig+0x568>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d17a      	bne.n	8007482 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800738c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007390:	2b08      	cmp	r3, #8
 8007392:	d824      	bhi.n	80073de <UART_SetConfig+0x342>
 8007394:	a201      	add	r2, pc, #4	@ (adr r2, 800739c <UART_SetConfig+0x300>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073c1 	.word	0x080073c1
 80073a0:	080073df 	.word	0x080073df
 80073a4:	080073c9 	.word	0x080073c9
 80073a8:	080073df 	.word	0x080073df
 80073ac:	080073cf 	.word	0x080073cf
 80073b0:	080073df 	.word	0x080073df
 80073b4:	080073df 	.word	0x080073df
 80073b8:	080073df 	.word	0x080073df
 80073bc:	080073d7 	.word	0x080073d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073c0:	f7fc fc8e 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80073c4:	61f8      	str	r0, [r7, #28]
        break;
 80073c6:	e010      	b.n	80073ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c8:	4b8f      	ldr	r3, [pc, #572]	@ (8007608 <UART_SetConfig+0x56c>)
 80073ca:	61fb      	str	r3, [r7, #28]
        break;
 80073cc:	e00d      	b.n	80073ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073ce:	f7fc fbef 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 80073d2:	61f8      	str	r0, [r7, #28]
        break;
 80073d4:	e009      	b.n	80073ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073da:	61fb      	str	r3, [r7, #28]
        break;
 80073dc:	e005      	b.n	80073ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80073e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 80fb 	beq.w	80075e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	685a      	ldr	r2, [r3, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	4413      	add	r3, r2
 80073fc:	69fa      	ldr	r2, [r7, #28]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d305      	bcc.n	800740e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007408:	69fa      	ldr	r2, [r7, #28]
 800740a:	429a      	cmp	r2, r3
 800740c:	d903      	bls.n	8007416 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007414:	e0e8      	b.n	80075e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	2200      	movs	r2, #0
 800741a:	461c      	mov	r4, r3
 800741c:	4615      	mov	r5, r2
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	022b      	lsls	r3, r5, #8
 8007428:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800742c:	0222      	lsls	r2, r4, #8
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	6849      	ldr	r1, [r1, #4]
 8007432:	0849      	lsrs	r1, r1, #1
 8007434:	2000      	movs	r0, #0
 8007436:	4688      	mov	r8, r1
 8007438:	4681      	mov	r9, r0
 800743a:	eb12 0a08 	adds.w	sl, r2, r8
 800743e:	eb43 0b09 	adc.w	fp, r3, r9
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	603b      	str	r3, [r7, #0]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007450:	4650      	mov	r0, sl
 8007452:	4659      	mov	r1, fp
 8007454:	f7f8 ff24 	bl	80002a0 <__aeabi_uldivmod>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4613      	mov	r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007466:	d308      	bcc.n	800747a <UART_SetConfig+0x3de>
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800746e:	d204      	bcs.n	800747a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	60da      	str	r2, [r3, #12]
 8007478:	e0b6      	b.n	80075e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007480:	e0b2      	b.n	80075e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800748a:	d15e      	bne.n	800754a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800748c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007490:	2b08      	cmp	r3, #8
 8007492:	d828      	bhi.n	80074e6 <UART_SetConfig+0x44a>
 8007494:	a201      	add	r2, pc, #4	@ (adr r2, 800749c <UART_SetConfig+0x400>)
 8007496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749a:	bf00      	nop
 800749c:	080074c1 	.word	0x080074c1
 80074a0:	080074c9 	.word	0x080074c9
 80074a4:	080074d1 	.word	0x080074d1
 80074a8:	080074e7 	.word	0x080074e7
 80074ac:	080074d7 	.word	0x080074d7
 80074b0:	080074e7 	.word	0x080074e7
 80074b4:	080074e7 	.word	0x080074e7
 80074b8:	080074e7 	.word	0x080074e7
 80074bc:	080074df 	.word	0x080074df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074c0:	f7fc fc0e 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 80074c4:	61f8      	str	r0, [r7, #28]
        break;
 80074c6:	e014      	b.n	80074f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074c8:	f7fc fc20 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 80074cc:	61f8      	str	r0, [r7, #28]
        break;
 80074ce:	e010      	b.n	80074f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074d0:	4b4d      	ldr	r3, [pc, #308]	@ (8007608 <UART_SetConfig+0x56c>)
 80074d2:	61fb      	str	r3, [r7, #28]
        break;
 80074d4:	e00d      	b.n	80074f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80074d6:	f7fc fb6b 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 80074da:	61f8      	str	r0, [r7, #28]
        break;
 80074dc:	e009      	b.n	80074f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074e2:	61fb      	str	r3, [r7, #28]
        break;
 80074e4:	e005      	b.n	80074f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80074f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074f2:	69fb      	ldr	r3, [r7, #28]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d077      	beq.n	80075e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	005a      	lsls	r2, r3, #1
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	085b      	lsrs	r3, r3, #1
 8007502:	441a      	add	r2, r3
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	fbb2 f3f3 	udiv	r3, r2, r3
 800750c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b0f      	cmp	r3, #15
 8007512:	d916      	bls.n	8007542 <UART_SetConfig+0x4a6>
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800751a:	d212      	bcs.n	8007542 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	b29b      	uxth	r3, r3
 8007520:	f023 030f 	bic.w	r3, r3, #15
 8007524:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	085b      	lsrs	r3, r3, #1
 800752a:	b29b      	uxth	r3, r3
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	b29a      	uxth	r2, r3
 8007532:	8afb      	ldrh	r3, [r7, #22]
 8007534:	4313      	orrs	r3, r2
 8007536:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	8afa      	ldrh	r2, [r7, #22]
 800753e:	60da      	str	r2, [r3, #12]
 8007540:	e052      	b.n	80075e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007548:	e04e      	b.n	80075e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800754a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800754e:	2b08      	cmp	r3, #8
 8007550:	d827      	bhi.n	80075a2 <UART_SetConfig+0x506>
 8007552:	a201      	add	r2, pc, #4	@ (adr r2, 8007558 <UART_SetConfig+0x4bc>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	0800757d 	.word	0x0800757d
 800755c:	08007585 	.word	0x08007585
 8007560:	0800758d 	.word	0x0800758d
 8007564:	080075a3 	.word	0x080075a3
 8007568:	08007593 	.word	0x08007593
 800756c:	080075a3 	.word	0x080075a3
 8007570:	080075a3 	.word	0x080075a3
 8007574:	080075a3 	.word	0x080075a3
 8007578:	0800759b 	.word	0x0800759b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800757c:	f7fc fbb0 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8007580:	61f8      	str	r0, [r7, #28]
        break;
 8007582:	e014      	b.n	80075ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007584:	f7fc fbc2 	bl	8003d0c <HAL_RCC_GetPCLK2Freq>
 8007588:	61f8      	str	r0, [r7, #28]
        break;
 800758a:	e010      	b.n	80075ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800758c:	4b1e      	ldr	r3, [pc, #120]	@ (8007608 <UART_SetConfig+0x56c>)
 800758e:	61fb      	str	r3, [r7, #28]
        break;
 8007590:	e00d      	b.n	80075ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007592:	f7fc fb0d 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8007596:	61f8      	str	r0, [r7, #28]
        break;
 8007598:	e009      	b.n	80075ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800759a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800759e:	61fb      	str	r3, [r7, #28]
        break;
 80075a0:	e005      	b.n	80075ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80075ac:	bf00      	nop
    }

    if (pclk != 0U)
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d019      	beq.n	80075e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	085a      	lsrs	r2, r3, #1
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	441a      	add	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	2b0f      	cmp	r3, #15
 80075cc:	d909      	bls.n	80075e2 <UART_SetConfig+0x546>
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075d4:	d205      	bcs.n	80075e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	b29a      	uxth	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60da      	str	r2, [r3, #12]
 80075e0:	e002      	b.n	80075e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80075f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3728      	adds	r7, #40	@ 0x28
 80075fc:	46bd      	mov	sp, r7
 80075fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007602:	bf00      	nop
 8007604:	40008000 	.word	0x40008000
 8007608:	00f42400 	.word	0x00f42400

0800760c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007618:	f003 0308 	and.w	r3, r3, #8
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00a      	beq.n	8007636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763a:	f003 0301 	and.w	r3, r3, #1
 800763e:	2b00      	cmp	r3, #0
 8007640:	d00a      	beq.n	8007658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	430a      	orrs	r2, r1
 8007656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	f003 0302 	and.w	r3, r3, #2
 8007660:	2b00      	cmp	r3, #0
 8007662:	d00a      	beq.n	800767a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800767e:	f003 0304 	and.w	r3, r3, #4
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00a      	beq.n	800769c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	430a      	orrs	r2, r1
 800769a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a0:	f003 0310 	and.w	r3, r3, #16
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00a      	beq.n	80076be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076c2:	f003 0320 	and.w	r3, r3, #32
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00a      	beq.n	80076e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	430a      	orrs	r2, r1
 80076de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01a      	beq.n	8007722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800770a:	d10a      	bne.n	8007722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b098      	sub	sp, #96	@ 0x60
 8007754:	af02      	add	r7, sp, #8
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007760:	f7fa f9d8 	bl	8001b14 <HAL_GetTick>
 8007764:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f003 0308 	and.w	r3, r3, #8
 8007770:	2b08      	cmp	r3, #8
 8007772:	d12e      	bne.n	80077d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007774:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800777c:	2200      	movs	r2, #0
 800777e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 f88c 	bl	80078a0 <UART_WaitOnFlagUntilTimeout>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d021      	beq.n	80077d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007796:	e853 3f00 	ldrex	r3, [r3]
 800779a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800779c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800779e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80077ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80077b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077b4:	e841 2300 	strex	r3, r2, [r1]
 80077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e6      	bne.n	800778e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	e062      	b.n	8007898 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d149      	bne.n	8007874 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80077e4:	9300      	str	r3, [sp, #0]
 80077e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e8:	2200      	movs	r2, #0
 80077ea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f856 	bl	80078a0 <UART_WaitOnFlagUntilTimeout>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d03c      	beq.n	8007874 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	e853 3f00 	ldrex	r3, [r3]
 8007806:	623b      	str	r3, [r7, #32]
   return(result);
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800780e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007818:	633b      	str	r3, [r7, #48]	@ 0x30
 800781a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800781e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007820:	e841 2300 	strex	r3, r2, [r1]
 8007824:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1e6      	bne.n	80077fa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	3308      	adds	r3, #8
 8007832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	e853 3f00 	ldrex	r3, [r3]
 800783a:	60fb      	str	r3, [r7, #12]
   return(result);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0301 	bic.w	r3, r3, #1
 8007842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800784c:	61fa      	str	r2, [r7, #28]
 800784e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007850:	69b9      	ldr	r1, [r7, #24]
 8007852:	69fa      	ldr	r2, [r7, #28]
 8007854:	e841 2300 	strex	r3, r2, [r1]
 8007858:	617b      	str	r3, [r7, #20]
   return(result);
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1e5      	bne.n	800782c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2220      	movs	r2, #32
 8007864:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007870:	2303      	movs	r3, #3
 8007872:	e011      	b.n	8007898 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2220      	movs	r2, #32
 800787e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2200      	movs	r2, #0
 8007886:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3758      	adds	r7, #88	@ 0x58
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	4613      	mov	r3, r2
 80078ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078b0:	e04f      	b.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078b2:	69bb      	ldr	r3, [r7, #24]
 80078b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078b8:	d04b      	beq.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ba:	f7fa f92b 	bl	8001b14 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	69ba      	ldr	r2, [r7, #24]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d302      	bcc.n	80078d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d101      	bne.n	80078d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078d0:	2303      	movs	r3, #3
 80078d2:	e04e      	b.n	8007972 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f003 0304 	and.w	r3, r3, #4
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d037      	beq.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b80      	cmp	r3, #128	@ 0x80
 80078e6:	d034      	beq.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	2b40      	cmp	r3, #64	@ 0x40
 80078ec:	d031      	beq.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b08      	cmp	r3, #8
 80078fa:	d110      	bne.n	800791e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2208      	movs	r2, #8
 8007902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007904:	68f8      	ldr	r0, [r7, #12]
 8007906:	f000 f8ff 	bl	8007b08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2208      	movs	r2, #8
 800790e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e029      	b.n	8007972 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69db      	ldr	r3, [r3, #28]
 8007924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800792c:	d111      	bne.n	8007952 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007936:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f000 f8e5 	bl	8007b08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2220      	movs	r2, #32
 8007942:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800794e:	2303      	movs	r3, #3
 8007950:	e00f      	b.n	8007972 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	4013      	ands	r3, r2
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	429a      	cmp	r2, r3
 8007960:	bf0c      	ite	eq
 8007962:	2301      	moveq	r3, #1
 8007964:	2300      	movne	r3, #0
 8007966:	b2db      	uxtb	r3, r3
 8007968:	461a      	mov	r2, r3
 800796a:	79fb      	ldrb	r3, [r7, #7]
 800796c:	429a      	cmp	r2, r3
 800796e:	d0a0      	beq.n	80078b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800797c:	b480      	push	{r7}
 800797e:	b097      	sub	sp, #92	@ 0x5c
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	4613      	mov	r3, r2
 8007988:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	68ba      	ldr	r2, [r7, #8]
 800798e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	88fa      	ldrh	r2, [r7, #6]
 8007994:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	88fa      	ldrh	r2, [r7, #6]
 800799c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079ae:	d10e      	bne.n	80079ce <UART_Start_Receive_IT+0x52>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d105      	bne.n	80079c4 <UART_Start_Receive_IT+0x48>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80079be:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80079c2:	e02d      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	22ff      	movs	r2, #255	@ 0xff
 80079c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80079cc:	e028      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	689b      	ldr	r3, [r3, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10d      	bne.n	80079f2 <UART_Start_Receive_IT+0x76>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d104      	bne.n	80079e8 <UART_Start_Receive_IT+0x6c>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	22ff      	movs	r2, #255	@ 0xff
 80079e2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80079e6:	e01b      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	227f      	movs	r2, #127	@ 0x7f
 80079ec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80079f0:	e016      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fa:	d10d      	bne.n	8007a18 <UART_Start_Receive_IT+0x9c>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d104      	bne.n	8007a0e <UART_Start_Receive_IT+0x92>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	227f      	movs	r2, #127	@ 0x7f
 8007a08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a0c:	e008      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	223f      	movs	r2, #63	@ 0x3f
 8007a12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8007a16:	e003      	b.n	8007a20 <UART_Start_Receive_IT+0xa4>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2222      	movs	r2, #34	@ 0x22
 8007a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3308      	adds	r3, #8
 8007a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a3a:	e853 3f00 	ldrex	r3, [r3]
 8007a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a42:	f043 0301 	orr.w	r3, r3, #1
 8007a46:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	3308      	adds	r3, #8
 8007a4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a50:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007a52:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007a58:	e841 2300 	strex	r3, r2, [r1]
 8007a5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1e5      	bne.n	8007a30 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a6c:	d107      	bne.n	8007a7e <UART_Start_Receive_IT+0x102>
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d103      	bne.n	8007a7e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4a21      	ldr	r2, [pc, #132]	@ (8007b00 <UART_Start_Receive_IT+0x184>)
 8007a7a:	669a      	str	r2, [r3, #104]	@ 0x68
 8007a7c:	e002      	b.n	8007a84 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	4a20      	ldr	r2, [pc, #128]	@ (8007b04 <UART_Start_Receive_IT+0x188>)
 8007a82:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d019      	beq.n	8007ac0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8007aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007aaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007ab0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007ab8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e6      	bne.n	8007a8c <UART_Start_Receive_IT+0x110>
 8007abe:	e018      	b.n	8007af2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	e853 3f00 	ldrex	r3, [r3]
 8007acc:	613b      	str	r3, [r7, #16]
   return(result);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f043 0320 	orr.w	r3, r3, #32
 8007ad4:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ade:	623b      	str	r3, [r7, #32]
 8007ae0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	69f9      	ldr	r1, [r7, #28]
 8007ae4:	6a3a      	ldr	r2, [r7, #32]
 8007ae6:	e841 2300 	strex	r3, r2, [r1]
 8007aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d1e6      	bne.n	8007ac0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007af2:	2300      	movs	r3, #0
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	375c      	adds	r7, #92	@ 0x5c
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	08007e0d 	.word	0x08007e0d
 8007b04:	08007c51 	.word	0x08007c51

08007b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b095      	sub	sp, #84	@ 0x54
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d1e6      	bne.n	8007b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3308      	adds	r3, #8
 8007b48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	6a3b      	ldr	r3, [r7, #32]
 8007b4c:	e853 3f00 	ldrex	r3, [r3]
 8007b50:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b6a:	e841 2300 	strex	r3, r2, [r1]
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1e5      	bne.n	8007b42 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d118      	bne.n	8007bb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f023 0310 	bic.w	r3, r3, #16
 8007b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6979      	ldr	r1, [r7, #20]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e6      	bne.n	8007b7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007bc4:	bf00      	nop
 8007bc6:	3754      	adds	r7, #84	@ 0x54
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bee:	68f8      	ldr	r0, [r7, #12]
 8007bf0:	f7ff fa3e 	bl	8007070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	e853 3f00 	ldrex	r3, [r3]
 8007c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c18:	61fb      	str	r3, [r7, #28]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	61bb      	str	r3, [r7, #24]
 8007c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c26:	6979      	ldr	r1, [r7, #20]
 8007c28:	69ba      	ldr	r2, [r7, #24]
 8007c2a:	e841 2300 	strex	r3, r2, [r1]
 8007c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1e6      	bne.n	8007c04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f7ff fa0a 	bl	800705c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c48:	bf00      	nop
 8007c4a:	3720      	adds	r7, #32
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}

08007c50 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b09c      	sub	sp, #112	@ 0x70
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c5e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c68:	2b22      	cmp	r3, #34	@ 0x22
 8007c6a:	f040 80be 	bne.w	8007dea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c78:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007c7c:	b2d9      	uxtb	r1, r3
 8007c7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c82:	b2da      	uxtb	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c88:	400a      	ands	r2, r1
 8007c8a:	b2d2      	uxtb	r2, r2
 8007c8c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	b29a      	uxth	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f040 80a3 	bne.w	8007dfe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cdc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ce4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e6      	bne.n	8007cb8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfc:	f023 0301 	bic.w	r3, r3, #1
 8007d00:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007d0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007d0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2220      	movs	r2, #32
 8007d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a34      	ldr	r2, [pc, #208]	@ (8007e08 <UART_RxISR_8BIT+0x1b8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d01f      	beq.n	8007d7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d018      	beq.n	8007d7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	623b      	str	r3, [r7, #32]
   return(result);
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d68:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d70:	e841 2300 	strex	r3, r2, [r1]
 8007d74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d1e6      	bne.n	8007d4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d12e      	bne.n	8007de2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2200      	movs	r2, #0
 8007d88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0310 	bic.w	r3, r3, #16
 8007d9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007da8:	61fb      	str	r3, [r7, #28]
 8007daa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	69b9      	ldr	r1, [r7, #24]
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	617b      	str	r3, [r7, #20]
   return(result);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e6      	bne.n	8007d8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f003 0310 	and.w	r3, r3, #16
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	d103      	bne.n	8007dd2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2210      	movs	r2, #16
 8007dd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007dd8:	4619      	mov	r1, r3
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f7ff f952 	bl	8007084 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007de0:	e00d      	b.n	8007dfe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f7f8 fc9a 	bl	800071c <HAL_UART_RxCpltCallback>
}
 8007de8:	e009      	b.n	8007dfe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	8b1b      	ldrh	r3, [r3, #24]
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f042 0208 	orr.w	r2, r2, #8
 8007dfa:	b292      	uxth	r2, r2
 8007dfc:	831a      	strh	r2, [r3, #24]
}
 8007dfe:	bf00      	nop
 8007e00:	3770      	adds	r7, #112	@ 0x70
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	40008000 	.word	0x40008000

08007e0c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b09c      	sub	sp, #112	@ 0x70
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007e1a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e24:	2b22      	cmp	r3, #34	@ 0x22
 8007e26:	f040 80be 	bne.w	8007fa6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e30:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e38:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007e3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007e3e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007e42:	4013      	ands	r3, r2
 8007e44:	b29a      	uxth	r2, r3
 8007e46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e4e:	1c9a      	adds	r2, r3, #2
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b01      	subs	r3, #1
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f040 80a3 	bne.w	8007fba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e7c:	e853 3f00 	ldrex	r3, [r3]
 8007e80:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e88:	667b      	str	r3, [r7, #100]	@ 0x64
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007e92:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e94:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e96:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007e9a:	e841 2300 	strex	r3, r2, [r1]
 8007e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d1e6      	bne.n	8007e74 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	3308      	adds	r3, #8
 8007eac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eb0:	e853 3f00 	ldrex	r3, [r3]
 8007eb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	f023 0301 	bic.w	r3, r3, #1
 8007ebc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	3308      	adds	r3, #8
 8007ec4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007ecc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e5      	bne.n	8007ea6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a34      	ldr	r2, [pc, #208]	@ (8007fc4 <UART_RxISR_16BIT+0x1b8>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d01f      	beq.n	8007f38 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d018      	beq.n	8007f38 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0c:	6a3b      	ldr	r3, [r7, #32]
 8007f0e:	e853 3f00 	ldrex	r3, [r3]
 8007f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	461a      	mov	r2, r3
 8007f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f26:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f2c:	e841 2300 	strex	r3, r2, [r1]
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e6      	bne.n	8007f06 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d12e      	bne.n	8007f9e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	e853 3f00 	ldrex	r3, [r3]
 8007f52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f023 0310 	bic.w	r3, r3, #16
 8007f5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	461a      	mov	r2, r3
 8007f62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	6979      	ldr	r1, [r7, #20]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	613b      	str	r3, [r7, #16]
   return(result);
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e6      	bne.n	8007f46 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	f003 0310 	and.w	r3, r3, #16
 8007f82:	2b10      	cmp	r3, #16
 8007f84:	d103      	bne.n	8007f8e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2210      	movs	r2, #16
 8007f8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007f94:	4619      	mov	r1, r3
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff f874 	bl	8007084 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f9c:	e00d      	b.n	8007fba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f7f8 fbbc 	bl	800071c <HAL_UART_RxCpltCallback>
}
 8007fa4:	e009      	b.n	8007fba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	8b1b      	ldrh	r3, [r3, #24]
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0208 	orr.w	r2, r2, #8
 8007fb6:	b292      	uxth	r2, r2
 8007fb8:	831a      	strh	r2, [r3, #24]
}
 8007fba:	bf00      	nop
 8007fbc:	3770      	adds	r7, #112	@ 0x70
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	40008000 	.word	0x40008000

08007fc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fee:	2b84      	cmp	r3, #132	@ 0x84
 8007ff0:	d005      	beq.n	8007ffe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007ff2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	3303      	adds	r3, #3
 8007ffc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008010:	f000 fdca 	bl	8008ba8 <vTaskStartScheduler>
  
  return osOK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	bd80      	pop	{r7, pc}

0800801a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800801a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800801c:	b089      	sub	sp, #36	@ 0x24
 800801e:	af04      	add	r7, sp, #16
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d020      	beq.n	800806e <osThreadCreate+0x54>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d01c      	beq.n	800806e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685c      	ldr	r4, [r3, #4]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691e      	ldr	r6, [r3, #16]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff ffc8 	bl	8007fdc <makeFreeRtosPriority>
 800804c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008056:	9202      	str	r2, [sp, #8]
 8008058:	9301      	str	r3, [sp, #4]
 800805a:	9100      	str	r1, [sp, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	4632      	mov	r2, r6
 8008060:	4629      	mov	r1, r5
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fbd2 	bl	800880c <xTaskCreateStatic>
 8008068:	4603      	mov	r3, r0
 800806a:	60fb      	str	r3, [r7, #12]
 800806c:	e01c      	b.n	80080a8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	685c      	ldr	r4, [r3, #4]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800807a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff ffaa 	bl	8007fdc <makeFreeRtosPriority>
 8008088:	4602      	mov	r2, r0
 800808a:	f107 030c 	add.w	r3, r7, #12
 800808e:	9301      	str	r3, [sp, #4]
 8008090:	9200      	str	r2, [sp, #0]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	4632      	mov	r2, r6
 8008096:	4629      	mov	r1, r5
 8008098:	4620      	mov	r0, r4
 800809a:	f000 fc17 	bl	80088cc <xTaskCreate>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80080a4:	2300      	movs	r3, #0
 80080a6:	e000      	b.n	80080aa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80080a8:	68fb      	ldr	r3, [r7, #12]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3714      	adds	r7, #20
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080080b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b084      	sub	sp, #16
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <osDelay+0x16>
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	e000      	b.n	80080ca <osDelay+0x18>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4618      	mov	r0, r3
 80080cc:	f000 fd36 	bl	8008b3c <vTaskDelay>
  
  return osOK;
 80080d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3710      	adds	r7, #16
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}

080080da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80080da:	b480      	push	{r7}
 80080dc:	b083      	sub	sp, #12
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f103 0208 	add.w	r2, r3, #8
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f04f 32ff 	mov.w	r2, #4294967295
 80080f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f103 0208 	add.w	r2, r3, #8
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f103 0208 	add.w	r2, r3, #8
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	683a      	ldr	r2, [r7, #0]
 800815e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	687a      	ldr	r2, [r7, #4]
 8008164:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	601a      	str	r2, [r3, #0]
}
 8008170:	bf00      	nop
 8008172:	3714      	adds	r7, #20
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008192:	d103      	bne.n	800819c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	60fb      	str	r3, [r7, #12]
 800819a:	e00c      	b.n	80081b6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	3308      	adds	r3, #8
 80081a0:	60fb      	str	r3, [r7, #12]
 80081a2:	e002      	b.n	80081aa <vListInsert+0x2e>
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	60fb      	str	r3, [r7, #12]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d2f6      	bcs.n	80081a4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	685a      	ldr	r2, [r3, #4]
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	68fa      	ldr	r2, [r7, #12]
 80081ca:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	687a      	ldr	r2, [r7, #4]
 80081d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	1c5a      	adds	r2, r3, #1
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]
}
 80081e2:	bf00      	nop
 80081e4:	3714      	adds	r7, #20
 80081e6:	46bd      	mov	sp, r7
 80081e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ec:	4770      	bx	lr

080081ee <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80081ee:	b480      	push	{r7}
 80081f0:	b085      	sub	sp, #20
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6892      	ldr	r2, [r2, #8]
 8008204:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	687a      	ldr	r2, [r7, #4]
 800820c:	6852      	ldr	r2, [r2, #4]
 800820e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	429a      	cmp	r2, r3
 8008218:	d103      	bne.n	8008222 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	689a      	ldr	r2, [r3, #8]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	1e5a      	subs	r2, r3, #1
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
	...

08008244 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
 800824c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d10b      	bne.n	8008270 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800825c:	f383 8811 	msr	BASEPRI, r3
 8008260:	f3bf 8f6f 	isb	sy
 8008264:	f3bf 8f4f 	dsb	sy
 8008268:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	e7fd      	b.n	800826c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008270:	f001 fb72 	bl	8009958 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800827c:	68f9      	ldr	r1, [r7, #12]
 800827e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008280:	fb01 f303 	mul.w	r3, r1, r3
 8008284:	441a      	add	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	2200      	movs	r2, #0
 800828e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a0:	3b01      	subs	r3, #1
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082a6:	fb01 f303 	mul.w	r3, r1, r3
 80082aa:	441a      	add	r2, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	22ff      	movs	r2, #255	@ 0xff
 80082b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	22ff      	movs	r2, #255	@ 0xff
 80082bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d114      	bne.n	80082f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01a      	beq.n	8008304 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	3310      	adds	r3, #16
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 feb2 	bl	800903c <xTaskRemoveFromEventList>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d012      	beq.n	8008304 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80082de:	4b0d      	ldr	r3, [pc, #52]	@ (8008314 <xQueueGenericReset+0xd0>)
 80082e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	e009      	b.n	8008304 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	3310      	adds	r3, #16
 80082f4:	4618      	mov	r0, r3
 80082f6:	f7ff fef0 	bl	80080da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3324      	adds	r3, #36	@ 0x24
 80082fe:	4618      	mov	r0, r3
 8008300:	f7ff feeb 	bl	80080da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008304:	f001 fb5a 	bl	80099bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008308:	2301      	movs	r3, #1
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	e000ed04 	.word	0xe000ed04

08008318 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08a      	sub	sp, #40	@ 0x28
 800831c:	af02      	add	r7, sp, #8
 800831e:	60f8      	str	r0, [r7, #12]
 8008320:	60b9      	str	r1, [r7, #8]
 8008322:	4613      	mov	r3, r2
 8008324:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10b      	bne.n	8008344 <xQueueGenericCreate+0x2c>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	613b      	str	r3, [r7, #16]
}
 800833e:	bf00      	nop
 8008340:	bf00      	nop
 8008342:	e7fd      	b.n	8008340 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	68ba      	ldr	r2, [r7, #8]
 8008348:	fb02 f303 	mul.w	r3, r2, r3
 800834c:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	3348      	adds	r3, #72	@ 0x48
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fc22 	bl	8009b9c <pvPortMalloc>
 8008358:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800835a:	69bb      	ldr	r3, [r7, #24]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d011      	beq.n	8008384 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	3348      	adds	r3, #72	@ 0x48
 8008368:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800836a:	69bb      	ldr	r3, [r7, #24]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008372:	79fa      	ldrb	r2, [r7, #7]
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4613      	mov	r3, r2
 800837a:	697a      	ldr	r2, [r7, #20]
 800837c:	68b9      	ldr	r1, [r7, #8]
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 f805 	bl	800838e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008384:	69bb      	ldr	r3, [r7, #24]
	}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	60f8      	str	r0, [r7, #12]
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
 800839a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d103      	bne.n	80083aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80083a2:	69bb      	ldr	r3, [r7, #24]
 80083a4:	69ba      	ldr	r2, [r7, #24]
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	e002      	b.n	80083b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80083bc:	2101      	movs	r1, #1
 80083be:	69b8      	ldr	r0, [r7, #24]
 80083c0:	f7ff ff40 	bl	8008244 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08e      	sub	sp, #56	@ 0x38
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80083da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d10b      	bne.n	80083f8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	623b      	str	r3, [r7, #32]
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	e7fd      	b.n	80083f4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008404:	f383 8811 	msr	BASEPRI, r3
 8008408:	f3bf 8f6f 	isb	sy
 800840c:	f3bf 8f4f 	dsb	sy
 8008410:	61fb      	str	r3, [r7, #28]
}
 8008412:	bf00      	nop
 8008414:	bf00      	nop
 8008416:	e7fd      	b.n	8008414 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <xQueueGiveFromISR+0x5c>
 8008420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d101      	bne.n	800842c <xQueueGiveFromISR+0x60>
 8008428:	2301      	movs	r3, #1
 800842a:	e000      	b.n	800842e <xQueueGiveFromISR+0x62>
 800842c:	2300      	movs	r3, #0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10b      	bne.n	800844a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	61bb      	str	r3, [r7, #24]
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	e7fd      	b.n	8008446 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800844a:	f001 fb65 	bl	8009b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800844e:	f3ef 8211 	mrs	r2, BASEPRI
 8008452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	617a      	str	r2, [r7, #20]
 8008464:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008466:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008468:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800846a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800846c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800846e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008472:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008474:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008476:	429a      	cmp	r2, r3
 8008478:	d22b      	bcs.n	80084d2 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800847a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800848c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008494:	d112      	bne.n	80084bc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800849a:	2b00      	cmp	r3, #0
 800849c:	d016      	beq.n	80084cc <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800849e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084a0:	3324      	adds	r3, #36	@ 0x24
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fdca 	bl	800903c <xTaskRemoveFromEventList>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00e      	beq.n	80084cc <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00b      	beq.n	80084cc <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	2201      	movs	r2, #1
 80084b8:	601a      	str	r2, [r3, #0]
 80084ba:	e007      	b.n	80084cc <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084c0:	3301      	adds	r3, #1
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	b25a      	sxtb	r2, r3
 80084c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80084cc:	2301      	movs	r3, #1
 80084ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d0:	e001      	b.n	80084d6 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084d2:	2300      	movs	r3, #0
 80084d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80084d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084d8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3738      	adds	r7, #56	@ 0x38
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b08e      	sub	sp, #56	@ 0x38
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80084fe:	2300      	movs	r3, #0
 8008500:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008504:	2b00      	cmp	r3, #0
 8008506:	d10b      	bne.n	8008520 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	623b      	str	r3, [r7, #32]
}
 800851a:	bf00      	nop
 800851c:	bf00      	nop
 800851e:	e7fd      	b.n	800851c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00b      	beq.n	8008540 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852c:	f383 8811 	msr	BASEPRI, r3
 8008530:	f3bf 8f6f 	isb	sy
 8008534:	f3bf 8f4f 	dsb	sy
 8008538:	61fb      	str	r3, [r7, #28]
}
 800853a:	bf00      	nop
 800853c:	bf00      	nop
 800853e:	e7fd      	b.n	800853c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008540:	f000 ff3c 	bl	80093bc <xTaskGetSchedulerState>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <xQueueSemaphoreTake+0x64>
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <xQueueSemaphoreTake+0x68>
 8008550:	2301      	movs	r3, #1
 8008552:	e000      	b.n	8008556 <xQueueSemaphoreTake+0x6a>
 8008554:	2300      	movs	r3, #0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10b      	bne.n	8008572 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	61bb      	str	r3, [r7, #24]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008572:	f001 f9f1 	bl	8009958 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008578:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800857a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800857c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800857e:	2b00      	cmp	r3, #0
 8008580:	d024      	beq.n	80085cc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	1e5a      	subs	r2, r3, #1
 8008586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008588:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800858a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d104      	bne.n	800859c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008592:	f001 f837 	bl	8009604 <pvTaskIncrementMutexHeldCount>
 8008596:	4602      	mov	r2, r0
 8008598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800859c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00f      	beq.n	80085c4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a6:	3310      	adds	r3, #16
 80085a8:	4618      	mov	r0, r3
 80085aa:	f000 fd47 	bl	800903c <xTaskRemoveFromEventList>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d007      	beq.n	80085c4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085b4:	4b54      	ldr	r3, [pc, #336]	@ (8008708 <xQueueSemaphoreTake+0x21c>)
 80085b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085c4:	f001 f9fa 	bl	80099bc <vPortExitCritical>
				return pdPASS;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e098      	b.n	80086fe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d112      	bne.n	80085f8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80085d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80085d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085dc:	f383 8811 	msr	BASEPRI, r3
 80085e0:	f3bf 8f6f 	isb	sy
 80085e4:	f3bf 8f4f 	dsb	sy
 80085e8:	617b      	str	r3, [r7, #20]
}
 80085ea:	bf00      	nop
 80085ec:	bf00      	nop
 80085ee:	e7fd      	b.n	80085ec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80085f0:	f001 f9e4 	bl	80099bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085f4:	2300      	movs	r3, #0
 80085f6:	e082      	b.n	80086fe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d106      	bne.n	800860c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085fe:	f107 030c 	add.w	r3, r7, #12
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fd7e 	bl	8009104 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008608:	2301      	movs	r3, #1
 800860a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800860c:	f001 f9d6 	bl	80099bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008610:	f000 fb2c 	bl	8008c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008614:	f001 f9a0 	bl	8009958 <vPortEnterCritical>
 8008618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800861a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800861e:	b25b      	sxtb	r3, r3
 8008620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008624:	d103      	bne.n	800862e <xQueueSemaphoreTake+0x142>
 8008626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800862e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008630:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008634:	b25b      	sxtb	r3, r3
 8008636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800863a:	d103      	bne.n	8008644 <xQueueSemaphoreTake+0x158>
 800863c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863e:	2200      	movs	r2, #0
 8008640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008644:	f001 f9ba 	bl	80099bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008648:	463a      	mov	r2, r7
 800864a:	f107 030c 	add.w	r3, r7, #12
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fd6d 	bl	8009130 <xTaskCheckForTimeOut>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d132      	bne.n	80086c2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800865c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800865e:	f000 f8bf 	bl	80087e0 <prvIsQueueEmpty>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d026      	beq.n	80086b6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d109      	bne.n	8008684 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8008670:	f001 f972 	bl	8009958 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	4618      	mov	r0, r3
 800867a:	f000 febd 	bl	80093f8 <xTaskPriorityInherit>
 800867e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8008680:	f001 f99c 	bl	80099bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008686:	3324      	adds	r3, #36	@ 0x24
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	4611      	mov	r1, r2
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fcaf 	bl	8008ff0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008692:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008694:	f000 f852 	bl	800873c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008698:	f000 faf6 	bl	8008c88 <xTaskResumeAll>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f47f af67 	bne.w	8008572 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80086a4:	4b18      	ldr	r3, [pc, #96]	@ (8008708 <xQueueSemaphoreTake+0x21c>)
 80086a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	e75d      	b.n	8008572 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80086b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086b8:	f000 f840 	bl	800873c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086bc:	f000 fae4 	bl	8008c88 <xTaskResumeAll>
 80086c0:	e757      	b.n	8008572 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80086c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086c4:	f000 f83a 	bl	800873c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086c8:	f000 fade 	bl	8008c88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086ce:	f000 f887 	bl	80087e0 <prvIsQueueEmpty>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f43f af4c 	beq.w	8008572 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80086da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00d      	beq.n	80086fc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80086e0:	f001 f93a 	bl	8009958 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80086e4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086e6:	f000 f811 	bl	800870c <prvGetDisinheritPriorityAfterTimeout>
 80086ea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80086ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80086f2:	4618      	mov	r0, r3
 80086f4:	f000 fef6 	bl	80094e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80086f8:	f001 f960 	bl	80099bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3738      	adds	r7, #56	@ 0x38
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	e000ed04 	.word	0xe000ed04

0800870c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	d006      	beq.n	800872a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f1c3 0307 	rsb	r3, r3, #7
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	e001      	b.n	800872e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800872e:	68fb      	ldr	r3, [r7, #12]
	}
 8008730:	4618      	mov	r0, r3
 8008732:	3714      	adds	r7, #20
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008744:	f001 f908 	bl	8009958 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800874e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008750:	e011      	b.n	8008776 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008756:	2b00      	cmp	r3, #0
 8008758:	d012      	beq.n	8008780 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3324      	adds	r3, #36	@ 0x24
 800875e:	4618      	mov	r0, r3
 8008760:	f000 fc6c 	bl	800903c <xTaskRemoveFromEventList>
 8008764:	4603      	mov	r3, r0
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800876a:	f000 fd45 	bl	80091f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
 8008770:	3b01      	subs	r3, #1
 8008772:	b2db      	uxtb	r3, r3
 8008774:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800877a:	2b00      	cmp	r3, #0
 800877c:	dce9      	bgt.n	8008752 <prvUnlockQueue+0x16>
 800877e:	e000      	b.n	8008782 <prvUnlockQueue+0x46>
					break;
 8008780:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	22ff      	movs	r2, #255	@ 0xff
 8008786:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800878a:	f001 f917 	bl	80099bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800878e:	f001 f8e3 	bl	8009958 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008798:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800879a:	e011      	b.n	80087c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d012      	beq.n	80087ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	3310      	adds	r3, #16
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 fc47 	bl	800903c <xTaskRemoveFromEventList>
 80087ae:	4603      	mov	r3, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d001      	beq.n	80087b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80087b4:	f000 fd20 	bl	80091f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80087b8:	7bbb      	ldrb	r3, [r7, #14]
 80087ba:	3b01      	subs	r3, #1
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80087c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	dce9      	bgt.n	800879c <prvUnlockQueue+0x60>
 80087c8:	e000      	b.n	80087cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80087ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	22ff      	movs	r2, #255	@ 0xff
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80087d4:	f001 f8f2 	bl	80099bc <vPortExitCritical>
}
 80087d8:	bf00      	nop
 80087da:	3710      	adds	r7, #16
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80087e8:	f001 f8b6 	bl	8009958 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d102      	bne.n	80087fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80087f4:	2301      	movs	r3, #1
 80087f6:	60fb      	str	r3, [r7, #12]
 80087f8:	e001      	b.n	80087fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80087fe:	f001 f8dd 	bl	80099bc <vPortExitCritical>

	return xReturn;
 8008802:	68fb      	ldr	r3, [r7, #12]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08e      	sub	sp, #56	@ 0x38
 8008810:	af04      	add	r7, sp, #16
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800881a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	d10b      	bne.n	8008838 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	623b      	str	r3, [r7, #32]
}
 8008832:	bf00      	nop
 8008834:	bf00      	nop
 8008836:	e7fd      	b.n	8008834 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	2b00      	cmp	r3, #0
 800883c:	d10b      	bne.n	8008856 <xTaskCreateStatic+0x4a>
	__asm volatile
 800883e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008842:	f383 8811 	msr	BASEPRI, r3
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	f3bf 8f4f 	dsb	sy
 800884e:	61fb      	str	r3, [r7, #28]
}
 8008850:	bf00      	nop
 8008852:	bf00      	nop
 8008854:	e7fd      	b.n	8008852 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008856:	2354      	movs	r3, #84	@ 0x54
 8008858:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800885a:	693b      	ldr	r3, [r7, #16]
 800885c:	2b54      	cmp	r3, #84	@ 0x54
 800885e:	d00b      	beq.n	8008878 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008864:	f383 8811 	msr	BASEPRI, r3
 8008868:	f3bf 8f6f 	isb	sy
 800886c:	f3bf 8f4f 	dsb	sy
 8008870:	61bb      	str	r3, [r7, #24]
}
 8008872:	bf00      	nop
 8008874:	bf00      	nop
 8008876:	e7fd      	b.n	8008874 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008878:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800887a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887c:	2b00      	cmp	r3, #0
 800887e:	d01e      	beq.n	80088be <xTaskCreateStatic+0xb2>
 8008880:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01b      	beq.n	80088be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008888:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800888a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800888e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008892:	2202      	movs	r2, #2
 8008894:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008898:	2300      	movs	r3, #0
 800889a:	9303      	str	r3, [sp, #12]
 800889c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889e:	9302      	str	r3, [sp, #8]
 80088a0:	f107 0314 	add.w	r3, r7, #20
 80088a4:	9301      	str	r3, [sp, #4]
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	68b9      	ldr	r1, [r7, #8]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	f000 f850 	bl	8008956 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80088b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80088b8:	f000 f8d6 	bl	8008a68 <prvAddNewTaskToReadyList>
 80088bc:	e001      	b.n	80088c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80088c2:	697b      	ldr	r3, [r7, #20]
	}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3728      	adds	r7, #40	@ 0x28
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08c      	sub	sp, #48	@ 0x30
 80088d0:	af04      	add	r7, sp, #16
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	603b      	str	r3, [r7, #0]
 80088d8:	4613      	mov	r3, r2
 80088da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4618      	mov	r0, r3
 80088e2:	f001 f95b 	bl	8009b9c <pvPortMalloc>
 80088e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80088ee:	2054      	movs	r0, #84	@ 0x54
 80088f0:	f001 f954 	bl	8009b9c <pvPortMalloc>
 80088f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	697a      	ldr	r2, [r7, #20]
 8008900:	631a      	str	r2, [r3, #48]	@ 0x30
 8008902:	e005      	b.n	8008910 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008904:	6978      	ldr	r0, [r7, #20]
 8008906:	f001 fa17 	bl	8009d38 <vPortFree>
 800890a:	e001      	b.n	8008910 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d017      	beq.n	8008946 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	2300      	movs	r3, #0
 8008922:	9303      	str	r3, [sp, #12]
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	9302      	str	r3, [sp, #8]
 8008928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800892a:	9301      	str	r3, [sp, #4]
 800892c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892e:	9300      	str	r3, [sp, #0]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	68b9      	ldr	r1, [r7, #8]
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	f000 f80e 	bl	8008956 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800893a:	69f8      	ldr	r0, [r7, #28]
 800893c:	f000 f894 	bl	8008a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008940:	2301      	movs	r3, #1
 8008942:	61bb      	str	r3, [r7, #24]
 8008944:	e002      	b.n	800894c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008946:	f04f 33ff 	mov.w	r3, #4294967295
 800894a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800894c:	69bb      	ldr	r3, [r7, #24]
	}
 800894e:	4618      	mov	r0, r3
 8008950:	3720      	adds	r7, #32
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b088      	sub	sp, #32
 800895a:	af00      	add	r7, sp, #0
 800895c:	60f8      	str	r0, [r7, #12]
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	607a      	str	r2, [r7, #4]
 8008962:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008966:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800896e:	3b01      	subs	r3, #1
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	f023 0307 	bic.w	r3, r3, #7
 800897c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00b      	beq.n	80089a0 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	617b      	str	r3, [r7, #20]
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	e7fd      	b.n	800899c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01f      	beq.n	80089e6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089a6:	2300      	movs	r3, #0
 80089a8:	61fb      	str	r3, [r7, #28]
 80089aa:	e012      	b.n	80089d2 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	4413      	add	r3, r2
 80089b2:	7819      	ldrb	r1, [r3, #0]
 80089b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	4413      	add	r3, r2
 80089ba:	3334      	adds	r3, #52	@ 0x34
 80089bc:	460a      	mov	r2, r1
 80089be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80089c0:	68ba      	ldr	r2, [r7, #8]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4413      	add	r3, r2
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d006      	beq.n	80089da <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	3301      	adds	r3, #1
 80089d0:	61fb      	str	r3, [r7, #28]
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	2b0f      	cmp	r3, #15
 80089d6:	d9e9      	bls.n	80089ac <prvInitialiseNewTask+0x56>
 80089d8:	e000      	b.n	80089dc <prvInitialiseNewTask+0x86>
			{
				break;
 80089da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80089dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089de:	2200      	movs	r2, #0
 80089e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80089e4:	e003      	b.n	80089ee <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80089e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80089ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f0:	2b06      	cmp	r3, #6
 80089f2:	d901      	bls.n	80089f8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80089f4:	2306      	movs	r3, #6
 80089f6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80089f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80089fc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80089fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a02:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a06:	2200      	movs	r2, #0
 8008a08:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a0c:	3304      	adds	r3, #4
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7ff fb83 	bl	800811a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a16:	3318      	adds	r3, #24
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff fb7e 	bl	800811a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	f1c3 0207 	rsb	r2, r3, #7
 8008a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a32:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a36:	2200      	movs	r2, #0
 8008a38:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	68f9      	ldr	r1, [r7, #12]
 8008a46:	69b8      	ldr	r0, [r7, #24]
 8008a48:	f000 fe56 	bl	80096f8 <pxPortInitialiseStack>
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d002      	beq.n	8008a5e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a5e:	bf00      	nop
 8008a60:	3720      	adds	r7, #32
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b082      	sub	sp, #8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008a70:	f000 ff72 	bl	8009958 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008a74:	4b2a      	ldr	r3, [pc, #168]	@ (8008b20 <prvAddNewTaskToReadyList+0xb8>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	4a29      	ldr	r2, [pc, #164]	@ (8008b20 <prvAddNewTaskToReadyList+0xb8>)
 8008a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008a7e:	4b29      	ldr	r3, [pc, #164]	@ (8008b24 <prvAddNewTaskToReadyList+0xbc>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d109      	bne.n	8008a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008a86:	4a27      	ldr	r2, [pc, #156]	@ (8008b24 <prvAddNewTaskToReadyList+0xbc>)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008a8c:	4b24      	ldr	r3, [pc, #144]	@ (8008b20 <prvAddNewTaskToReadyList+0xb8>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d110      	bne.n	8008ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008a94:	f000 fbd4 	bl	8009240 <prvInitialiseTaskLists>
 8008a98:	e00d      	b.n	8008ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008a9a:	4b23      	ldr	r3, [pc, #140]	@ (8008b28 <prvAddNewTaskToReadyList+0xc0>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d109      	bne.n	8008ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008aa2:	4b20      	ldr	r3, [pc, #128]	@ (8008b24 <prvAddNewTaskToReadyList+0xbc>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aac:	429a      	cmp	r2, r3
 8008aae:	d802      	bhi.n	8008ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8008b24 <prvAddNewTaskToReadyList+0xbc>)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008ab6:	4b1d      	ldr	r3, [pc, #116]	@ (8008b2c <prvAddNewTaskToReadyList+0xc4>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3301      	adds	r3, #1
 8008abc:	4a1b      	ldr	r2, [pc, #108]	@ (8008b2c <prvAddNewTaskToReadyList+0xc4>)
 8008abe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	409a      	lsls	r2, r3
 8008ac8:	4b19      	ldr	r3, [pc, #100]	@ (8008b30 <prvAddNewTaskToReadyList+0xc8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4313      	orrs	r3, r2
 8008ace:	4a18      	ldr	r2, [pc, #96]	@ (8008b30 <prvAddNewTaskToReadyList+0xc8>)
 8008ad0:	6013      	str	r3, [r2, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4a15      	ldr	r2, [pc, #84]	@ (8008b34 <prvAddNewTaskToReadyList+0xcc>)
 8008ae0:	441a      	add	r2, r3
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	4610      	mov	r0, r2
 8008aea:	f7ff fb23 	bl	8008134 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008aee:	f000 ff65 	bl	80099bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008af2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <prvAddNewTaskToReadyList+0xc0>)
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00e      	beq.n	8008b18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008afa:	4b0a      	ldr	r3, [pc, #40]	@ (8008b24 <prvAddNewTaskToReadyList+0xbc>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d207      	bcs.n	8008b18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008b08:	4b0b      	ldr	r3, [pc, #44]	@ (8008b38 <prvAddNewTaskToReadyList+0xd0>)
 8008b0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b18:	bf00      	nop
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}
 8008b20:	20000894 	.word	0x20000894
 8008b24:	20000794 	.word	0x20000794
 8008b28:	200008a0 	.word	0x200008a0
 8008b2c:	200008b0 	.word	0x200008b0
 8008b30:	2000089c 	.word	0x2000089c
 8008b34:	20000798 	.word	0x20000798
 8008b38:	e000ed04 	.word	0xe000ed04

08008b3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008b44:	2300      	movs	r3, #0
 8008b46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d018      	beq.n	8008b80 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008b4e:	4b14      	ldr	r3, [pc, #80]	@ (8008ba0 <vTaskDelay+0x64>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d00b      	beq.n	8008b6e <vTaskDelay+0x32>
	__asm volatile
 8008b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b5a:	f383 8811 	msr	BASEPRI, r3
 8008b5e:	f3bf 8f6f 	isb	sy
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	60bb      	str	r3, [r7, #8]
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	e7fd      	b.n	8008b6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008b6e:	f000 f87d 	bl	8008c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008b72:	2100      	movs	r1, #0
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fd59 	bl	800962c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008b7a:	f000 f885 	bl	8008c88 <xTaskResumeAll>
 8008b7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d107      	bne.n	8008b96 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008b86:	4b07      	ldr	r3, [pc, #28]	@ (8008ba4 <vTaskDelay+0x68>)
 8008b88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	f3bf 8f4f 	dsb	sy
 8008b92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b96:	bf00      	nop
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	200008bc 	.word	0x200008bc
 8008ba4:	e000ed04 	.word	0xe000ed04

08008ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	@ 0x28
 8008bac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008bb6:	463a      	mov	r2, r7
 8008bb8:	1d39      	adds	r1, r7, #4
 8008bba:	f107 0308 	add.w	r3, r7, #8
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7f7 fdfa 	bl	80007b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	9202      	str	r2, [sp, #8]
 8008bcc:	9301      	str	r3, [sp, #4]
 8008bce:	2300      	movs	r3, #0
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	460a      	mov	r2, r1
 8008bd6:	491f      	ldr	r1, [pc, #124]	@ (8008c54 <vTaskStartScheduler+0xac>)
 8008bd8:	481f      	ldr	r0, [pc, #124]	@ (8008c58 <vTaskStartScheduler+0xb0>)
 8008bda:	f7ff fe17 	bl	800880c <xTaskCreateStatic>
 8008bde:	4603      	mov	r3, r0
 8008be0:	4a1e      	ldr	r2, [pc, #120]	@ (8008c5c <vTaskStartScheduler+0xb4>)
 8008be2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008be4:	4b1d      	ldr	r3, [pc, #116]	@ (8008c5c <vTaskStartScheduler+0xb4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d002      	beq.n	8008bf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008bec:	2301      	movs	r3, #1
 8008bee:	617b      	str	r3, [r7, #20]
 8008bf0:	e001      	b.n	8008bf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d116      	bne.n	8008c2a <vTaskStartScheduler+0x82>
	__asm volatile
 8008bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c00:	f383 8811 	msr	BASEPRI, r3
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	f3bf 8f4f 	dsb	sy
 8008c0c:	613b      	str	r3, [r7, #16]
}
 8008c0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008c10:	4b13      	ldr	r3, [pc, #76]	@ (8008c60 <vTaskStartScheduler+0xb8>)
 8008c12:	f04f 32ff 	mov.w	r2, #4294967295
 8008c16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008c18:	4b12      	ldr	r3, [pc, #72]	@ (8008c64 <vTaskStartScheduler+0xbc>)
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008c1e:	4b12      	ldr	r3, [pc, #72]	@ (8008c68 <vTaskStartScheduler+0xc0>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008c24:	f000 fdf4 	bl	8009810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008c28:	e00f      	b.n	8008c4a <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d10b      	bne.n	8008c4a <vTaskStartScheduler+0xa2>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	60fb      	str	r3, [r7, #12]
}
 8008c44:	bf00      	nop
 8008c46:	bf00      	nop
 8008c48:	e7fd      	b.n	8008c46 <vTaskStartScheduler+0x9e>
}
 8008c4a:	bf00      	nop
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	0800b420 	.word	0x0800b420
 8008c58:	08009211 	.word	0x08009211
 8008c5c:	200008b8 	.word	0x200008b8
 8008c60:	200008b4 	.word	0x200008b4
 8008c64:	200008a0 	.word	0x200008a0
 8008c68:	20000898 	.word	0x20000898

08008c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008c70:	4b04      	ldr	r3, [pc, #16]	@ (8008c84 <vTaskSuspendAll+0x18>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	3301      	adds	r3, #1
 8008c76:	4a03      	ldr	r2, [pc, #12]	@ (8008c84 <vTaskSuspendAll+0x18>)
 8008c78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008c7a:	bf00      	nop
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	200008bc 	.word	0x200008bc

08008c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c92:	2300      	movs	r3, #0
 8008c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c96:	4b42      	ldr	r3, [pc, #264]	@ (8008da0 <xTaskResumeAll+0x118>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	603b      	str	r3, [r7, #0]
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008cb6:	f000 fe4f 	bl	8009958 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008cba:	4b39      	ldr	r3, [pc, #228]	@ (8008da0 <xTaskResumeAll+0x118>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	4a37      	ldr	r2, [pc, #220]	@ (8008da0 <xTaskResumeAll+0x118>)
 8008cc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cc4:	4b36      	ldr	r3, [pc, #216]	@ (8008da0 <xTaskResumeAll+0x118>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d161      	bne.n	8008d90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ccc:	4b35      	ldr	r3, [pc, #212]	@ (8008da4 <xTaskResumeAll+0x11c>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d05d      	beq.n	8008d90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cd4:	e02e      	b.n	8008d34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cd6:	4b34      	ldr	r3, [pc, #208]	@ (8008da8 <xTaskResumeAll+0x120>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3318      	adds	r3, #24
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7ff fa83 	bl	80081ee <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	3304      	adds	r3, #4
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7ff fa7e 	bl	80081ee <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	409a      	lsls	r2, r3
 8008cfa:	4b2c      	ldr	r3, [pc, #176]	@ (8008dac <xTaskResumeAll+0x124>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	4a2a      	ldr	r2, [pc, #168]	@ (8008dac <xTaskResumeAll+0x124>)
 8008d02:	6013      	str	r3, [r2, #0]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d08:	4613      	mov	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	4413      	add	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4a27      	ldr	r2, [pc, #156]	@ (8008db0 <xTaskResumeAll+0x128>)
 8008d12:	441a      	add	r2, r3
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f7ff fa0a 	bl	8008134 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d24:	4b23      	ldr	r3, [pc, #140]	@ (8008db4 <xTaskResumeAll+0x12c>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d302      	bcc.n	8008d34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008d2e:	4b22      	ldr	r3, [pc, #136]	@ (8008db8 <xTaskResumeAll+0x130>)
 8008d30:	2201      	movs	r2, #1
 8008d32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d34:	4b1c      	ldr	r3, [pc, #112]	@ (8008da8 <xTaskResumeAll+0x120>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1cc      	bne.n	8008cd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008d42:	f000 fb1b 	bl	800937c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d46:	4b1d      	ldr	r3, [pc, #116]	@ (8008dbc <xTaskResumeAll+0x134>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d010      	beq.n	8008d74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008d52:	f000 f837 	bl	8008dc4 <xTaskIncrementTick>
 8008d56:	4603      	mov	r3, r0
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d002      	beq.n	8008d62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008d5c:	4b16      	ldr	r3, [pc, #88]	@ (8008db8 <xTaskResumeAll+0x130>)
 8008d5e:	2201      	movs	r2, #1
 8008d60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3b01      	subs	r3, #1
 8008d66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d1f1      	bne.n	8008d52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008d6e:	4b13      	ldr	r3, [pc, #76]	@ (8008dbc <xTaskResumeAll+0x134>)
 8008d70:	2200      	movs	r2, #0
 8008d72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008d74:	4b10      	ldr	r3, [pc, #64]	@ (8008db8 <xTaskResumeAll+0x130>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d009      	beq.n	8008d90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d80:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc0 <xTaskResumeAll+0x138>)
 8008d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d86:	601a      	str	r2, [r3, #0]
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d90:	f000 fe14 	bl	80099bc <vPortExitCritical>

	return xAlreadyYielded;
 8008d94:	68bb      	ldr	r3, [r7, #8]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	200008bc 	.word	0x200008bc
 8008da4:	20000894 	.word	0x20000894
 8008da8:	20000854 	.word	0x20000854
 8008dac:	2000089c 	.word	0x2000089c
 8008db0:	20000798 	.word	0x20000798
 8008db4:	20000794 	.word	0x20000794
 8008db8:	200008a8 	.word	0x200008a8
 8008dbc:	200008a4 	.word	0x200008a4
 8008dc0:	e000ed04 	.word	0xe000ed04

08008dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008dce:	4b4f      	ldr	r3, [pc, #316]	@ (8008f0c <xTaskIncrementTick+0x148>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f040 808f 	bne.w	8008ef6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8008f10 <xTaskIncrementTick+0x14c>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008de0:	4a4b      	ldr	r2, [pc, #300]	@ (8008f10 <xTaskIncrementTick+0x14c>)
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d121      	bne.n	8008e30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008dec:	4b49      	ldr	r3, [pc, #292]	@ (8008f14 <xTaskIncrementTick+0x150>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfa:	f383 8811 	msr	BASEPRI, r3
 8008dfe:	f3bf 8f6f 	isb	sy
 8008e02:	f3bf 8f4f 	dsb	sy
 8008e06:	603b      	str	r3, [r7, #0]
}
 8008e08:	bf00      	nop
 8008e0a:	bf00      	nop
 8008e0c:	e7fd      	b.n	8008e0a <xTaskIncrementTick+0x46>
 8008e0e:	4b41      	ldr	r3, [pc, #260]	@ (8008f14 <xTaskIncrementTick+0x150>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	60fb      	str	r3, [r7, #12]
 8008e14:	4b40      	ldr	r3, [pc, #256]	@ (8008f18 <xTaskIncrementTick+0x154>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a3e      	ldr	r2, [pc, #248]	@ (8008f14 <xTaskIncrementTick+0x150>)
 8008e1a:	6013      	str	r3, [r2, #0]
 8008e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8008f18 <xTaskIncrementTick+0x154>)
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	4b3e      	ldr	r3, [pc, #248]	@ (8008f1c <xTaskIncrementTick+0x158>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3301      	adds	r3, #1
 8008e28:	4a3c      	ldr	r2, [pc, #240]	@ (8008f1c <xTaskIncrementTick+0x158>)
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	f000 faa6 	bl	800937c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008e30:	4b3b      	ldr	r3, [pc, #236]	@ (8008f20 <xTaskIncrementTick+0x15c>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d348      	bcc.n	8008ecc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e3a:	4b36      	ldr	r3, [pc, #216]	@ (8008f14 <xTaskIncrementTick+0x150>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d104      	bne.n	8008e4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e44:	4b36      	ldr	r3, [pc, #216]	@ (8008f20 <xTaskIncrementTick+0x15c>)
 8008e46:	f04f 32ff 	mov.w	r2, #4294967295
 8008e4a:	601a      	str	r2, [r3, #0]
					break;
 8008e4c:	e03e      	b.n	8008ecc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e4e:	4b31      	ldr	r3, [pc, #196]	@ (8008f14 <xTaskIncrementTick+0x150>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d203      	bcs.n	8008e6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e66:	4a2e      	ldr	r2, [pc, #184]	@ (8008f20 <xTaskIncrementTick+0x15c>)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e6c:	e02e      	b.n	8008ecc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	3304      	adds	r3, #4
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7ff f9bb 	bl	80081ee <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	3318      	adds	r3, #24
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff f9b2 	bl	80081ee <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8e:	2201      	movs	r2, #1
 8008e90:	409a      	lsls	r2, r3
 8008e92:	4b24      	ldr	r3, [pc, #144]	@ (8008f24 <xTaskIncrementTick+0x160>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	4a22      	ldr	r2, [pc, #136]	@ (8008f24 <xTaskIncrementTick+0x160>)
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ea0:	4613      	mov	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	4413      	add	r3, r2
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8008f28 <xTaskIncrementTick+0x164>)
 8008eaa:	441a      	add	r2, r3
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	3304      	adds	r3, #4
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	4610      	mov	r0, r2
 8008eb4:	f7ff f93e 	bl	8008134 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8008f2c <xTaskIncrementTick+0x168>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d3b9      	bcc.n	8008e3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008eca:	e7b6      	b.n	8008e3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ecc:	4b17      	ldr	r3, [pc, #92]	@ (8008f2c <xTaskIncrementTick+0x168>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ed2:	4915      	ldr	r1, [pc, #84]	@ (8008f28 <xTaskIncrementTick+0x164>)
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	440b      	add	r3, r1
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d901      	bls.n	8008ee8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008ee8:	4b11      	ldr	r3, [pc, #68]	@ (8008f30 <xTaskIncrementTick+0x16c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d007      	beq.n	8008f00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	e004      	b.n	8008f00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f34 <xTaskIncrementTick+0x170>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3301      	adds	r3, #1
 8008efc:	4a0d      	ldr	r2, [pc, #52]	@ (8008f34 <xTaskIncrementTick+0x170>)
 8008efe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008f00:	697b      	ldr	r3, [r7, #20]
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	3718      	adds	r7, #24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	200008bc 	.word	0x200008bc
 8008f10:	20000898 	.word	0x20000898
 8008f14:	2000084c 	.word	0x2000084c
 8008f18:	20000850 	.word	0x20000850
 8008f1c:	200008ac 	.word	0x200008ac
 8008f20:	200008b4 	.word	0x200008b4
 8008f24:	2000089c 	.word	0x2000089c
 8008f28:	20000798 	.word	0x20000798
 8008f2c:	20000794 	.word	0x20000794
 8008f30:	200008a8 	.word	0x200008a8
 8008f34:	200008a4 	.word	0x200008a4

08008f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008f3e:	4b27      	ldr	r3, [pc, #156]	@ (8008fdc <vTaskSwitchContext+0xa4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d003      	beq.n	8008f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008f46:	4b26      	ldr	r3, [pc, #152]	@ (8008fe0 <vTaskSwitchContext+0xa8>)
 8008f48:	2201      	movs	r2, #1
 8008f4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008f4c:	e040      	b.n	8008fd0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8008f4e:	4b24      	ldr	r3, [pc, #144]	@ (8008fe0 <vTaskSwitchContext+0xa8>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f54:	4b23      	ldr	r3, [pc, #140]	@ (8008fe4 <vTaskSwitchContext+0xac>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	fab3 f383 	clz	r3, r3
 8008f60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008f62:	7afb      	ldrb	r3, [r7, #11]
 8008f64:	f1c3 031f 	rsb	r3, r3, #31
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	491f      	ldr	r1, [pc, #124]	@ (8008fe8 <vTaskSwitchContext+0xb0>)
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	009b      	lsls	r3, r3, #2
 8008f72:	4413      	add	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	440b      	add	r3, r1
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10b      	bne.n	8008f96 <vTaskSwitchContext+0x5e>
	__asm volatile
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	607b      	str	r3, [r7, #4]
}
 8008f90:	bf00      	nop
 8008f92:	bf00      	nop
 8008f94:	e7fd      	b.n	8008f92 <vTaskSwitchContext+0x5a>
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4a11      	ldr	r2, [pc, #68]	@ (8008fe8 <vTaskSwitchContext+0xb0>)
 8008fa2:	4413      	add	r3, r2
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	605a      	str	r2, [r3, #4]
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	685a      	ldr	r2, [r3, #4]
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3308      	adds	r3, #8
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d104      	bne.n	8008fc6 <vTaskSwitchContext+0x8e>
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	685a      	ldr	r2, [r3, #4]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	605a      	str	r2, [r3, #4]
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	4a07      	ldr	r2, [pc, #28]	@ (8008fec <vTaskSwitchContext+0xb4>)
 8008fce:	6013      	str	r3, [r2, #0]
}
 8008fd0:	bf00      	nop
 8008fd2:	371c      	adds	r7, #28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	200008bc 	.word	0x200008bc
 8008fe0:	200008a8 	.word	0x200008a8
 8008fe4:	2000089c 	.word	0x2000089c
 8008fe8:	20000798 	.word	0x20000798
 8008fec:	20000794 	.word	0x20000794

08008ff0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d10b      	bne.n	8009018 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009004:	f383 8811 	msr	BASEPRI, r3
 8009008:	f3bf 8f6f 	isb	sy
 800900c:	f3bf 8f4f 	dsb	sy
 8009010:	60fb      	str	r3, [r7, #12]
}
 8009012:	bf00      	nop
 8009014:	bf00      	nop
 8009016:	e7fd      	b.n	8009014 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009018:	4b07      	ldr	r3, [pc, #28]	@ (8009038 <vTaskPlaceOnEventList+0x48>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3318      	adds	r3, #24
 800901e:	4619      	mov	r1, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f7ff f8ab 	bl	800817c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009026:	2101      	movs	r1, #1
 8009028:	6838      	ldr	r0, [r7, #0]
 800902a:	f000 faff 	bl	800962c <prvAddCurrentTaskToDelayedList>
}
 800902e:	bf00      	nop
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
 8009036:	bf00      	nop
 8009038:	20000794 	.word	0x20000794

0800903c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d10b      	bne.n	800906a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	60fb      	str	r3, [r7, #12]
}
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	e7fd      	b.n	8009066 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	3318      	adds	r3, #24
 800906e:	4618      	mov	r0, r3
 8009070:	f7ff f8bd 	bl	80081ee <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009074:	4b1d      	ldr	r3, [pc, #116]	@ (80090ec <xTaskRemoveFromEventList+0xb0>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d11c      	bne.n	80090b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	3304      	adds	r3, #4
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff f8b4 	bl	80081ee <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800908a:	2201      	movs	r2, #1
 800908c:	409a      	lsls	r2, r3
 800908e:	4b18      	ldr	r3, [pc, #96]	@ (80090f0 <xTaskRemoveFromEventList+0xb4>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4313      	orrs	r3, r2
 8009094:	4a16      	ldr	r2, [pc, #88]	@ (80090f0 <xTaskRemoveFromEventList+0xb4>)
 8009096:	6013      	str	r3, [r2, #0]
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909c:	4613      	mov	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	4413      	add	r3, r2
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	4a13      	ldr	r2, [pc, #76]	@ (80090f4 <xTaskRemoveFromEventList+0xb8>)
 80090a6:	441a      	add	r2, r3
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4619      	mov	r1, r3
 80090ae:	4610      	mov	r0, r2
 80090b0:	f7ff f840 	bl	8008134 <vListInsertEnd>
 80090b4:	e005      	b.n	80090c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	3318      	adds	r3, #24
 80090ba:	4619      	mov	r1, r3
 80090bc:	480e      	ldr	r0, [pc, #56]	@ (80090f8 <xTaskRemoveFromEventList+0xbc>)
 80090be:	f7ff f839 	bl	8008134 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090c6:	4b0d      	ldr	r3, [pc, #52]	@ (80090fc <xTaskRemoveFromEventList+0xc0>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d905      	bls.n	80090dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090d4:	4b0a      	ldr	r3, [pc, #40]	@ (8009100 <xTaskRemoveFromEventList+0xc4>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	601a      	str	r2, [r3, #0]
 80090da:	e001      	b.n	80090e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80090dc:	2300      	movs	r3, #0
 80090de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090e0:	697b      	ldr	r3, [r7, #20]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3718      	adds	r7, #24
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	200008bc 	.word	0x200008bc
 80090f0:	2000089c 	.word	0x2000089c
 80090f4:	20000798 	.word	0x20000798
 80090f8:	20000854 	.word	0x20000854
 80090fc:	20000794 	.word	0x20000794
 8009100:	200008a8 	.word	0x200008a8

08009104 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009104:	b480      	push	{r7}
 8009106:	b083      	sub	sp, #12
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800910c:	4b06      	ldr	r3, [pc, #24]	@ (8009128 <vTaskInternalSetTimeOutState+0x24>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009114:	4b05      	ldr	r3, [pc, #20]	@ (800912c <vTaskInternalSetTimeOutState+0x28>)
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	605a      	str	r2, [r3, #4]
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr
 8009128:	200008ac 	.word	0x200008ac
 800912c:	20000898 	.word	0x20000898

08009130 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b088      	sub	sp, #32
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10b      	bne.n	8009158 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	613b      	str	r3, [r7, #16]
}
 8009152:	bf00      	nop
 8009154:	bf00      	nop
 8009156:	e7fd      	b.n	8009154 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10b      	bne.n	8009176 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800915e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009162:	f383 8811 	msr	BASEPRI, r3
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	60fb      	str	r3, [r7, #12]
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	e7fd      	b.n	8009172 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8009176:	f000 fbef 	bl	8009958 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800917a:	4b1d      	ldr	r3, [pc, #116]	@ (80091f0 <xTaskCheckForTimeOut+0xc0>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	69ba      	ldr	r2, [r7, #24]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009192:	d102      	bne.n	800919a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009194:	2300      	movs	r3, #0
 8009196:	61fb      	str	r3, [r7, #28]
 8009198:	e023      	b.n	80091e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b15      	ldr	r3, [pc, #84]	@ (80091f4 <xTaskCheckForTimeOut+0xc4>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d007      	beq.n	80091b6 <xTaskCheckForTimeOut+0x86>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d302      	bcc.n	80091b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091b0:	2301      	movs	r3, #1
 80091b2:	61fb      	str	r3, [r7, #28]
 80091b4:	e015      	b.n	80091e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d20b      	bcs.n	80091d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	1ad2      	subs	r2, r2, r3
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff ff99 	bl	8009104 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091d2:	2300      	movs	r3, #0
 80091d4:	61fb      	str	r3, [r7, #28]
 80091d6:	e004      	b.n	80091e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	2200      	movs	r2, #0
 80091dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091de:	2301      	movs	r3, #1
 80091e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091e2:	f000 fbeb 	bl	80099bc <vPortExitCritical>

	return xReturn;
 80091e6:	69fb      	ldr	r3, [r7, #28]
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3720      	adds	r7, #32
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}
 80091f0:	20000898 	.word	0x20000898
 80091f4:	200008ac 	.word	0x200008ac

080091f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091fc:	4b03      	ldr	r3, [pc, #12]	@ (800920c <vTaskMissedYield+0x14>)
 80091fe:	2201      	movs	r2, #1
 8009200:	601a      	str	r2, [r3, #0]
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	200008a8 	.word	0x200008a8

08009210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009218:	f000 f852 	bl	80092c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800921c:	4b06      	ldr	r3, [pc, #24]	@ (8009238 <prvIdleTask+0x28>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d9f9      	bls.n	8009218 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009224:	4b05      	ldr	r3, [pc, #20]	@ (800923c <prvIdleTask+0x2c>)
 8009226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	f3bf 8f4f 	dsb	sy
 8009230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009234:	e7f0      	b.n	8009218 <prvIdleTask+0x8>
 8009236:	bf00      	nop
 8009238:	20000798 	.word	0x20000798
 800923c:	e000ed04 	.word	0xe000ed04

08009240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009246:	2300      	movs	r3, #0
 8009248:	607b      	str	r3, [r7, #4]
 800924a:	e00c      	b.n	8009266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	4613      	mov	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	4413      	add	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4a12      	ldr	r2, [pc, #72]	@ (80092a0 <prvInitialiseTaskLists+0x60>)
 8009258:	4413      	add	r3, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7fe ff3d 	bl	80080da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	3301      	adds	r3, #1
 8009264:	607b      	str	r3, [r7, #4]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2b06      	cmp	r3, #6
 800926a:	d9ef      	bls.n	800924c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800926c:	480d      	ldr	r0, [pc, #52]	@ (80092a4 <prvInitialiseTaskLists+0x64>)
 800926e:	f7fe ff34 	bl	80080da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009272:	480d      	ldr	r0, [pc, #52]	@ (80092a8 <prvInitialiseTaskLists+0x68>)
 8009274:	f7fe ff31 	bl	80080da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009278:	480c      	ldr	r0, [pc, #48]	@ (80092ac <prvInitialiseTaskLists+0x6c>)
 800927a:	f7fe ff2e 	bl	80080da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800927e:	480c      	ldr	r0, [pc, #48]	@ (80092b0 <prvInitialiseTaskLists+0x70>)
 8009280:	f7fe ff2b 	bl	80080da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009284:	480b      	ldr	r0, [pc, #44]	@ (80092b4 <prvInitialiseTaskLists+0x74>)
 8009286:	f7fe ff28 	bl	80080da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800928a:	4b0b      	ldr	r3, [pc, #44]	@ (80092b8 <prvInitialiseTaskLists+0x78>)
 800928c:	4a05      	ldr	r2, [pc, #20]	@ (80092a4 <prvInitialiseTaskLists+0x64>)
 800928e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009290:	4b0a      	ldr	r3, [pc, #40]	@ (80092bc <prvInitialiseTaskLists+0x7c>)
 8009292:	4a05      	ldr	r2, [pc, #20]	@ (80092a8 <prvInitialiseTaskLists+0x68>)
 8009294:	601a      	str	r2, [r3, #0]
}
 8009296:	bf00      	nop
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	20000798 	.word	0x20000798
 80092a4:	20000824 	.word	0x20000824
 80092a8:	20000838 	.word	0x20000838
 80092ac:	20000854 	.word	0x20000854
 80092b0:	20000868 	.word	0x20000868
 80092b4:	20000880 	.word	0x20000880
 80092b8:	2000084c 	.word	0x2000084c
 80092bc:	20000850 	.word	0x20000850

080092c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092c6:	e019      	b.n	80092fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092c8:	f000 fb46 	bl	8009958 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092cc:	4b10      	ldr	r3, [pc, #64]	@ (8009310 <prvCheckTasksWaitingTermination+0x50>)
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	3304      	adds	r3, #4
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fe ff88 	bl	80081ee <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092de:	4b0d      	ldr	r3, [pc, #52]	@ (8009314 <prvCheckTasksWaitingTermination+0x54>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	3b01      	subs	r3, #1
 80092e4:	4a0b      	ldr	r2, [pc, #44]	@ (8009314 <prvCheckTasksWaitingTermination+0x54>)
 80092e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009318 <prvCheckTasksWaitingTermination+0x58>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009318 <prvCheckTasksWaitingTermination+0x58>)
 80092f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092f2:	f000 fb63 	bl	80099bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f810 	bl	800931c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092fc:	4b06      	ldr	r3, [pc, #24]	@ (8009318 <prvCheckTasksWaitingTermination+0x58>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e1      	bne.n	80092c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009304:	bf00      	nop
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	20000868 	.word	0x20000868
 8009314:	20000894 	.word	0x20000894
 8009318:	2000087c 	.word	0x2000087c

0800931c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800932a:	2b00      	cmp	r3, #0
 800932c:	d108      	bne.n	8009340 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fd00 	bl	8009d38 <vPortFree>
				vPortFree( pxTCB );
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 fcfd 	bl	8009d38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800933e:	e019      	b.n	8009374 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009346:	2b01      	cmp	r3, #1
 8009348:	d103      	bne.n	8009352 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fcf4 	bl	8009d38 <vPortFree>
	}
 8009350:	e010      	b.n	8009374 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009358:	2b02      	cmp	r3, #2
 800935a:	d00b      	beq.n	8009374 <prvDeleteTCB+0x58>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	60fb      	str	r3, [r7, #12]
}
 800936e:	bf00      	nop
 8009370:	bf00      	nop
 8009372:	e7fd      	b.n	8009370 <prvDeleteTCB+0x54>
	}
 8009374:	bf00      	nop
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009382:	4b0c      	ldr	r3, [pc, #48]	@ (80093b4 <prvResetNextTaskUnblockTime+0x38>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d104      	bne.n	8009396 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800938c:	4b0a      	ldr	r3, [pc, #40]	@ (80093b8 <prvResetNextTaskUnblockTime+0x3c>)
 800938e:	f04f 32ff 	mov.w	r2, #4294967295
 8009392:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009394:	e008      	b.n	80093a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009396:	4b07      	ldr	r3, [pc, #28]	@ (80093b4 <prvResetNextTaskUnblockTime+0x38>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	4a04      	ldr	r2, [pc, #16]	@ (80093b8 <prvResetNextTaskUnblockTime+0x3c>)
 80093a6:	6013      	str	r3, [r2, #0]
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	2000084c 	.word	0x2000084c
 80093b8:	200008b4 	.word	0x200008b4

080093bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093c2:	4b0b      	ldr	r3, [pc, #44]	@ (80093f0 <xTaskGetSchedulerState+0x34>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d102      	bne.n	80093d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093ca:	2301      	movs	r3, #1
 80093cc:	607b      	str	r3, [r7, #4]
 80093ce:	e008      	b.n	80093e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093d0:	4b08      	ldr	r3, [pc, #32]	@ (80093f4 <xTaskGetSchedulerState+0x38>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d102      	bne.n	80093de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093d8:	2302      	movs	r3, #2
 80093da:	607b      	str	r3, [r7, #4]
 80093dc:	e001      	b.n	80093e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093de:	2300      	movs	r3, #0
 80093e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093e2:	687b      	ldr	r3, [r7, #4]
	}
 80093e4:	4618      	mov	r0, r3
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	200008a0 	.word	0x200008a0
 80093f4:	200008bc 	.word	0x200008bc

080093f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009404:	2300      	movs	r3, #0
 8009406:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d05e      	beq.n	80094cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009412:	4b31      	ldr	r3, [pc, #196]	@ (80094d8 <xTaskPriorityInherit+0xe0>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009418:	429a      	cmp	r2, r3
 800941a:	d24e      	bcs.n	80094ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	2b00      	cmp	r3, #0
 8009422:	db06      	blt.n	8009432 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009424:	4b2c      	ldr	r3, [pc, #176]	@ (80094d8 <xTaskPriorityInherit+0xe0>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800942a:	f1c3 0207 	rsb	r2, r3, #7
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	6959      	ldr	r1, [r3, #20]
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4a26      	ldr	r2, [pc, #152]	@ (80094dc <xTaskPriorityInherit+0xe4>)
 8009444:	4413      	add	r3, r2
 8009446:	4299      	cmp	r1, r3
 8009448:	d12f      	bne.n	80094aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	3304      	adds	r3, #4
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fecd 	bl	80081ee <uxListRemove>
 8009454:	4603      	mov	r3, r0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800945e:	2201      	movs	r2, #1
 8009460:	fa02 f303 	lsl.w	r3, r2, r3
 8009464:	43da      	mvns	r2, r3
 8009466:	4b1e      	ldr	r3, [pc, #120]	@ (80094e0 <xTaskPriorityInherit+0xe8>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4013      	ands	r3, r2
 800946c:	4a1c      	ldr	r2, [pc, #112]	@ (80094e0 <xTaskPriorityInherit+0xe8>)
 800946e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009470:	4b19      	ldr	r3, [pc, #100]	@ (80094d8 <xTaskPriorityInherit+0xe0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947e:	2201      	movs	r2, #1
 8009480:	409a      	lsls	r2, r3
 8009482:	4b17      	ldr	r3, [pc, #92]	@ (80094e0 <xTaskPriorityInherit+0xe8>)
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4313      	orrs	r3, r2
 8009488:	4a15      	ldr	r2, [pc, #84]	@ (80094e0 <xTaskPriorityInherit+0xe8>)
 800948a:	6013      	str	r3, [r2, #0]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009490:	4613      	mov	r3, r2
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	4413      	add	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4a10      	ldr	r2, [pc, #64]	@ (80094dc <xTaskPriorityInherit+0xe4>)
 800949a:	441a      	add	r2, r3
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	3304      	adds	r3, #4
 80094a0:	4619      	mov	r1, r3
 80094a2:	4610      	mov	r0, r2
 80094a4:	f7fe fe46 	bl	8008134 <vListInsertEnd>
 80094a8:	e004      	b.n	80094b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094aa:	4b0b      	ldr	r3, [pc, #44]	@ (80094d8 <xTaskPriorityInherit+0xe0>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
 80094b8:	e008      	b.n	80094cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80094be:	4b06      	ldr	r3, [pc, #24]	@ (80094d8 <xTaskPriorityInherit+0xe0>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d201      	bcs.n	80094cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80094c8:	2301      	movs	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094cc:	68fb      	ldr	r3, [r7, #12]
	}
 80094ce:	4618      	mov	r0, r3
 80094d0:	3710      	adds	r7, #16
 80094d2:	46bd      	mov	sp, r7
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	20000794 	.word	0x20000794
 80094dc:	20000798 	.word	0x20000798
 80094e0:	2000089c 	.word	0x2000089c

080094e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b088      	sub	sp, #32
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
 80094ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80094f2:	2301      	movs	r3, #1
 80094f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d079      	beq.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80094fc:	69bb      	ldr	r3, [r7, #24]
 80094fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10b      	bne.n	800951c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8009504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	60fb      	str	r3, [r7, #12]
}
 8009516:	bf00      	nop
 8009518:	bf00      	nop
 800951a:	e7fd      	b.n	8009518 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800951c:	69bb      	ldr	r3, [r7, #24]
 800951e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	429a      	cmp	r2, r3
 8009524:	d902      	bls.n	800952c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	61fb      	str	r3, [r7, #28]
 800952a:	e002      	b.n	8009532 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009530:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	429a      	cmp	r2, r3
 800953a:	d059      	beq.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800953c:	69bb      	ldr	r3, [r7, #24]
 800953e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	429a      	cmp	r2, r3
 8009544:	d154      	bne.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009546:	4b2c      	ldr	r3, [pc, #176]	@ (80095f8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	69ba      	ldr	r2, [r7, #24]
 800954c:	429a      	cmp	r2, r3
 800954e:	d10b      	bne.n	8009568 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60bb      	str	r3, [r7, #8]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009568:	69bb      	ldr	r3, [r7, #24]
 800956a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800956c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800956e:	69bb      	ldr	r3, [r7, #24]
 8009570:	69fa      	ldr	r2, [r7, #28]
 8009572:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	db04      	blt.n	8009586 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	f1c3 0207 	rsb	r2, r3, #7
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	6959      	ldr	r1, [r3, #20]
 800958a:	693a      	ldr	r2, [r7, #16]
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4a19      	ldr	r2, [pc, #100]	@ (80095fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009596:	4413      	add	r3, r2
 8009598:	4299      	cmp	r1, r3
 800959a:	d129      	bne.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800959c:	69bb      	ldr	r3, [r7, #24]
 800959e:	3304      	adds	r3, #4
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fe fe24 	bl	80081ee <uxListRemove>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b0:	2201      	movs	r2, #1
 80095b2:	fa02 f303 	lsl.w	r3, r2, r3
 80095b6:	43da      	mvns	r2, r3
 80095b8:	4b11      	ldr	r3, [pc, #68]	@ (8009600 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4013      	ands	r3, r2
 80095be:	4a10      	ldr	r2, [pc, #64]	@ (8009600 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80095c0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c6:	2201      	movs	r2, #1
 80095c8:	409a      	lsls	r2, r3
 80095ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009600 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	4a0b      	ldr	r2, [pc, #44]	@ (8009600 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4a06      	ldr	r2, [pc, #24]	@ (80095fc <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80095e2:	441a      	add	r2, r3
 80095e4:	69bb      	ldr	r3, [r7, #24]
 80095e6:	3304      	adds	r3, #4
 80095e8:	4619      	mov	r1, r3
 80095ea:	4610      	mov	r0, r2
 80095ec:	f7fe fda2 	bl	8008134 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095f0:	bf00      	nop
 80095f2:	3720      	adds	r7, #32
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	20000794 	.word	0x20000794
 80095fc:	20000798 	.word	0x20000798
 8009600:	2000089c 	.word	0x2000089c

08009604 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009604:	b480      	push	{r7}
 8009606:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009608:	4b07      	ldr	r3, [pc, #28]	@ (8009628 <pvTaskIncrementMutexHeldCount+0x24>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009610:	4b05      	ldr	r3, [pc, #20]	@ (8009628 <pvTaskIncrementMutexHeldCount+0x24>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009616:	3201      	adds	r2, #1
 8009618:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800961a:	4b03      	ldr	r3, [pc, #12]	@ (8009628 <pvTaskIncrementMutexHeldCount+0x24>)
 800961c:	681b      	ldr	r3, [r3, #0]
	}
 800961e:	4618      	mov	r0, r3
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	20000794 	.word	0x20000794

0800962c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
 8009634:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009636:	4b29      	ldr	r3, [pc, #164]	@ (80096dc <prvAddCurrentTaskToDelayedList+0xb0>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800963c:	4b28      	ldr	r3, [pc, #160]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	3304      	adds	r3, #4
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fdd3 	bl	80081ee <uxListRemove>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10b      	bne.n	8009666 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800964e:	4b24      	ldr	r3, [pc, #144]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009654:	2201      	movs	r2, #1
 8009656:	fa02 f303 	lsl.w	r3, r2, r3
 800965a:	43da      	mvns	r2, r3
 800965c:	4b21      	ldr	r3, [pc, #132]	@ (80096e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4013      	ands	r3, r2
 8009662:	4a20      	ldr	r2, [pc, #128]	@ (80096e4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009664:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d10a      	bne.n	8009684 <prvAddCurrentTaskToDelayedList+0x58>
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d007      	beq.n	8009684 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009674:	4b1a      	ldr	r3, [pc, #104]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3304      	adds	r3, #4
 800967a:	4619      	mov	r1, r3
 800967c:	481a      	ldr	r0, [pc, #104]	@ (80096e8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800967e:	f7fe fd59 	bl	8008134 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009682:	e026      	b.n	80096d2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4413      	add	r3, r2
 800968a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800968c:	4b14      	ldr	r3, [pc, #80]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	429a      	cmp	r2, r3
 800969a:	d209      	bcs.n	80096b0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800969c:	4b13      	ldr	r3, [pc, #76]	@ (80096ec <prvAddCurrentTaskToDelayedList+0xc0>)
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	4b0f      	ldr	r3, [pc, #60]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3304      	adds	r3, #4
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f7fe fd67 	bl	800817c <vListInsert>
}
 80096ae:	e010      	b.n	80096d2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096b0:	4b0f      	ldr	r3, [pc, #60]	@ (80096f0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80096b2:	681a      	ldr	r2, [r3, #0]
 80096b4:	4b0a      	ldr	r3, [pc, #40]	@ (80096e0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3304      	adds	r3, #4
 80096ba:	4619      	mov	r1, r3
 80096bc:	4610      	mov	r0, r2
 80096be:	f7fe fd5d 	bl	800817c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80096c2:	4b0c      	ldr	r3, [pc, #48]	@ (80096f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d202      	bcs.n	80096d2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80096cc:	4a09      	ldr	r2, [pc, #36]	@ (80096f4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6013      	str	r3, [r2, #0]
}
 80096d2:	bf00      	nop
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	20000898 	.word	0x20000898
 80096e0:	20000794 	.word	0x20000794
 80096e4:	2000089c 	.word	0x2000089c
 80096e8:	20000880 	.word	0x20000880
 80096ec:	20000850 	.word	0x20000850
 80096f0:	2000084c 	.word	0x2000084c
 80096f4:	200008b4 	.word	0x200008b4

080096f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3b04      	subs	r3, #4
 8009708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	3b04      	subs	r3, #4
 8009716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f023 0201 	bic.w	r2, r3, #1
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3b04      	subs	r3, #4
 8009726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009728:	4a0c      	ldr	r2, [pc, #48]	@ (800975c <pxPortInitialiseStack+0x64>)
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3b14      	subs	r3, #20
 8009732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	3b04      	subs	r3, #4
 800973e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f06f 0202 	mvn.w	r2, #2
 8009746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	3b20      	subs	r3, #32
 800974c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800974e:	68fb      	ldr	r3, [r7, #12]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr
 800975c:	08009761 	.word	0x08009761

08009760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009766:	2300      	movs	r3, #0
 8009768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800976a:	4b13      	ldr	r3, [pc, #76]	@ (80097b8 <prvTaskExitError+0x58>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009772:	d00b      	beq.n	800978c <prvTaskExitError+0x2c>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	60fb      	str	r3, [r7, #12]
}
 8009786:	bf00      	nop
 8009788:	bf00      	nop
 800978a:	e7fd      	b.n	8009788 <prvTaskExitError+0x28>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60bb      	str	r3, [r7, #8]
}
 800979e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097a0:	bf00      	nop
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0fc      	beq.n	80097a2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097a8:	bf00      	nop
 80097aa:	bf00      	nop
 80097ac:	3714      	adds	r7, #20
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
 80097b6:	bf00      	nop
 80097b8:	2000011c 	.word	0x2000011c
 80097bc:	00000000 	.word	0x00000000

080097c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80097c0:	4b07      	ldr	r3, [pc, #28]	@ (80097e0 <pxCurrentTCBConst2>)
 80097c2:	6819      	ldr	r1, [r3, #0]
 80097c4:	6808      	ldr	r0, [r1, #0]
 80097c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ca:	f380 8809 	msr	PSP, r0
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f04f 0000 	mov.w	r0, #0
 80097d6:	f380 8811 	msr	BASEPRI, r0
 80097da:	4770      	bx	lr
 80097dc:	f3af 8000 	nop.w

080097e0 <pxCurrentTCBConst2>:
 80097e0:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80097e4:	bf00      	nop
 80097e6:	bf00      	nop

080097e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80097e8:	4808      	ldr	r0, [pc, #32]	@ (800980c <prvPortStartFirstTask+0x24>)
 80097ea:	6800      	ldr	r0, [r0, #0]
 80097ec:	6800      	ldr	r0, [r0, #0]
 80097ee:	f380 8808 	msr	MSP, r0
 80097f2:	f04f 0000 	mov.w	r0, #0
 80097f6:	f380 8814 	msr	CONTROL, r0
 80097fa:	b662      	cpsie	i
 80097fc:	b661      	cpsie	f
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	df00      	svc	0
 8009808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800980a:	bf00      	nop
 800980c:	e000ed08 	.word	0xe000ed08

08009810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009816:	4b47      	ldr	r3, [pc, #284]	@ (8009934 <xPortStartScheduler+0x124>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a47      	ldr	r2, [pc, #284]	@ (8009938 <xPortStartScheduler+0x128>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d10b      	bne.n	8009838 <xPortStartScheduler+0x28>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	613b      	str	r3, [r7, #16]
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	e7fd      	b.n	8009834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009838:	4b3e      	ldr	r3, [pc, #248]	@ (8009934 <xPortStartScheduler+0x124>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a3f      	ldr	r2, [pc, #252]	@ (800993c <xPortStartScheduler+0x12c>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d10b      	bne.n	800985a <xPortStartScheduler+0x4a>
	__asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	60fb      	str	r3, [r7, #12]
}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	e7fd      	b.n	8009856 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800985a:	4b39      	ldr	r3, [pc, #228]	@ (8009940 <xPortStartScheduler+0x130>)
 800985c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	b2db      	uxtb	r3, r3
 8009864:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	22ff      	movs	r2, #255	@ 0xff
 800986a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	b2db      	uxtb	r3, r3
 8009872:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800987c:	b2da      	uxtb	r2, r3
 800987e:	4b31      	ldr	r3, [pc, #196]	@ (8009944 <xPortStartScheduler+0x134>)
 8009880:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009882:	4b31      	ldr	r3, [pc, #196]	@ (8009948 <xPortStartScheduler+0x138>)
 8009884:	2207      	movs	r2, #7
 8009886:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009888:	e009      	b.n	800989e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800988a:	4b2f      	ldr	r3, [pc, #188]	@ (8009948 <xPortStartScheduler+0x138>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3b01      	subs	r3, #1
 8009890:	4a2d      	ldr	r2, [pc, #180]	@ (8009948 <xPortStartScheduler+0x138>)
 8009892:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009894:	78fb      	ldrb	r3, [r7, #3]
 8009896:	b2db      	uxtb	r3, r3
 8009898:	005b      	lsls	r3, r3, #1
 800989a:	b2db      	uxtb	r3, r3
 800989c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800989e:	78fb      	ldrb	r3, [r7, #3]
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098a6:	2b80      	cmp	r3, #128	@ 0x80
 80098a8:	d0ef      	beq.n	800988a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098aa:	4b27      	ldr	r3, [pc, #156]	@ (8009948 <xPortStartScheduler+0x138>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f1c3 0307 	rsb	r3, r3, #7
 80098b2:	2b04      	cmp	r3, #4
 80098b4:	d00b      	beq.n	80098ce <xPortStartScheduler+0xbe>
	__asm volatile
 80098b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098ba:	f383 8811 	msr	BASEPRI, r3
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f3bf 8f4f 	dsb	sy
 80098c6:	60bb      	str	r3, [r7, #8]
}
 80098c8:	bf00      	nop
 80098ca:	bf00      	nop
 80098cc:	e7fd      	b.n	80098ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80098ce:	4b1e      	ldr	r3, [pc, #120]	@ (8009948 <xPortStartScheduler+0x138>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	021b      	lsls	r3, r3, #8
 80098d4:	4a1c      	ldr	r2, [pc, #112]	@ (8009948 <xPortStartScheduler+0x138>)
 80098d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80098d8:	4b1b      	ldr	r3, [pc, #108]	@ (8009948 <xPortStartScheduler+0x138>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80098e0:	4a19      	ldr	r2, [pc, #100]	@ (8009948 <xPortStartScheduler+0x138>)
 80098e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80098ec:	4b17      	ldr	r3, [pc, #92]	@ (800994c <xPortStartScheduler+0x13c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a16      	ldr	r2, [pc, #88]	@ (800994c <xPortStartScheduler+0x13c>)
 80098f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80098f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80098f8:	4b14      	ldr	r3, [pc, #80]	@ (800994c <xPortStartScheduler+0x13c>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a13      	ldr	r2, [pc, #76]	@ (800994c <xPortStartScheduler+0x13c>)
 80098fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009902:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009904:	f000 f8da 	bl	8009abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009908:	4b11      	ldr	r3, [pc, #68]	@ (8009950 <xPortStartScheduler+0x140>)
 800990a:	2200      	movs	r2, #0
 800990c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800990e:	f000 f8f9 	bl	8009b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009912:	4b10      	ldr	r3, [pc, #64]	@ (8009954 <xPortStartScheduler+0x144>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a0f      	ldr	r2, [pc, #60]	@ (8009954 <xPortStartScheduler+0x144>)
 8009918:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800991c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800991e:	f7ff ff63 	bl	80097e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009922:	f7ff fb09 	bl	8008f38 <vTaskSwitchContext>
	prvTaskExitError();
 8009926:	f7ff ff1b 	bl	8009760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}
 8009934:	e000ed00 	.word	0xe000ed00
 8009938:	410fc271 	.word	0x410fc271
 800993c:	410fc270 	.word	0x410fc270
 8009940:	e000e400 	.word	0xe000e400
 8009944:	200008c0 	.word	0x200008c0
 8009948:	200008c4 	.word	0x200008c4
 800994c:	e000ed20 	.word	0xe000ed20
 8009950:	2000011c 	.word	0x2000011c
 8009954:	e000ef34 	.word	0xe000ef34

08009958 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009958:	b480      	push	{r7}
 800995a:	b083      	sub	sp, #12
 800995c:	af00      	add	r7, sp, #0
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	607b      	str	r3, [r7, #4]
}
 8009970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009972:	4b10      	ldr	r3, [pc, #64]	@ (80099b4 <vPortEnterCritical+0x5c>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3301      	adds	r3, #1
 8009978:	4a0e      	ldr	r2, [pc, #56]	@ (80099b4 <vPortEnterCritical+0x5c>)
 800997a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800997c:	4b0d      	ldr	r3, [pc, #52]	@ (80099b4 <vPortEnterCritical+0x5c>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b01      	cmp	r3, #1
 8009982:	d110      	bne.n	80099a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009984:	4b0c      	ldr	r3, [pc, #48]	@ (80099b8 <vPortEnterCritical+0x60>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	b2db      	uxtb	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00b      	beq.n	80099a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	603b      	str	r3, [r7, #0]
}
 80099a0:	bf00      	nop
 80099a2:	bf00      	nop
 80099a4:	e7fd      	b.n	80099a2 <vPortEnterCritical+0x4a>
	}
}
 80099a6:	bf00      	nop
 80099a8:	370c      	adds	r7, #12
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	2000011c 	.word	0x2000011c
 80099b8:	e000ed04 	.word	0xe000ed04

080099bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80099bc:	b480      	push	{r7}
 80099be:	b083      	sub	sp, #12
 80099c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80099c2:	4b12      	ldr	r3, [pc, #72]	@ (8009a0c <vPortExitCritical+0x50>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d10b      	bne.n	80099e2 <vPortExitCritical+0x26>
	__asm volatile
 80099ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099ce:	f383 8811 	msr	BASEPRI, r3
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	f3bf 8f4f 	dsb	sy
 80099da:	607b      	str	r3, [r7, #4]
}
 80099dc:	bf00      	nop
 80099de:	bf00      	nop
 80099e0:	e7fd      	b.n	80099de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80099e2:	4b0a      	ldr	r3, [pc, #40]	@ (8009a0c <vPortExitCritical+0x50>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	4a08      	ldr	r2, [pc, #32]	@ (8009a0c <vPortExitCritical+0x50>)
 80099ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80099ec:	4b07      	ldr	r3, [pc, #28]	@ (8009a0c <vPortExitCritical+0x50>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d105      	bne.n	8009a00 <vPortExitCritical+0x44>
 80099f4:	2300      	movs	r3, #0
 80099f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	f383 8811 	msr	BASEPRI, r3
}
 80099fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a00:	bf00      	nop
 8009a02:	370c      	adds	r7, #12
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr
 8009a0c:	2000011c 	.word	0x2000011c

08009a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a10:	f3ef 8009 	mrs	r0, PSP
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	4b15      	ldr	r3, [pc, #84]	@ (8009a70 <pxCurrentTCBConst>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	f01e 0f10 	tst.w	lr, #16
 8009a20:	bf08      	it	eq
 8009a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a2a:	6010      	str	r0, [r2, #0]
 8009a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a34:	f380 8811 	msr	BASEPRI, r0
 8009a38:	f3bf 8f4f 	dsb	sy
 8009a3c:	f3bf 8f6f 	isb	sy
 8009a40:	f7ff fa7a 	bl	8008f38 <vTaskSwitchContext>
 8009a44:	f04f 0000 	mov.w	r0, #0
 8009a48:	f380 8811 	msr	BASEPRI, r0
 8009a4c:	bc09      	pop	{r0, r3}
 8009a4e:	6819      	ldr	r1, [r3, #0]
 8009a50:	6808      	ldr	r0, [r1, #0]
 8009a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a56:	f01e 0f10 	tst.w	lr, #16
 8009a5a:	bf08      	it	eq
 8009a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009a60:	f380 8809 	msr	PSP, r0
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	f3af 8000 	nop.w

08009a70 <pxCurrentTCBConst>:
 8009a70:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop

08009a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8009a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	607b      	str	r3, [r7, #4]
}
 8009a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a92:	f7ff f997 	bl	8008dc4 <xTaskIncrementTick>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d003      	beq.n	8009aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a9c:	4b06      	ldr	r3, [pc, #24]	@ (8009ab8 <xPortSysTickHandler+0x40>)
 8009a9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	f383 8811 	msr	BASEPRI, r3
}
 8009aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ab0:	bf00      	nop
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009abc:	b480      	push	{r7}
 8009abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8009af0 <vPortSetupTimerInterrupt+0x34>)
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8009af4 <vPortSetupTimerInterrupt+0x38>)
 8009ac8:	2200      	movs	r2, #0
 8009aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009acc:	4b0a      	ldr	r3, [pc, #40]	@ (8009af8 <vPortSetupTimerInterrupt+0x3c>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8009afc <vPortSetupTimerInterrupt+0x40>)
 8009ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad6:	099b      	lsrs	r3, r3, #6
 8009ad8:	4a09      	ldr	r2, [pc, #36]	@ (8009b00 <vPortSetupTimerInterrupt+0x44>)
 8009ada:	3b01      	subs	r3, #1
 8009adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ade:	4b04      	ldr	r3, [pc, #16]	@ (8009af0 <vPortSetupTimerInterrupt+0x34>)
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	601a      	str	r2, [r3, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	e000e010 	.word	0xe000e010
 8009af4:	e000e018 	.word	0xe000e018
 8009af8:	20000110 	.word	0x20000110
 8009afc:	10624dd3 	.word	0x10624dd3
 8009b00:	e000e014 	.word	0xe000e014

08009b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b14 <vPortEnableVFP+0x10>
 8009b08:	6801      	ldr	r1, [r0, #0]
 8009b0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b0e:	6001      	str	r1, [r0, #0]
 8009b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b12:	bf00      	nop
 8009b14:	e000ed88 	.word	0xe000ed88

08009b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b1e:	f3ef 8305 	mrs	r3, IPSR
 8009b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b0f      	cmp	r3, #15
 8009b28:	d915      	bls.n	8009b56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b2a:	4a18      	ldr	r2, [pc, #96]	@ (8009b8c <vPortValidateInterruptPriority+0x74>)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	4413      	add	r3, r2
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b34:	4b16      	ldr	r3, [pc, #88]	@ (8009b90 <vPortValidateInterruptPriority+0x78>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	7afa      	ldrb	r2, [r7, #11]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d20b      	bcs.n	8009b56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	607b      	str	r3, [r7, #4]
}
 8009b50:	bf00      	nop
 8009b52:	bf00      	nop
 8009b54:	e7fd      	b.n	8009b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009b56:	4b0f      	ldr	r3, [pc, #60]	@ (8009b94 <vPortValidateInterruptPriority+0x7c>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8009b98 <vPortValidateInterruptPriority+0x80>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d90b      	bls.n	8009b7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6a:	f383 8811 	msr	BASEPRI, r3
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	f3bf 8f4f 	dsb	sy
 8009b76:	603b      	str	r3, [r7, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	bf00      	nop
 8009b7c:	e7fd      	b.n	8009b7a <vPortValidateInterruptPriority+0x62>
	}
 8009b7e:	bf00      	nop
 8009b80:	3714      	adds	r7, #20
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr
 8009b8a:	bf00      	nop
 8009b8c:	e000e3f0 	.word	0xe000e3f0
 8009b90:	200008c0 	.word	0x200008c0
 8009b94:	e000ed0c 	.word	0xe000ed0c
 8009b98:	200008c4 	.word	0x200008c4

08009b9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b08a      	sub	sp, #40	@ 0x28
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ba8:	f7ff f860 	bl	8008c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bac:	4b5c      	ldr	r3, [pc, #368]	@ (8009d20 <pvPortMalloc+0x184>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d101      	bne.n	8009bb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009bb4:	f000 f924 	bl	8009e00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009bb8:	4b5a      	ldr	r3, [pc, #360]	@ (8009d24 <pvPortMalloc+0x188>)
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4013      	ands	r3, r2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f040 8095 	bne.w	8009cf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d01e      	beq.n	8009c0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009bcc:	2208      	movs	r2, #8
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4413      	add	r3, r2
 8009bd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d015      	beq.n	8009c0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f023 0307 	bic.w	r3, r3, #7
 8009be4:	3308      	adds	r3, #8
 8009be6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f003 0307 	and.w	r3, r3, #7
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00b      	beq.n	8009c0a <pvPortMalloc+0x6e>
	__asm volatile
 8009bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bf6:	f383 8811 	msr	BASEPRI, r3
 8009bfa:	f3bf 8f6f 	isb	sy
 8009bfe:	f3bf 8f4f 	dsb	sy
 8009c02:	617b      	str	r3, [r7, #20]
}
 8009c04:	bf00      	nop
 8009c06:	bf00      	nop
 8009c08:	e7fd      	b.n	8009c06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d06f      	beq.n	8009cf0 <pvPortMalloc+0x154>
 8009c10:	4b45      	ldr	r3, [pc, #276]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d86a      	bhi.n	8009cf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c1a:	4b44      	ldr	r3, [pc, #272]	@ (8009d2c <pvPortMalloc+0x190>)
 8009c1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c1e:	4b43      	ldr	r3, [pc, #268]	@ (8009d2c <pvPortMalloc+0x190>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c24:	e004      	b.n	8009c30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d903      	bls.n	8009c42 <pvPortMalloc+0xa6>
 8009c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1f1      	bne.n	8009c26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c42:	4b37      	ldr	r3, [pc, #220]	@ (8009d20 <pvPortMalloc+0x184>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d051      	beq.n	8009cf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c4c:	6a3b      	ldr	r3, [r7, #32]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2208      	movs	r2, #8
 8009c52:	4413      	add	r3, r2
 8009c54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	6a3b      	ldr	r3, [r7, #32]
 8009c5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	1ad2      	subs	r2, r2, r3
 8009c66:	2308      	movs	r3, #8
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d920      	bls.n	8009cb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4413      	add	r3, r2
 8009c74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00b      	beq.n	8009c98 <pvPortMalloc+0xfc>
	__asm volatile
 8009c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c84:	f383 8811 	msr	BASEPRI, r3
 8009c88:	f3bf 8f6f 	isb	sy
 8009c8c:	f3bf 8f4f 	dsb	sy
 8009c90:	613b      	str	r3, [r7, #16]
}
 8009c92:	bf00      	nop
 8009c94:	bf00      	nop
 8009c96:	e7fd      	b.n	8009c94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	1ad2      	subs	r2, r2, r3
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009caa:	69b8      	ldr	r0, [r7, #24]
 8009cac:	f000 f90a 	bl	8009ec4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	1ad3      	subs	r3, r2, r3
 8009cba:	4a1b      	ldr	r2, [pc, #108]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009cbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	4b1b      	ldr	r3, [pc, #108]	@ (8009d30 <pvPortMalloc+0x194>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	d203      	bcs.n	8009cd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009cca:	4b17      	ldr	r3, [pc, #92]	@ (8009d28 <pvPortMalloc+0x18c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a18      	ldr	r2, [pc, #96]	@ (8009d30 <pvPortMalloc+0x194>)
 8009cd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd4:	685a      	ldr	r2, [r3, #4]
 8009cd6:	4b13      	ldr	r3, [pc, #76]	@ (8009d24 <pvPortMalloc+0x188>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	431a      	orrs	r2, r3
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009ce6:	4b13      	ldr	r3, [pc, #76]	@ (8009d34 <pvPortMalloc+0x198>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3301      	adds	r3, #1
 8009cec:	4a11      	ldr	r2, [pc, #68]	@ (8009d34 <pvPortMalloc+0x198>)
 8009cee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009cf0:	f7fe ffca 	bl	8008c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00b      	beq.n	8009d16 <pvPortMalloc+0x17a>
	__asm volatile
 8009cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d02:	f383 8811 	msr	BASEPRI, r3
 8009d06:	f3bf 8f6f 	isb	sy
 8009d0a:	f3bf 8f4f 	dsb	sy
 8009d0e:	60fb      	str	r3, [r7, #12]
}
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	e7fd      	b.n	8009d12 <pvPortMalloc+0x176>
	return pvReturn;
 8009d16:	69fb      	ldr	r3, [r7, #28]
}
 8009d18:	4618      	mov	r0, r3
 8009d1a:	3728      	adds	r7, #40	@ 0x28
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	20002fe0 	.word	0x20002fe0
 8009d24:	20002ff4 	.word	0x20002ff4
 8009d28:	20002fe4 	.word	0x20002fe4
 8009d2c:	20002fd8 	.word	0x20002fd8
 8009d30:	20002fe8 	.word	0x20002fe8
 8009d34:	20002fec 	.word	0x20002fec

08009d38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d04f      	beq.n	8009dea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d4a:	2308      	movs	r3, #8
 8009d4c:	425b      	negs	r3, r3
 8009d4e:	697a      	ldr	r2, [r7, #20]
 8009d50:	4413      	add	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009d54:	697b      	ldr	r3, [r7, #20]
 8009d56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	685a      	ldr	r2, [r3, #4]
 8009d5c:	4b25      	ldr	r3, [pc, #148]	@ (8009df4 <vPortFree+0xbc>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4013      	ands	r3, r2
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10b      	bne.n	8009d7e <vPortFree+0x46>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	60fb      	str	r3, [r7, #12]
}
 8009d78:	bf00      	nop
 8009d7a:	bf00      	nop
 8009d7c:	e7fd      	b.n	8009d7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00b      	beq.n	8009d9e <vPortFree+0x66>
	__asm volatile
 8009d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d8a:	f383 8811 	msr	BASEPRI, r3
 8009d8e:	f3bf 8f6f 	isb	sy
 8009d92:	f3bf 8f4f 	dsb	sy
 8009d96:	60bb      	str	r3, [r7, #8]
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	4b14      	ldr	r3, [pc, #80]	@ (8009df4 <vPortFree+0xbc>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4013      	ands	r3, r2
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d01e      	beq.n	8009dea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d11a      	bne.n	8009dea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	4b0e      	ldr	r3, [pc, #56]	@ (8009df4 <vPortFree+0xbc>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	43db      	mvns	r3, r3
 8009dbe:	401a      	ands	r2, r3
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009dc4:	f7fe ff52 	bl	8008c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	685a      	ldr	r2, [r3, #4]
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8009df8 <vPortFree+0xc0>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	4a09      	ldr	r2, [pc, #36]	@ (8009df8 <vPortFree+0xc0>)
 8009dd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009dd6:	6938      	ldr	r0, [r7, #16]
 8009dd8:	f000 f874 	bl	8009ec4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ddc:	4b07      	ldr	r3, [pc, #28]	@ (8009dfc <vPortFree+0xc4>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	3301      	adds	r3, #1
 8009de2:	4a06      	ldr	r2, [pc, #24]	@ (8009dfc <vPortFree+0xc4>)
 8009de4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009de6:	f7fe ff4f 	bl	8008c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009dea:	bf00      	nop
 8009dec:	3718      	adds	r7, #24
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	20002ff4 	.word	0x20002ff4
 8009df8:	20002fe4 	.word	0x20002fe4
 8009dfc:	20002ff0 	.word	0x20002ff0

08009e00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e00:	b480      	push	{r7}
 8009e02:	b085      	sub	sp, #20
 8009e04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e06:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009e0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e0c:	4b27      	ldr	r3, [pc, #156]	@ (8009eac <prvHeapInit+0xac>)
 8009e0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00c      	beq.n	8009e34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	3307      	adds	r3, #7
 8009e1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f023 0307 	bic.w	r3, r3, #7
 8009e26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e28:	68ba      	ldr	r2, [r7, #8]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8009eac <prvHeapInit+0xac>)
 8009e30:	4413      	add	r3, r2
 8009e32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e38:	4a1d      	ldr	r2, [pc, #116]	@ (8009eb0 <prvHeapInit+0xb0>)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb0 <prvHeapInit+0xb0>)
 8009e40:	2200      	movs	r2, #0
 8009e42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	4413      	add	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e4c:	2208      	movs	r2, #8
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	1a9b      	subs	r3, r3, r2
 8009e52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f023 0307 	bic.w	r3, r3, #7
 8009e5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4a15      	ldr	r2, [pc, #84]	@ (8009eb4 <prvHeapInit+0xb4>)
 8009e60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009e62:	4b14      	ldr	r3, [pc, #80]	@ (8009eb4 <prvHeapInit+0xb4>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2200      	movs	r2, #0
 8009e68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009e6a:	4b12      	ldr	r3, [pc, #72]	@ (8009eb4 <prvHeapInit+0xb4>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	1ad2      	subs	r2, r2, r3
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009e80:	4b0c      	ldr	r3, [pc, #48]	@ (8009eb4 <prvHeapInit+0xb4>)
 8009e82:	681a      	ldr	r2, [r3, #0]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8009eb8 <prvHeapInit+0xb8>)
 8009e8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	4a09      	ldr	r2, [pc, #36]	@ (8009ebc <prvHeapInit+0xbc>)
 8009e96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009e98:	4b09      	ldr	r3, [pc, #36]	@ (8009ec0 <prvHeapInit+0xc0>)
 8009e9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009e9e:	601a      	str	r2, [r3, #0]
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr
 8009eac:	200008c8 	.word	0x200008c8
 8009eb0:	20002fd8 	.word	0x20002fd8
 8009eb4:	20002fe0 	.word	0x20002fe0
 8009eb8:	20002fe8 	.word	0x20002fe8
 8009ebc:	20002fe4 	.word	0x20002fe4
 8009ec0:	20002ff4 	.word	0x20002ff4

08009ec4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ecc:	4b28      	ldr	r3, [pc, #160]	@ (8009f70 <prvInsertBlockIntoFreeList+0xac>)
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	e002      	b.n	8009ed8 <prvInsertBlockIntoFreeList+0x14>
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d8f7      	bhi.n	8009ed2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	68ba      	ldr	r2, [r7, #8]
 8009eec:	4413      	add	r3, r2
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d108      	bne.n	8009f06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
 8009efc:	441a      	add	r2, r3
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	68ba      	ldr	r2, [r7, #8]
 8009f10:	441a      	add	r2, r3
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d118      	bne.n	8009f4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4b15      	ldr	r3, [pc, #84]	@ (8009f74 <prvInsertBlockIntoFreeList+0xb0>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d00d      	beq.n	8009f42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685a      	ldr	r2, [r3, #4]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	441a      	add	r2, r3
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	681a      	ldr	r2, [r3, #0]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	601a      	str	r2, [r3, #0]
 8009f40:	e008      	b.n	8009f54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f42:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <prvInsertBlockIntoFreeList+0xb0>)
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	e003      	b.n	8009f54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681a      	ldr	r2, [r3, #0]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d002      	beq.n	8009f62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20002fd8 	.word	0x20002fd8
 8009f74:	20002fe0 	.word	0x20002fe0

08009f78 <atoi>:
 8009f78:	220a      	movs	r2, #10
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	f000 b87a 	b.w	800a074 <strtol>

08009f80 <_strtol_l.constprop.0>:
 8009f80:	2b24      	cmp	r3, #36	@ 0x24
 8009f82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f86:	4686      	mov	lr, r0
 8009f88:	4690      	mov	r8, r2
 8009f8a:	d801      	bhi.n	8009f90 <_strtol_l.constprop.0+0x10>
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	d106      	bne.n	8009f9e <_strtol_l.constprop.0+0x1e>
 8009f90:	f000 fb2e 	bl	800a5f0 <__errno>
 8009f94:	2316      	movs	r3, #22
 8009f96:	6003      	str	r3, [r0, #0]
 8009f98:	2000      	movs	r0, #0
 8009f9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f9e:	4834      	ldr	r0, [pc, #208]	@ (800a070 <_strtol_l.constprop.0+0xf0>)
 8009fa0:	460d      	mov	r5, r1
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009fa8:	5d06      	ldrb	r6, [r0, r4]
 8009faa:	f016 0608 	ands.w	r6, r6, #8
 8009fae:	d1f8      	bne.n	8009fa2 <_strtol_l.constprop.0+0x22>
 8009fb0:	2c2d      	cmp	r4, #45	@ 0x2d
 8009fb2:	d12d      	bne.n	800a010 <_strtol_l.constprop.0+0x90>
 8009fb4:	782c      	ldrb	r4, [r5, #0]
 8009fb6:	2601      	movs	r6, #1
 8009fb8:	1c95      	adds	r5, r2, #2
 8009fba:	f033 0210 	bics.w	r2, r3, #16
 8009fbe:	d109      	bne.n	8009fd4 <_strtol_l.constprop.0+0x54>
 8009fc0:	2c30      	cmp	r4, #48	@ 0x30
 8009fc2:	d12a      	bne.n	800a01a <_strtol_l.constprop.0+0x9a>
 8009fc4:	782a      	ldrb	r2, [r5, #0]
 8009fc6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009fca:	2a58      	cmp	r2, #88	@ 0x58
 8009fcc:	d125      	bne.n	800a01a <_strtol_l.constprop.0+0x9a>
 8009fce:	786c      	ldrb	r4, [r5, #1]
 8009fd0:	2310      	movs	r3, #16
 8009fd2:	3502      	adds	r5, #2
 8009fd4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009fd8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009fdc:	2200      	movs	r2, #0
 8009fde:	fbbc f9f3 	udiv	r9, ip, r3
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	fb03 ca19 	mls	sl, r3, r9, ip
 8009fe8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009fec:	2f09      	cmp	r7, #9
 8009fee:	d81b      	bhi.n	800a028 <_strtol_l.constprop.0+0xa8>
 8009ff0:	463c      	mov	r4, r7
 8009ff2:	42a3      	cmp	r3, r4
 8009ff4:	dd27      	ble.n	800a046 <_strtol_l.constprop.0+0xc6>
 8009ff6:	1c57      	adds	r7, r2, #1
 8009ff8:	d007      	beq.n	800a00a <_strtol_l.constprop.0+0x8a>
 8009ffa:	4581      	cmp	r9, r0
 8009ffc:	d320      	bcc.n	800a040 <_strtol_l.constprop.0+0xc0>
 8009ffe:	d101      	bne.n	800a004 <_strtol_l.constprop.0+0x84>
 800a000:	45a2      	cmp	sl, r4
 800a002:	db1d      	blt.n	800a040 <_strtol_l.constprop.0+0xc0>
 800a004:	fb00 4003 	mla	r0, r0, r3, r4
 800a008:	2201      	movs	r2, #1
 800a00a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a00e:	e7eb      	b.n	8009fe8 <_strtol_l.constprop.0+0x68>
 800a010:	2c2b      	cmp	r4, #43	@ 0x2b
 800a012:	bf04      	itt	eq
 800a014:	782c      	ldrbeq	r4, [r5, #0]
 800a016:	1c95      	addeq	r5, r2, #2
 800a018:	e7cf      	b.n	8009fba <_strtol_l.constprop.0+0x3a>
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d1da      	bne.n	8009fd4 <_strtol_l.constprop.0+0x54>
 800a01e:	2c30      	cmp	r4, #48	@ 0x30
 800a020:	bf0c      	ite	eq
 800a022:	2308      	moveq	r3, #8
 800a024:	230a      	movne	r3, #10
 800a026:	e7d5      	b.n	8009fd4 <_strtol_l.constprop.0+0x54>
 800a028:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a02c:	2f19      	cmp	r7, #25
 800a02e:	d801      	bhi.n	800a034 <_strtol_l.constprop.0+0xb4>
 800a030:	3c37      	subs	r4, #55	@ 0x37
 800a032:	e7de      	b.n	8009ff2 <_strtol_l.constprop.0+0x72>
 800a034:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a038:	2f19      	cmp	r7, #25
 800a03a:	d804      	bhi.n	800a046 <_strtol_l.constprop.0+0xc6>
 800a03c:	3c57      	subs	r4, #87	@ 0x57
 800a03e:	e7d8      	b.n	8009ff2 <_strtol_l.constprop.0+0x72>
 800a040:	f04f 32ff 	mov.w	r2, #4294967295
 800a044:	e7e1      	b.n	800a00a <_strtol_l.constprop.0+0x8a>
 800a046:	1c53      	adds	r3, r2, #1
 800a048:	d108      	bne.n	800a05c <_strtol_l.constprop.0+0xdc>
 800a04a:	2322      	movs	r3, #34	@ 0x22
 800a04c:	f8ce 3000 	str.w	r3, [lr]
 800a050:	4660      	mov	r0, ip
 800a052:	f1b8 0f00 	cmp.w	r8, #0
 800a056:	d0a0      	beq.n	8009f9a <_strtol_l.constprop.0+0x1a>
 800a058:	1e69      	subs	r1, r5, #1
 800a05a:	e006      	b.n	800a06a <_strtol_l.constprop.0+0xea>
 800a05c:	b106      	cbz	r6, 800a060 <_strtol_l.constprop.0+0xe0>
 800a05e:	4240      	negs	r0, r0
 800a060:	f1b8 0f00 	cmp.w	r8, #0
 800a064:	d099      	beq.n	8009f9a <_strtol_l.constprop.0+0x1a>
 800a066:	2a00      	cmp	r2, #0
 800a068:	d1f6      	bne.n	800a058 <_strtol_l.constprop.0+0xd8>
 800a06a:	f8c8 1000 	str.w	r1, [r8]
 800a06e:	e794      	b.n	8009f9a <_strtol_l.constprop.0+0x1a>
 800a070:	0800b4d9 	.word	0x0800b4d9

0800a074 <strtol>:
 800a074:	4613      	mov	r3, r2
 800a076:	460a      	mov	r2, r1
 800a078:	4601      	mov	r1, r0
 800a07a:	4802      	ldr	r0, [pc, #8]	@ (800a084 <strtol+0x10>)
 800a07c:	6800      	ldr	r0, [r0, #0]
 800a07e:	f7ff bf7f 	b.w	8009f80 <_strtol_l.constprop.0>
 800a082:	bf00      	nop
 800a084:	2000012c 	.word	0x2000012c

0800a088 <std>:
 800a088:	2300      	movs	r3, #0
 800a08a:	b510      	push	{r4, lr}
 800a08c:	4604      	mov	r4, r0
 800a08e:	e9c0 3300 	strd	r3, r3, [r0]
 800a092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a096:	6083      	str	r3, [r0, #8]
 800a098:	8181      	strh	r1, [r0, #12]
 800a09a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a09c:	81c2      	strh	r2, [r0, #14]
 800a09e:	6183      	str	r3, [r0, #24]
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	2208      	movs	r2, #8
 800a0a4:	305c      	adds	r0, #92	@ 0x5c
 800a0a6:	f000 f9f9 	bl	800a49c <memset>
 800a0aa:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e0 <std+0x58>)
 800a0ac:	6263      	str	r3, [r4, #36]	@ 0x24
 800a0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e4 <std+0x5c>)
 800a0b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0e8 <std+0x60>)
 800a0b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a0ec <std+0x64>)
 800a0b8:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800a0f0 <std+0x68>)
 800a0bc:	6224      	str	r4, [r4, #32]
 800a0be:	429c      	cmp	r4, r3
 800a0c0:	d006      	beq.n	800a0d0 <std+0x48>
 800a0c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0c6:	4294      	cmp	r4, r2
 800a0c8:	d002      	beq.n	800a0d0 <std+0x48>
 800a0ca:	33d0      	adds	r3, #208	@ 0xd0
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	d105      	bne.n	800a0dc <std+0x54>
 800a0d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d8:	f000 bab4 	b.w	800a644 <__retarget_lock_init_recursive>
 800a0dc:	bd10      	pop	{r4, pc}
 800a0de:	bf00      	nop
 800a0e0:	0800a2ed 	.word	0x0800a2ed
 800a0e4:	0800a30f 	.word	0x0800a30f
 800a0e8:	0800a347 	.word	0x0800a347
 800a0ec:	0800a36b 	.word	0x0800a36b
 800a0f0:	20002ff8 	.word	0x20002ff8

0800a0f4 <stdio_exit_handler>:
 800a0f4:	4a02      	ldr	r2, [pc, #8]	@ (800a100 <stdio_exit_handler+0xc>)
 800a0f6:	4903      	ldr	r1, [pc, #12]	@ (800a104 <stdio_exit_handler+0x10>)
 800a0f8:	4803      	ldr	r0, [pc, #12]	@ (800a108 <stdio_exit_handler+0x14>)
 800a0fa:	f000 b869 	b.w	800a1d0 <_fwalk_sglue>
 800a0fe:	bf00      	nop
 800a100:	20000120 	.word	0x20000120
 800a104:	0800af31 	.word	0x0800af31
 800a108:	20000130 	.word	0x20000130

0800a10c <cleanup_stdio>:
 800a10c:	6841      	ldr	r1, [r0, #4]
 800a10e:	4b0c      	ldr	r3, [pc, #48]	@ (800a140 <cleanup_stdio+0x34>)
 800a110:	4299      	cmp	r1, r3
 800a112:	b510      	push	{r4, lr}
 800a114:	4604      	mov	r4, r0
 800a116:	d001      	beq.n	800a11c <cleanup_stdio+0x10>
 800a118:	f000 ff0a 	bl	800af30 <_fflush_r>
 800a11c:	68a1      	ldr	r1, [r4, #8]
 800a11e:	4b09      	ldr	r3, [pc, #36]	@ (800a144 <cleanup_stdio+0x38>)
 800a120:	4299      	cmp	r1, r3
 800a122:	d002      	beq.n	800a12a <cleanup_stdio+0x1e>
 800a124:	4620      	mov	r0, r4
 800a126:	f000 ff03 	bl	800af30 <_fflush_r>
 800a12a:	68e1      	ldr	r1, [r4, #12]
 800a12c:	4b06      	ldr	r3, [pc, #24]	@ (800a148 <cleanup_stdio+0x3c>)
 800a12e:	4299      	cmp	r1, r3
 800a130:	d004      	beq.n	800a13c <cleanup_stdio+0x30>
 800a132:	4620      	mov	r0, r4
 800a134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a138:	f000 befa 	b.w	800af30 <_fflush_r>
 800a13c:	bd10      	pop	{r4, pc}
 800a13e:	bf00      	nop
 800a140:	20002ff8 	.word	0x20002ff8
 800a144:	20003060 	.word	0x20003060
 800a148:	200030c8 	.word	0x200030c8

0800a14c <global_stdio_init.part.0>:
 800a14c:	b510      	push	{r4, lr}
 800a14e:	4b0b      	ldr	r3, [pc, #44]	@ (800a17c <global_stdio_init.part.0+0x30>)
 800a150:	4c0b      	ldr	r4, [pc, #44]	@ (800a180 <global_stdio_init.part.0+0x34>)
 800a152:	4a0c      	ldr	r2, [pc, #48]	@ (800a184 <global_stdio_init.part.0+0x38>)
 800a154:	601a      	str	r2, [r3, #0]
 800a156:	4620      	mov	r0, r4
 800a158:	2200      	movs	r2, #0
 800a15a:	2104      	movs	r1, #4
 800a15c:	f7ff ff94 	bl	800a088 <std>
 800a160:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a164:	2201      	movs	r2, #1
 800a166:	2109      	movs	r1, #9
 800a168:	f7ff ff8e 	bl	800a088 <std>
 800a16c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a170:	2202      	movs	r2, #2
 800a172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a176:	2112      	movs	r1, #18
 800a178:	f7ff bf86 	b.w	800a088 <std>
 800a17c:	20003130 	.word	0x20003130
 800a180:	20002ff8 	.word	0x20002ff8
 800a184:	0800a0f5 	.word	0x0800a0f5

0800a188 <__sfp_lock_acquire>:
 800a188:	4801      	ldr	r0, [pc, #4]	@ (800a190 <__sfp_lock_acquire+0x8>)
 800a18a:	f000 ba5c 	b.w	800a646 <__retarget_lock_acquire_recursive>
 800a18e:	bf00      	nop
 800a190:	20003139 	.word	0x20003139

0800a194 <__sfp_lock_release>:
 800a194:	4801      	ldr	r0, [pc, #4]	@ (800a19c <__sfp_lock_release+0x8>)
 800a196:	f000 ba57 	b.w	800a648 <__retarget_lock_release_recursive>
 800a19a:	bf00      	nop
 800a19c:	20003139 	.word	0x20003139

0800a1a0 <__sinit>:
 800a1a0:	b510      	push	{r4, lr}
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	f7ff fff0 	bl	800a188 <__sfp_lock_acquire>
 800a1a8:	6a23      	ldr	r3, [r4, #32]
 800a1aa:	b11b      	cbz	r3, 800a1b4 <__sinit+0x14>
 800a1ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1b0:	f7ff bff0 	b.w	800a194 <__sfp_lock_release>
 800a1b4:	4b04      	ldr	r3, [pc, #16]	@ (800a1c8 <__sinit+0x28>)
 800a1b6:	6223      	str	r3, [r4, #32]
 800a1b8:	4b04      	ldr	r3, [pc, #16]	@ (800a1cc <__sinit+0x2c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1f5      	bne.n	800a1ac <__sinit+0xc>
 800a1c0:	f7ff ffc4 	bl	800a14c <global_stdio_init.part.0>
 800a1c4:	e7f2      	b.n	800a1ac <__sinit+0xc>
 800a1c6:	bf00      	nop
 800a1c8:	0800a10d 	.word	0x0800a10d
 800a1cc:	20003130 	.word	0x20003130

0800a1d0 <_fwalk_sglue>:
 800a1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d4:	4607      	mov	r7, r0
 800a1d6:	4688      	mov	r8, r1
 800a1d8:	4614      	mov	r4, r2
 800a1da:	2600      	movs	r6, #0
 800a1dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1e0:	f1b9 0901 	subs.w	r9, r9, #1
 800a1e4:	d505      	bpl.n	800a1f2 <_fwalk_sglue+0x22>
 800a1e6:	6824      	ldr	r4, [r4, #0]
 800a1e8:	2c00      	cmp	r4, #0
 800a1ea:	d1f7      	bne.n	800a1dc <_fwalk_sglue+0xc>
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f2:	89ab      	ldrh	r3, [r5, #12]
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d907      	bls.n	800a208 <_fwalk_sglue+0x38>
 800a1f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	d003      	beq.n	800a208 <_fwalk_sglue+0x38>
 800a200:	4629      	mov	r1, r5
 800a202:	4638      	mov	r0, r7
 800a204:	47c0      	blx	r8
 800a206:	4306      	orrs	r6, r0
 800a208:	3568      	adds	r5, #104	@ 0x68
 800a20a:	e7e9      	b.n	800a1e0 <_fwalk_sglue+0x10>

0800a20c <iprintf>:
 800a20c:	b40f      	push	{r0, r1, r2, r3}
 800a20e:	b507      	push	{r0, r1, r2, lr}
 800a210:	4906      	ldr	r1, [pc, #24]	@ (800a22c <iprintf+0x20>)
 800a212:	ab04      	add	r3, sp, #16
 800a214:	6808      	ldr	r0, [r1, #0]
 800a216:	f853 2b04 	ldr.w	r2, [r3], #4
 800a21a:	6881      	ldr	r1, [r0, #8]
 800a21c:	9301      	str	r3, [sp, #4]
 800a21e:	f000 fb5d 	bl	800a8dc <_vfiprintf_r>
 800a222:	b003      	add	sp, #12
 800a224:	f85d eb04 	ldr.w	lr, [sp], #4
 800a228:	b004      	add	sp, #16
 800a22a:	4770      	bx	lr
 800a22c:	2000012c 	.word	0x2000012c

0800a230 <_puts_r>:
 800a230:	6a03      	ldr	r3, [r0, #32]
 800a232:	b570      	push	{r4, r5, r6, lr}
 800a234:	6884      	ldr	r4, [r0, #8]
 800a236:	4605      	mov	r5, r0
 800a238:	460e      	mov	r6, r1
 800a23a:	b90b      	cbnz	r3, 800a240 <_puts_r+0x10>
 800a23c:	f7ff ffb0 	bl	800a1a0 <__sinit>
 800a240:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a242:	07db      	lsls	r3, r3, #31
 800a244:	d405      	bmi.n	800a252 <_puts_r+0x22>
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	0598      	lsls	r0, r3, #22
 800a24a:	d402      	bmi.n	800a252 <_puts_r+0x22>
 800a24c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a24e:	f000 f9fa 	bl	800a646 <__retarget_lock_acquire_recursive>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	0719      	lsls	r1, r3, #28
 800a256:	d502      	bpl.n	800a25e <_puts_r+0x2e>
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d135      	bne.n	800a2ca <_puts_r+0x9a>
 800a25e:	4621      	mov	r1, r4
 800a260:	4628      	mov	r0, r5
 800a262:	f000 f8c5 	bl	800a3f0 <__swsetup_r>
 800a266:	b380      	cbz	r0, 800a2ca <_puts_r+0x9a>
 800a268:	f04f 35ff 	mov.w	r5, #4294967295
 800a26c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a26e:	07da      	lsls	r2, r3, #31
 800a270:	d405      	bmi.n	800a27e <_puts_r+0x4e>
 800a272:	89a3      	ldrh	r3, [r4, #12]
 800a274:	059b      	lsls	r3, r3, #22
 800a276:	d402      	bmi.n	800a27e <_puts_r+0x4e>
 800a278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a27a:	f000 f9e5 	bl	800a648 <__retarget_lock_release_recursive>
 800a27e:	4628      	mov	r0, r5
 800a280:	bd70      	pop	{r4, r5, r6, pc}
 800a282:	2b00      	cmp	r3, #0
 800a284:	da04      	bge.n	800a290 <_puts_r+0x60>
 800a286:	69a2      	ldr	r2, [r4, #24]
 800a288:	429a      	cmp	r2, r3
 800a28a:	dc17      	bgt.n	800a2bc <_puts_r+0x8c>
 800a28c:	290a      	cmp	r1, #10
 800a28e:	d015      	beq.n	800a2bc <_puts_r+0x8c>
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	1c5a      	adds	r2, r3, #1
 800a294:	6022      	str	r2, [r4, #0]
 800a296:	7019      	strb	r1, [r3, #0]
 800a298:	68a3      	ldr	r3, [r4, #8]
 800a29a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a29e:	3b01      	subs	r3, #1
 800a2a0:	60a3      	str	r3, [r4, #8]
 800a2a2:	2900      	cmp	r1, #0
 800a2a4:	d1ed      	bne.n	800a282 <_puts_r+0x52>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	da11      	bge.n	800a2ce <_puts_r+0x9e>
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	210a      	movs	r1, #10
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 f85f 	bl	800a372 <__swbuf_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d0d7      	beq.n	800a268 <_puts_r+0x38>
 800a2b8:	250a      	movs	r5, #10
 800a2ba:	e7d7      	b.n	800a26c <_puts_r+0x3c>
 800a2bc:	4622      	mov	r2, r4
 800a2be:	4628      	mov	r0, r5
 800a2c0:	f000 f857 	bl	800a372 <__swbuf_r>
 800a2c4:	3001      	adds	r0, #1
 800a2c6:	d1e7      	bne.n	800a298 <_puts_r+0x68>
 800a2c8:	e7ce      	b.n	800a268 <_puts_r+0x38>
 800a2ca:	3e01      	subs	r6, #1
 800a2cc:	e7e4      	b.n	800a298 <_puts_r+0x68>
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	1c5a      	adds	r2, r3, #1
 800a2d2:	6022      	str	r2, [r4, #0]
 800a2d4:	220a      	movs	r2, #10
 800a2d6:	701a      	strb	r2, [r3, #0]
 800a2d8:	e7ee      	b.n	800a2b8 <_puts_r+0x88>
	...

0800a2dc <puts>:
 800a2dc:	4b02      	ldr	r3, [pc, #8]	@ (800a2e8 <puts+0xc>)
 800a2de:	4601      	mov	r1, r0
 800a2e0:	6818      	ldr	r0, [r3, #0]
 800a2e2:	f7ff bfa5 	b.w	800a230 <_puts_r>
 800a2e6:	bf00      	nop
 800a2e8:	2000012c 	.word	0x2000012c

0800a2ec <__sread>:
 800a2ec:	b510      	push	{r4, lr}
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2f4:	f000 f958 	bl	800a5a8 <_read_r>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	bfab      	itete	ge
 800a2fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a300:	181b      	addge	r3, r3, r0
 800a302:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a306:	bfac      	ite	ge
 800a308:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a30a:	81a3      	strhlt	r3, [r4, #12]
 800a30c:	bd10      	pop	{r4, pc}

0800a30e <__swrite>:
 800a30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a312:	461f      	mov	r7, r3
 800a314:	898b      	ldrh	r3, [r1, #12]
 800a316:	05db      	lsls	r3, r3, #23
 800a318:	4605      	mov	r5, r0
 800a31a:	460c      	mov	r4, r1
 800a31c:	4616      	mov	r6, r2
 800a31e:	d505      	bpl.n	800a32c <__swrite+0x1e>
 800a320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a324:	2302      	movs	r3, #2
 800a326:	2200      	movs	r2, #0
 800a328:	f000 f92c 	bl	800a584 <_lseek_r>
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a332:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a336:	81a3      	strh	r3, [r4, #12]
 800a338:	4632      	mov	r2, r6
 800a33a:	463b      	mov	r3, r7
 800a33c:	4628      	mov	r0, r5
 800a33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a342:	f000 b943 	b.w	800a5cc <_write_r>

0800a346 <__sseek>:
 800a346:	b510      	push	{r4, lr}
 800a348:	460c      	mov	r4, r1
 800a34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a34e:	f000 f919 	bl	800a584 <_lseek_r>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	bf15      	itete	ne
 800a358:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a35a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a35e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a362:	81a3      	strheq	r3, [r4, #12]
 800a364:	bf18      	it	ne
 800a366:	81a3      	strhne	r3, [r4, #12]
 800a368:	bd10      	pop	{r4, pc}

0800a36a <__sclose>:
 800a36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a36e:	f000 b8f9 	b.w	800a564 <_close_r>

0800a372 <__swbuf_r>:
 800a372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a374:	460e      	mov	r6, r1
 800a376:	4614      	mov	r4, r2
 800a378:	4605      	mov	r5, r0
 800a37a:	b118      	cbz	r0, 800a384 <__swbuf_r+0x12>
 800a37c:	6a03      	ldr	r3, [r0, #32]
 800a37e:	b90b      	cbnz	r3, 800a384 <__swbuf_r+0x12>
 800a380:	f7ff ff0e 	bl	800a1a0 <__sinit>
 800a384:	69a3      	ldr	r3, [r4, #24]
 800a386:	60a3      	str	r3, [r4, #8]
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	071a      	lsls	r2, r3, #28
 800a38c:	d501      	bpl.n	800a392 <__swbuf_r+0x20>
 800a38e:	6923      	ldr	r3, [r4, #16]
 800a390:	b943      	cbnz	r3, 800a3a4 <__swbuf_r+0x32>
 800a392:	4621      	mov	r1, r4
 800a394:	4628      	mov	r0, r5
 800a396:	f000 f82b 	bl	800a3f0 <__swsetup_r>
 800a39a:	b118      	cbz	r0, 800a3a4 <__swbuf_r+0x32>
 800a39c:	f04f 37ff 	mov.w	r7, #4294967295
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a4:	6823      	ldr	r3, [r4, #0]
 800a3a6:	6922      	ldr	r2, [r4, #16]
 800a3a8:	1a98      	subs	r0, r3, r2
 800a3aa:	6963      	ldr	r3, [r4, #20]
 800a3ac:	b2f6      	uxtb	r6, r6
 800a3ae:	4283      	cmp	r3, r0
 800a3b0:	4637      	mov	r7, r6
 800a3b2:	dc05      	bgt.n	800a3c0 <__swbuf_r+0x4e>
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f000 fdba 	bl	800af30 <_fflush_r>
 800a3bc:	2800      	cmp	r0, #0
 800a3be:	d1ed      	bne.n	800a39c <__swbuf_r+0x2a>
 800a3c0:	68a3      	ldr	r3, [r4, #8]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	60a3      	str	r3, [r4, #8]
 800a3c6:	6823      	ldr	r3, [r4, #0]
 800a3c8:	1c5a      	adds	r2, r3, #1
 800a3ca:	6022      	str	r2, [r4, #0]
 800a3cc:	701e      	strb	r6, [r3, #0]
 800a3ce:	6962      	ldr	r2, [r4, #20]
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d004      	beq.n	800a3e0 <__swbuf_r+0x6e>
 800a3d6:	89a3      	ldrh	r3, [r4, #12]
 800a3d8:	07db      	lsls	r3, r3, #31
 800a3da:	d5e1      	bpl.n	800a3a0 <__swbuf_r+0x2e>
 800a3dc:	2e0a      	cmp	r6, #10
 800a3de:	d1df      	bne.n	800a3a0 <__swbuf_r+0x2e>
 800a3e0:	4621      	mov	r1, r4
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f000 fda4 	bl	800af30 <_fflush_r>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	d0d9      	beq.n	800a3a0 <__swbuf_r+0x2e>
 800a3ec:	e7d6      	b.n	800a39c <__swbuf_r+0x2a>
	...

0800a3f0 <__swsetup_r>:
 800a3f0:	b538      	push	{r3, r4, r5, lr}
 800a3f2:	4b29      	ldr	r3, [pc, #164]	@ (800a498 <__swsetup_r+0xa8>)
 800a3f4:	4605      	mov	r5, r0
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	460c      	mov	r4, r1
 800a3fa:	b118      	cbz	r0, 800a404 <__swsetup_r+0x14>
 800a3fc:	6a03      	ldr	r3, [r0, #32]
 800a3fe:	b90b      	cbnz	r3, 800a404 <__swsetup_r+0x14>
 800a400:	f7ff fece 	bl	800a1a0 <__sinit>
 800a404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a408:	0719      	lsls	r1, r3, #28
 800a40a:	d422      	bmi.n	800a452 <__swsetup_r+0x62>
 800a40c:	06da      	lsls	r2, r3, #27
 800a40e:	d407      	bmi.n	800a420 <__swsetup_r+0x30>
 800a410:	2209      	movs	r2, #9
 800a412:	602a      	str	r2, [r5, #0]
 800a414:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295
 800a41e:	e033      	b.n	800a488 <__swsetup_r+0x98>
 800a420:	0758      	lsls	r0, r3, #29
 800a422:	d512      	bpl.n	800a44a <__swsetup_r+0x5a>
 800a424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a426:	b141      	cbz	r1, 800a43a <__swsetup_r+0x4a>
 800a428:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a42c:	4299      	cmp	r1, r3
 800a42e:	d002      	beq.n	800a436 <__swsetup_r+0x46>
 800a430:	4628      	mov	r0, r5
 800a432:	f000 f929 	bl	800a688 <_free_r>
 800a436:	2300      	movs	r3, #0
 800a438:	6363      	str	r3, [r4, #52]	@ 0x34
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a440:	81a3      	strh	r3, [r4, #12]
 800a442:	2300      	movs	r3, #0
 800a444:	6063      	str	r3, [r4, #4]
 800a446:	6923      	ldr	r3, [r4, #16]
 800a448:	6023      	str	r3, [r4, #0]
 800a44a:	89a3      	ldrh	r3, [r4, #12]
 800a44c:	f043 0308 	orr.w	r3, r3, #8
 800a450:	81a3      	strh	r3, [r4, #12]
 800a452:	6923      	ldr	r3, [r4, #16]
 800a454:	b94b      	cbnz	r3, 800a46a <__swsetup_r+0x7a>
 800a456:	89a3      	ldrh	r3, [r4, #12]
 800a458:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a45c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a460:	d003      	beq.n	800a46a <__swsetup_r+0x7a>
 800a462:	4621      	mov	r1, r4
 800a464:	4628      	mov	r0, r5
 800a466:	f000 fdc3 	bl	800aff0 <__smakebuf_r>
 800a46a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a46e:	f013 0201 	ands.w	r2, r3, #1
 800a472:	d00a      	beq.n	800a48a <__swsetup_r+0x9a>
 800a474:	2200      	movs	r2, #0
 800a476:	60a2      	str	r2, [r4, #8]
 800a478:	6962      	ldr	r2, [r4, #20]
 800a47a:	4252      	negs	r2, r2
 800a47c:	61a2      	str	r2, [r4, #24]
 800a47e:	6922      	ldr	r2, [r4, #16]
 800a480:	b942      	cbnz	r2, 800a494 <__swsetup_r+0xa4>
 800a482:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a486:	d1c5      	bne.n	800a414 <__swsetup_r+0x24>
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	0799      	lsls	r1, r3, #30
 800a48c:	bf58      	it	pl
 800a48e:	6962      	ldrpl	r2, [r4, #20]
 800a490:	60a2      	str	r2, [r4, #8]
 800a492:	e7f4      	b.n	800a47e <__swsetup_r+0x8e>
 800a494:	2000      	movs	r0, #0
 800a496:	e7f7      	b.n	800a488 <__swsetup_r+0x98>
 800a498:	2000012c 	.word	0x2000012c

0800a49c <memset>:
 800a49c:	4402      	add	r2, r0
 800a49e:	4603      	mov	r3, r0
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d100      	bne.n	800a4a6 <memset+0xa>
 800a4a4:	4770      	bx	lr
 800a4a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4aa:	e7f9      	b.n	800a4a0 <memset+0x4>

0800a4ac <strtok>:
 800a4ac:	4b16      	ldr	r3, [pc, #88]	@ (800a508 <strtok+0x5c>)
 800a4ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b2:	681f      	ldr	r7, [r3, #0]
 800a4b4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	460e      	mov	r6, r1
 800a4ba:	b9ec      	cbnz	r4, 800a4f8 <strtok+0x4c>
 800a4bc:	2050      	movs	r0, #80	@ 0x50
 800a4be:	f000 f92d 	bl	800a71c <malloc>
 800a4c2:	4602      	mov	r2, r0
 800a4c4:	6478      	str	r0, [r7, #68]	@ 0x44
 800a4c6:	b920      	cbnz	r0, 800a4d2 <strtok+0x26>
 800a4c8:	4b10      	ldr	r3, [pc, #64]	@ (800a50c <strtok+0x60>)
 800a4ca:	4811      	ldr	r0, [pc, #68]	@ (800a510 <strtok+0x64>)
 800a4cc:	215b      	movs	r1, #91	@ 0x5b
 800a4ce:	f000 f8bd 	bl	800a64c <__assert_func>
 800a4d2:	e9c0 4400 	strd	r4, r4, [r0]
 800a4d6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a4da:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a4de:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a4e2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a4e6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a4ea:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a4ee:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a4f2:	6184      	str	r4, [r0, #24]
 800a4f4:	7704      	strb	r4, [r0, #28]
 800a4f6:	6244      	str	r4, [r0, #36]	@ 0x24
 800a4f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	2301      	movs	r3, #1
 800a500:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a504:	f000 b806 	b.w	800a514 <__strtok_r>
 800a508:	2000012c 	.word	0x2000012c
 800a50c:	0800b5d9 	.word	0x0800b5d9
 800a510:	0800b5f0 	.word	0x0800b5f0

0800a514 <__strtok_r>:
 800a514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a516:	4604      	mov	r4, r0
 800a518:	b908      	cbnz	r0, 800a51e <__strtok_r+0xa>
 800a51a:	6814      	ldr	r4, [r2, #0]
 800a51c:	b144      	cbz	r4, 800a530 <__strtok_r+0x1c>
 800a51e:	4620      	mov	r0, r4
 800a520:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a524:	460f      	mov	r7, r1
 800a526:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a52a:	b91e      	cbnz	r6, 800a534 <__strtok_r+0x20>
 800a52c:	b965      	cbnz	r5, 800a548 <__strtok_r+0x34>
 800a52e:	6015      	str	r5, [r2, #0]
 800a530:	2000      	movs	r0, #0
 800a532:	e005      	b.n	800a540 <__strtok_r+0x2c>
 800a534:	42b5      	cmp	r5, r6
 800a536:	d1f6      	bne.n	800a526 <__strtok_r+0x12>
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1f0      	bne.n	800a51e <__strtok_r+0xa>
 800a53c:	6014      	str	r4, [r2, #0]
 800a53e:	7003      	strb	r3, [r0, #0]
 800a540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a542:	461c      	mov	r4, r3
 800a544:	e00c      	b.n	800a560 <__strtok_r+0x4c>
 800a546:	b915      	cbnz	r5, 800a54e <__strtok_r+0x3a>
 800a548:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a54c:	460e      	mov	r6, r1
 800a54e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a552:	42ab      	cmp	r3, r5
 800a554:	d1f7      	bne.n	800a546 <__strtok_r+0x32>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0f3      	beq.n	800a542 <__strtok_r+0x2e>
 800a55a:	2300      	movs	r3, #0
 800a55c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a560:	6014      	str	r4, [r2, #0]
 800a562:	e7ed      	b.n	800a540 <__strtok_r+0x2c>

0800a564 <_close_r>:
 800a564:	b538      	push	{r3, r4, r5, lr}
 800a566:	4d06      	ldr	r5, [pc, #24]	@ (800a580 <_close_r+0x1c>)
 800a568:	2300      	movs	r3, #0
 800a56a:	4604      	mov	r4, r0
 800a56c:	4608      	mov	r0, r1
 800a56e:	602b      	str	r3, [r5, #0]
 800a570:	f7f7 f926 	bl	80017c0 <_close>
 800a574:	1c43      	adds	r3, r0, #1
 800a576:	d102      	bne.n	800a57e <_close_r+0x1a>
 800a578:	682b      	ldr	r3, [r5, #0]
 800a57a:	b103      	cbz	r3, 800a57e <_close_r+0x1a>
 800a57c:	6023      	str	r3, [r4, #0]
 800a57e:	bd38      	pop	{r3, r4, r5, pc}
 800a580:	20003134 	.word	0x20003134

0800a584 <_lseek_r>:
 800a584:	b538      	push	{r3, r4, r5, lr}
 800a586:	4d07      	ldr	r5, [pc, #28]	@ (800a5a4 <_lseek_r+0x20>)
 800a588:	4604      	mov	r4, r0
 800a58a:	4608      	mov	r0, r1
 800a58c:	4611      	mov	r1, r2
 800a58e:	2200      	movs	r2, #0
 800a590:	602a      	str	r2, [r5, #0]
 800a592:	461a      	mov	r2, r3
 800a594:	f7f7 f93b 	bl	800180e <_lseek>
 800a598:	1c43      	adds	r3, r0, #1
 800a59a:	d102      	bne.n	800a5a2 <_lseek_r+0x1e>
 800a59c:	682b      	ldr	r3, [r5, #0]
 800a59e:	b103      	cbz	r3, 800a5a2 <_lseek_r+0x1e>
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	20003134 	.word	0x20003134

0800a5a8 <_read_r>:
 800a5a8:	b538      	push	{r3, r4, r5, lr}
 800a5aa:	4d07      	ldr	r5, [pc, #28]	@ (800a5c8 <_read_r+0x20>)
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	4608      	mov	r0, r1
 800a5b0:	4611      	mov	r1, r2
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	602a      	str	r2, [r5, #0]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f7f7 f8c9 	bl	800174e <_read>
 800a5bc:	1c43      	adds	r3, r0, #1
 800a5be:	d102      	bne.n	800a5c6 <_read_r+0x1e>
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	b103      	cbz	r3, 800a5c6 <_read_r+0x1e>
 800a5c4:	6023      	str	r3, [r4, #0]
 800a5c6:	bd38      	pop	{r3, r4, r5, pc}
 800a5c8:	20003134 	.word	0x20003134

0800a5cc <_write_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	4d07      	ldr	r5, [pc, #28]	@ (800a5ec <_write_r+0x20>)
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	4608      	mov	r0, r1
 800a5d4:	4611      	mov	r1, r2
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	602a      	str	r2, [r5, #0]
 800a5da:	461a      	mov	r2, r3
 800a5dc:	f7f7 f8d4 	bl	8001788 <_write>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	d102      	bne.n	800a5ea <_write_r+0x1e>
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	b103      	cbz	r3, 800a5ea <_write_r+0x1e>
 800a5e8:	6023      	str	r3, [r4, #0]
 800a5ea:	bd38      	pop	{r3, r4, r5, pc}
 800a5ec:	20003134 	.word	0x20003134

0800a5f0 <__errno>:
 800a5f0:	4b01      	ldr	r3, [pc, #4]	@ (800a5f8 <__errno+0x8>)
 800a5f2:	6818      	ldr	r0, [r3, #0]
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	2000012c 	.word	0x2000012c

0800a5fc <__libc_init_array>:
 800a5fc:	b570      	push	{r4, r5, r6, lr}
 800a5fe:	4d0d      	ldr	r5, [pc, #52]	@ (800a634 <__libc_init_array+0x38>)
 800a600:	4c0d      	ldr	r4, [pc, #52]	@ (800a638 <__libc_init_array+0x3c>)
 800a602:	1b64      	subs	r4, r4, r5
 800a604:	10a4      	asrs	r4, r4, #2
 800a606:	2600      	movs	r6, #0
 800a608:	42a6      	cmp	r6, r4
 800a60a:	d109      	bne.n	800a620 <__libc_init_array+0x24>
 800a60c:	4d0b      	ldr	r5, [pc, #44]	@ (800a63c <__libc_init_array+0x40>)
 800a60e:	4c0c      	ldr	r4, [pc, #48]	@ (800a640 <__libc_init_array+0x44>)
 800a610:	f000 fda8 	bl	800b164 <_init>
 800a614:	1b64      	subs	r4, r4, r5
 800a616:	10a4      	asrs	r4, r4, #2
 800a618:	2600      	movs	r6, #0
 800a61a:	42a6      	cmp	r6, r4
 800a61c:	d105      	bne.n	800a62a <__libc_init_array+0x2e>
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	f855 3b04 	ldr.w	r3, [r5], #4
 800a624:	4798      	blx	r3
 800a626:	3601      	adds	r6, #1
 800a628:	e7ee      	b.n	800a608 <__libc_init_array+0xc>
 800a62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a62e:	4798      	blx	r3
 800a630:	3601      	adds	r6, #1
 800a632:	e7f2      	b.n	800a61a <__libc_init_array+0x1e>
 800a634:	0800b6c4 	.word	0x0800b6c4
 800a638:	0800b6c4 	.word	0x0800b6c4
 800a63c:	0800b6c4 	.word	0x0800b6c4
 800a640:	0800b6c8 	.word	0x0800b6c8

0800a644 <__retarget_lock_init_recursive>:
 800a644:	4770      	bx	lr

0800a646 <__retarget_lock_acquire_recursive>:
 800a646:	4770      	bx	lr

0800a648 <__retarget_lock_release_recursive>:
 800a648:	4770      	bx	lr
	...

0800a64c <__assert_func>:
 800a64c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a64e:	4614      	mov	r4, r2
 800a650:	461a      	mov	r2, r3
 800a652:	4b09      	ldr	r3, [pc, #36]	@ (800a678 <__assert_func+0x2c>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4605      	mov	r5, r0
 800a658:	68d8      	ldr	r0, [r3, #12]
 800a65a:	b954      	cbnz	r4, 800a672 <__assert_func+0x26>
 800a65c:	4b07      	ldr	r3, [pc, #28]	@ (800a67c <__assert_func+0x30>)
 800a65e:	461c      	mov	r4, r3
 800a660:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a664:	9100      	str	r1, [sp, #0]
 800a666:	462b      	mov	r3, r5
 800a668:	4905      	ldr	r1, [pc, #20]	@ (800a680 <__assert_func+0x34>)
 800a66a:	f000 fc89 	bl	800af80 <fiprintf>
 800a66e:	f000 fd2d 	bl	800b0cc <abort>
 800a672:	4b04      	ldr	r3, [pc, #16]	@ (800a684 <__assert_func+0x38>)
 800a674:	e7f4      	b.n	800a660 <__assert_func+0x14>
 800a676:	bf00      	nop
 800a678:	2000012c 	.word	0x2000012c
 800a67c:	0800b685 	.word	0x0800b685
 800a680:	0800b657 	.word	0x0800b657
 800a684:	0800b64a 	.word	0x0800b64a

0800a688 <_free_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	4605      	mov	r5, r0
 800a68c:	2900      	cmp	r1, #0
 800a68e:	d041      	beq.n	800a714 <_free_r+0x8c>
 800a690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a694:	1f0c      	subs	r4, r1, #4
 800a696:	2b00      	cmp	r3, #0
 800a698:	bfb8      	it	lt
 800a69a:	18e4      	addlt	r4, r4, r3
 800a69c:	f000 f8e8 	bl	800a870 <__malloc_lock>
 800a6a0:	4a1d      	ldr	r2, [pc, #116]	@ (800a718 <_free_r+0x90>)
 800a6a2:	6813      	ldr	r3, [r2, #0]
 800a6a4:	b933      	cbnz	r3, 800a6b4 <_free_r+0x2c>
 800a6a6:	6063      	str	r3, [r4, #4]
 800a6a8:	6014      	str	r4, [r2, #0]
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b0:	f000 b8e4 	b.w	800a87c <__malloc_unlock>
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	d908      	bls.n	800a6ca <_free_r+0x42>
 800a6b8:	6820      	ldr	r0, [r4, #0]
 800a6ba:	1821      	adds	r1, r4, r0
 800a6bc:	428b      	cmp	r3, r1
 800a6be:	bf01      	itttt	eq
 800a6c0:	6819      	ldreq	r1, [r3, #0]
 800a6c2:	685b      	ldreq	r3, [r3, #4]
 800a6c4:	1809      	addeq	r1, r1, r0
 800a6c6:	6021      	streq	r1, [r4, #0]
 800a6c8:	e7ed      	b.n	800a6a6 <_free_r+0x1e>
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	b10b      	cbz	r3, 800a6d4 <_free_r+0x4c>
 800a6d0:	42a3      	cmp	r3, r4
 800a6d2:	d9fa      	bls.n	800a6ca <_free_r+0x42>
 800a6d4:	6811      	ldr	r1, [r2, #0]
 800a6d6:	1850      	adds	r0, r2, r1
 800a6d8:	42a0      	cmp	r0, r4
 800a6da:	d10b      	bne.n	800a6f4 <_free_r+0x6c>
 800a6dc:	6820      	ldr	r0, [r4, #0]
 800a6de:	4401      	add	r1, r0
 800a6e0:	1850      	adds	r0, r2, r1
 800a6e2:	4283      	cmp	r3, r0
 800a6e4:	6011      	str	r1, [r2, #0]
 800a6e6:	d1e0      	bne.n	800a6aa <_free_r+0x22>
 800a6e8:	6818      	ldr	r0, [r3, #0]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	6053      	str	r3, [r2, #4]
 800a6ee:	4408      	add	r0, r1
 800a6f0:	6010      	str	r0, [r2, #0]
 800a6f2:	e7da      	b.n	800a6aa <_free_r+0x22>
 800a6f4:	d902      	bls.n	800a6fc <_free_r+0x74>
 800a6f6:	230c      	movs	r3, #12
 800a6f8:	602b      	str	r3, [r5, #0]
 800a6fa:	e7d6      	b.n	800a6aa <_free_r+0x22>
 800a6fc:	6820      	ldr	r0, [r4, #0]
 800a6fe:	1821      	adds	r1, r4, r0
 800a700:	428b      	cmp	r3, r1
 800a702:	bf04      	itt	eq
 800a704:	6819      	ldreq	r1, [r3, #0]
 800a706:	685b      	ldreq	r3, [r3, #4]
 800a708:	6063      	str	r3, [r4, #4]
 800a70a:	bf04      	itt	eq
 800a70c:	1809      	addeq	r1, r1, r0
 800a70e:	6021      	streq	r1, [r4, #0]
 800a710:	6054      	str	r4, [r2, #4]
 800a712:	e7ca      	b.n	800a6aa <_free_r+0x22>
 800a714:	bd38      	pop	{r3, r4, r5, pc}
 800a716:	bf00      	nop
 800a718:	20003140 	.word	0x20003140

0800a71c <malloc>:
 800a71c:	4b02      	ldr	r3, [pc, #8]	@ (800a728 <malloc+0xc>)
 800a71e:	4601      	mov	r1, r0
 800a720:	6818      	ldr	r0, [r3, #0]
 800a722:	f000 b825 	b.w	800a770 <_malloc_r>
 800a726:	bf00      	nop
 800a728:	2000012c 	.word	0x2000012c

0800a72c <sbrk_aligned>:
 800a72c:	b570      	push	{r4, r5, r6, lr}
 800a72e:	4e0f      	ldr	r6, [pc, #60]	@ (800a76c <sbrk_aligned+0x40>)
 800a730:	460c      	mov	r4, r1
 800a732:	6831      	ldr	r1, [r6, #0]
 800a734:	4605      	mov	r5, r0
 800a736:	b911      	cbnz	r1, 800a73e <sbrk_aligned+0x12>
 800a738:	f000 fcb8 	bl	800b0ac <_sbrk_r>
 800a73c:	6030      	str	r0, [r6, #0]
 800a73e:	4621      	mov	r1, r4
 800a740:	4628      	mov	r0, r5
 800a742:	f000 fcb3 	bl	800b0ac <_sbrk_r>
 800a746:	1c43      	adds	r3, r0, #1
 800a748:	d103      	bne.n	800a752 <sbrk_aligned+0x26>
 800a74a:	f04f 34ff 	mov.w	r4, #4294967295
 800a74e:	4620      	mov	r0, r4
 800a750:	bd70      	pop	{r4, r5, r6, pc}
 800a752:	1cc4      	adds	r4, r0, #3
 800a754:	f024 0403 	bic.w	r4, r4, #3
 800a758:	42a0      	cmp	r0, r4
 800a75a:	d0f8      	beq.n	800a74e <sbrk_aligned+0x22>
 800a75c:	1a21      	subs	r1, r4, r0
 800a75e:	4628      	mov	r0, r5
 800a760:	f000 fca4 	bl	800b0ac <_sbrk_r>
 800a764:	3001      	adds	r0, #1
 800a766:	d1f2      	bne.n	800a74e <sbrk_aligned+0x22>
 800a768:	e7ef      	b.n	800a74a <sbrk_aligned+0x1e>
 800a76a:	bf00      	nop
 800a76c:	2000313c 	.word	0x2000313c

0800a770 <_malloc_r>:
 800a770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a774:	1ccd      	adds	r5, r1, #3
 800a776:	f025 0503 	bic.w	r5, r5, #3
 800a77a:	3508      	adds	r5, #8
 800a77c:	2d0c      	cmp	r5, #12
 800a77e:	bf38      	it	cc
 800a780:	250c      	movcc	r5, #12
 800a782:	2d00      	cmp	r5, #0
 800a784:	4606      	mov	r6, r0
 800a786:	db01      	blt.n	800a78c <_malloc_r+0x1c>
 800a788:	42a9      	cmp	r1, r5
 800a78a:	d904      	bls.n	800a796 <_malloc_r+0x26>
 800a78c:	230c      	movs	r3, #12
 800a78e:	6033      	str	r3, [r6, #0]
 800a790:	2000      	movs	r0, #0
 800a792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a796:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a86c <_malloc_r+0xfc>
 800a79a:	f000 f869 	bl	800a870 <__malloc_lock>
 800a79e:	f8d8 3000 	ldr.w	r3, [r8]
 800a7a2:	461c      	mov	r4, r3
 800a7a4:	bb44      	cbnz	r4, 800a7f8 <_malloc_r+0x88>
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7ff ffbf 	bl	800a72c <sbrk_aligned>
 800a7ae:	1c43      	adds	r3, r0, #1
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	d158      	bne.n	800a866 <_malloc_r+0xf6>
 800a7b4:	f8d8 4000 	ldr.w	r4, [r8]
 800a7b8:	4627      	mov	r7, r4
 800a7ba:	2f00      	cmp	r7, #0
 800a7bc:	d143      	bne.n	800a846 <_malloc_r+0xd6>
 800a7be:	2c00      	cmp	r4, #0
 800a7c0:	d04b      	beq.n	800a85a <_malloc_r+0xea>
 800a7c2:	6823      	ldr	r3, [r4, #0]
 800a7c4:	4639      	mov	r1, r7
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	eb04 0903 	add.w	r9, r4, r3
 800a7cc:	f000 fc6e 	bl	800b0ac <_sbrk_r>
 800a7d0:	4581      	cmp	r9, r0
 800a7d2:	d142      	bne.n	800a85a <_malloc_r+0xea>
 800a7d4:	6821      	ldr	r1, [r4, #0]
 800a7d6:	1a6d      	subs	r5, r5, r1
 800a7d8:	4629      	mov	r1, r5
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f7ff ffa6 	bl	800a72c <sbrk_aligned>
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d03a      	beq.n	800a85a <_malloc_r+0xea>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	442b      	add	r3, r5
 800a7e8:	6023      	str	r3, [r4, #0]
 800a7ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	bb62      	cbnz	r2, 800a84c <_malloc_r+0xdc>
 800a7f2:	f8c8 7000 	str.w	r7, [r8]
 800a7f6:	e00f      	b.n	800a818 <_malloc_r+0xa8>
 800a7f8:	6822      	ldr	r2, [r4, #0]
 800a7fa:	1b52      	subs	r2, r2, r5
 800a7fc:	d420      	bmi.n	800a840 <_malloc_r+0xd0>
 800a7fe:	2a0b      	cmp	r2, #11
 800a800:	d917      	bls.n	800a832 <_malloc_r+0xc2>
 800a802:	1961      	adds	r1, r4, r5
 800a804:	42a3      	cmp	r3, r4
 800a806:	6025      	str	r5, [r4, #0]
 800a808:	bf18      	it	ne
 800a80a:	6059      	strne	r1, [r3, #4]
 800a80c:	6863      	ldr	r3, [r4, #4]
 800a80e:	bf08      	it	eq
 800a810:	f8c8 1000 	streq.w	r1, [r8]
 800a814:	5162      	str	r2, [r4, r5]
 800a816:	604b      	str	r3, [r1, #4]
 800a818:	4630      	mov	r0, r6
 800a81a:	f000 f82f 	bl	800a87c <__malloc_unlock>
 800a81e:	f104 000b 	add.w	r0, r4, #11
 800a822:	1d23      	adds	r3, r4, #4
 800a824:	f020 0007 	bic.w	r0, r0, #7
 800a828:	1ac2      	subs	r2, r0, r3
 800a82a:	bf1c      	itt	ne
 800a82c:	1a1b      	subne	r3, r3, r0
 800a82e:	50a3      	strne	r3, [r4, r2]
 800a830:	e7af      	b.n	800a792 <_malloc_r+0x22>
 800a832:	6862      	ldr	r2, [r4, #4]
 800a834:	42a3      	cmp	r3, r4
 800a836:	bf0c      	ite	eq
 800a838:	f8c8 2000 	streq.w	r2, [r8]
 800a83c:	605a      	strne	r2, [r3, #4]
 800a83e:	e7eb      	b.n	800a818 <_malloc_r+0xa8>
 800a840:	4623      	mov	r3, r4
 800a842:	6864      	ldr	r4, [r4, #4]
 800a844:	e7ae      	b.n	800a7a4 <_malloc_r+0x34>
 800a846:	463c      	mov	r4, r7
 800a848:	687f      	ldr	r7, [r7, #4]
 800a84a:	e7b6      	b.n	800a7ba <_malloc_r+0x4a>
 800a84c:	461a      	mov	r2, r3
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	42a3      	cmp	r3, r4
 800a852:	d1fb      	bne.n	800a84c <_malloc_r+0xdc>
 800a854:	2300      	movs	r3, #0
 800a856:	6053      	str	r3, [r2, #4]
 800a858:	e7de      	b.n	800a818 <_malloc_r+0xa8>
 800a85a:	230c      	movs	r3, #12
 800a85c:	6033      	str	r3, [r6, #0]
 800a85e:	4630      	mov	r0, r6
 800a860:	f000 f80c 	bl	800a87c <__malloc_unlock>
 800a864:	e794      	b.n	800a790 <_malloc_r+0x20>
 800a866:	6005      	str	r5, [r0, #0]
 800a868:	e7d6      	b.n	800a818 <_malloc_r+0xa8>
 800a86a:	bf00      	nop
 800a86c:	20003140 	.word	0x20003140

0800a870 <__malloc_lock>:
 800a870:	4801      	ldr	r0, [pc, #4]	@ (800a878 <__malloc_lock+0x8>)
 800a872:	f7ff bee8 	b.w	800a646 <__retarget_lock_acquire_recursive>
 800a876:	bf00      	nop
 800a878:	20003138 	.word	0x20003138

0800a87c <__malloc_unlock>:
 800a87c:	4801      	ldr	r0, [pc, #4]	@ (800a884 <__malloc_unlock+0x8>)
 800a87e:	f7ff bee3 	b.w	800a648 <__retarget_lock_release_recursive>
 800a882:	bf00      	nop
 800a884:	20003138 	.word	0x20003138

0800a888 <__sfputc_r>:
 800a888:	6893      	ldr	r3, [r2, #8]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	b410      	push	{r4}
 800a890:	6093      	str	r3, [r2, #8]
 800a892:	da08      	bge.n	800a8a6 <__sfputc_r+0x1e>
 800a894:	6994      	ldr	r4, [r2, #24]
 800a896:	42a3      	cmp	r3, r4
 800a898:	db01      	blt.n	800a89e <__sfputc_r+0x16>
 800a89a:	290a      	cmp	r1, #10
 800a89c:	d103      	bne.n	800a8a6 <__sfputc_r+0x1e>
 800a89e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8a2:	f7ff bd66 	b.w	800a372 <__swbuf_r>
 800a8a6:	6813      	ldr	r3, [r2, #0]
 800a8a8:	1c58      	adds	r0, r3, #1
 800a8aa:	6010      	str	r0, [r2, #0]
 800a8ac:	7019      	strb	r1, [r3, #0]
 800a8ae:	4608      	mov	r0, r1
 800a8b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8b4:	4770      	bx	lr

0800a8b6 <__sfputs_r>:
 800a8b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8b8:	4606      	mov	r6, r0
 800a8ba:	460f      	mov	r7, r1
 800a8bc:	4614      	mov	r4, r2
 800a8be:	18d5      	adds	r5, r2, r3
 800a8c0:	42ac      	cmp	r4, r5
 800a8c2:	d101      	bne.n	800a8c8 <__sfputs_r+0x12>
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e007      	b.n	800a8d8 <__sfputs_r+0x22>
 800a8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8cc:	463a      	mov	r2, r7
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7ff ffda 	bl	800a888 <__sfputc_r>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d1f3      	bne.n	800a8c0 <__sfputs_r+0xa>
 800a8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a8dc <_vfiprintf_r>:
 800a8dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e0:	460d      	mov	r5, r1
 800a8e2:	b09d      	sub	sp, #116	@ 0x74
 800a8e4:	4614      	mov	r4, r2
 800a8e6:	4698      	mov	r8, r3
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	b118      	cbz	r0, 800a8f4 <_vfiprintf_r+0x18>
 800a8ec:	6a03      	ldr	r3, [r0, #32]
 800a8ee:	b90b      	cbnz	r3, 800a8f4 <_vfiprintf_r+0x18>
 800a8f0:	f7ff fc56 	bl	800a1a0 <__sinit>
 800a8f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a8f6:	07d9      	lsls	r1, r3, #31
 800a8f8:	d405      	bmi.n	800a906 <_vfiprintf_r+0x2a>
 800a8fa:	89ab      	ldrh	r3, [r5, #12]
 800a8fc:	059a      	lsls	r2, r3, #22
 800a8fe:	d402      	bmi.n	800a906 <_vfiprintf_r+0x2a>
 800a900:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a902:	f7ff fea0 	bl	800a646 <__retarget_lock_acquire_recursive>
 800a906:	89ab      	ldrh	r3, [r5, #12]
 800a908:	071b      	lsls	r3, r3, #28
 800a90a:	d501      	bpl.n	800a910 <_vfiprintf_r+0x34>
 800a90c:	692b      	ldr	r3, [r5, #16]
 800a90e:	b99b      	cbnz	r3, 800a938 <_vfiprintf_r+0x5c>
 800a910:	4629      	mov	r1, r5
 800a912:	4630      	mov	r0, r6
 800a914:	f7ff fd6c 	bl	800a3f0 <__swsetup_r>
 800a918:	b170      	cbz	r0, 800a938 <_vfiprintf_r+0x5c>
 800a91a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a91c:	07dc      	lsls	r4, r3, #31
 800a91e:	d504      	bpl.n	800a92a <_vfiprintf_r+0x4e>
 800a920:	f04f 30ff 	mov.w	r0, #4294967295
 800a924:	b01d      	add	sp, #116	@ 0x74
 800a926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92a:	89ab      	ldrh	r3, [r5, #12]
 800a92c:	0598      	lsls	r0, r3, #22
 800a92e:	d4f7      	bmi.n	800a920 <_vfiprintf_r+0x44>
 800a930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a932:	f7ff fe89 	bl	800a648 <__retarget_lock_release_recursive>
 800a936:	e7f3      	b.n	800a920 <_vfiprintf_r+0x44>
 800a938:	2300      	movs	r3, #0
 800a93a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a93c:	2320      	movs	r3, #32
 800a93e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a942:	f8cd 800c 	str.w	r8, [sp, #12]
 800a946:	2330      	movs	r3, #48	@ 0x30
 800a948:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800aaf8 <_vfiprintf_r+0x21c>
 800a94c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a950:	f04f 0901 	mov.w	r9, #1
 800a954:	4623      	mov	r3, r4
 800a956:	469a      	mov	sl, r3
 800a958:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a95c:	b10a      	cbz	r2, 800a962 <_vfiprintf_r+0x86>
 800a95e:	2a25      	cmp	r2, #37	@ 0x25
 800a960:	d1f9      	bne.n	800a956 <_vfiprintf_r+0x7a>
 800a962:	ebba 0b04 	subs.w	fp, sl, r4
 800a966:	d00b      	beq.n	800a980 <_vfiprintf_r+0xa4>
 800a968:	465b      	mov	r3, fp
 800a96a:	4622      	mov	r2, r4
 800a96c:	4629      	mov	r1, r5
 800a96e:	4630      	mov	r0, r6
 800a970:	f7ff ffa1 	bl	800a8b6 <__sfputs_r>
 800a974:	3001      	adds	r0, #1
 800a976:	f000 80a7 	beq.w	800aac8 <_vfiprintf_r+0x1ec>
 800a97a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a97c:	445a      	add	r2, fp
 800a97e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a980:	f89a 3000 	ldrb.w	r3, [sl]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 809f 	beq.w	800aac8 <_vfiprintf_r+0x1ec>
 800a98a:	2300      	movs	r3, #0
 800a98c:	f04f 32ff 	mov.w	r2, #4294967295
 800a990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a994:	f10a 0a01 	add.w	sl, sl, #1
 800a998:	9304      	str	r3, [sp, #16]
 800a99a:	9307      	str	r3, [sp, #28]
 800a99c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9a2:	4654      	mov	r4, sl
 800a9a4:	2205      	movs	r2, #5
 800a9a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9aa:	4853      	ldr	r0, [pc, #332]	@ (800aaf8 <_vfiprintf_r+0x21c>)
 800a9ac:	f7f5 fc28 	bl	8000200 <memchr>
 800a9b0:	9a04      	ldr	r2, [sp, #16]
 800a9b2:	b9d8      	cbnz	r0, 800a9ec <_vfiprintf_r+0x110>
 800a9b4:	06d1      	lsls	r1, r2, #27
 800a9b6:	bf44      	itt	mi
 800a9b8:	2320      	movmi	r3, #32
 800a9ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9be:	0713      	lsls	r3, r2, #28
 800a9c0:	bf44      	itt	mi
 800a9c2:	232b      	movmi	r3, #43	@ 0x2b
 800a9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9ce:	d015      	beq.n	800a9fc <_vfiprintf_r+0x120>
 800a9d0:	9a07      	ldr	r2, [sp, #28]
 800a9d2:	4654      	mov	r4, sl
 800a9d4:	2000      	movs	r0, #0
 800a9d6:	f04f 0c0a 	mov.w	ip, #10
 800a9da:	4621      	mov	r1, r4
 800a9dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9e0:	3b30      	subs	r3, #48	@ 0x30
 800a9e2:	2b09      	cmp	r3, #9
 800a9e4:	d94b      	bls.n	800aa7e <_vfiprintf_r+0x1a2>
 800a9e6:	b1b0      	cbz	r0, 800aa16 <_vfiprintf_r+0x13a>
 800a9e8:	9207      	str	r2, [sp, #28]
 800a9ea:	e014      	b.n	800aa16 <_vfiprintf_r+0x13a>
 800a9ec:	eba0 0308 	sub.w	r3, r0, r8
 800a9f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	9304      	str	r3, [sp, #16]
 800a9f8:	46a2      	mov	sl, r4
 800a9fa:	e7d2      	b.n	800a9a2 <_vfiprintf_r+0xc6>
 800a9fc:	9b03      	ldr	r3, [sp, #12]
 800a9fe:	1d19      	adds	r1, r3, #4
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	9103      	str	r1, [sp, #12]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	bfbb      	ittet	lt
 800aa08:	425b      	neglt	r3, r3
 800aa0a:	f042 0202 	orrlt.w	r2, r2, #2
 800aa0e:	9307      	strge	r3, [sp, #28]
 800aa10:	9307      	strlt	r3, [sp, #28]
 800aa12:	bfb8      	it	lt
 800aa14:	9204      	strlt	r2, [sp, #16]
 800aa16:	7823      	ldrb	r3, [r4, #0]
 800aa18:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa1a:	d10a      	bne.n	800aa32 <_vfiprintf_r+0x156>
 800aa1c:	7863      	ldrb	r3, [r4, #1]
 800aa1e:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa20:	d132      	bne.n	800aa88 <_vfiprintf_r+0x1ac>
 800aa22:	9b03      	ldr	r3, [sp, #12]
 800aa24:	1d1a      	adds	r2, r3, #4
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	9203      	str	r2, [sp, #12]
 800aa2a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa2e:	3402      	adds	r4, #2
 800aa30:	9305      	str	r3, [sp, #20]
 800aa32:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ab08 <_vfiprintf_r+0x22c>
 800aa36:	7821      	ldrb	r1, [r4, #0]
 800aa38:	2203      	movs	r2, #3
 800aa3a:	4650      	mov	r0, sl
 800aa3c:	f7f5 fbe0 	bl	8000200 <memchr>
 800aa40:	b138      	cbz	r0, 800aa52 <_vfiprintf_r+0x176>
 800aa42:	9b04      	ldr	r3, [sp, #16]
 800aa44:	eba0 000a 	sub.w	r0, r0, sl
 800aa48:	2240      	movs	r2, #64	@ 0x40
 800aa4a:	4082      	lsls	r2, r0
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	3401      	adds	r4, #1
 800aa50:	9304      	str	r3, [sp, #16]
 800aa52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa56:	4829      	ldr	r0, [pc, #164]	@ (800aafc <_vfiprintf_r+0x220>)
 800aa58:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa5c:	2206      	movs	r2, #6
 800aa5e:	f7f5 fbcf 	bl	8000200 <memchr>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	d03f      	beq.n	800aae6 <_vfiprintf_r+0x20a>
 800aa66:	4b26      	ldr	r3, [pc, #152]	@ (800ab00 <_vfiprintf_r+0x224>)
 800aa68:	bb1b      	cbnz	r3, 800aab2 <_vfiprintf_r+0x1d6>
 800aa6a:	9b03      	ldr	r3, [sp, #12]
 800aa6c:	3307      	adds	r3, #7
 800aa6e:	f023 0307 	bic.w	r3, r3, #7
 800aa72:	3308      	adds	r3, #8
 800aa74:	9303      	str	r3, [sp, #12]
 800aa76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa78:	443b      	add	r3, r7
 800aa7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa7c:	e76a      	b.n	800a954 <_vfiprintf_r+0x78>
 800aa7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa82:	460c      	mov	r4, r1
 800aa84:	2001      	movs	r0, #1
 800aa86:	e7a8      	b.n	800a9da <_vfiprintf_r+0xfe>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	3401      	adds	r4, #1
 800aa8c:	9305      	str	r3, [sp, #20]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	f04f 0c0a 	mov.w	ip, #10
 800aa94:	4620      	mov	r0, r4
 800aa96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa9a:	3a30      	subs	r2, #48	@ 0x30
 800aa9c:	2a09      	cmp	r2, #9
 800aa9e:	d903      	bls.n	800aaa8 <_vfiprintf_r+0x1cc>
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d0c6      	beq.n	800aa32 <_vfiprintf_r+0x156>
 800aaa4:	9105      	str	r1, [sp, #20]
 800aaa6:	e7c4      	b.n	800aa32 <_vfiprintf_r+0x156>
 800aaa8:	fb0c 2101 	mla	r1, ip, r1, r2
 800aaac:	4604      	mov	r4, r0
 800aaae:	2301      	movs	r3, #1
 800aab0:	e7f0      	b.n	800aa94 <_vfiprintf_r+0x1b8>
 800aab2:	ab03      	add	r3, sp, #12
 800aab4:	9300      	str	r3, [sp, #0]
 800aab6:	462a      	mov	r2, r5
 800aab8:	4b12      	ldr	r3, [pc, #72]	@ (800ab04 <_vfiprintf_r+0x228>)
 800aaba:	a904      	add	r1, sp, #16
 800aabc:	4630      	mov	r0, r6
 800aabe:	f3af 8000 	nop.w
 800aac2:	4607      	mov	r7, r0
 800aac4:	1c78      	adds	r0, r7, #1
 800aac6:	d1d6      	bne.n	800aa76 <_vfiprintf_r+0x19a>
 800aac8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aaca:	07d9      	lsls	r1, r3, #31
 800aacc:	d405      	bmi.n	800aada <_vfiprintf_r+0x1fe>
 800aace:	89ab      	ldrh	r3, [r5, #12]
 800aad0:	059a      	lsls	r2, r3, #22
 800aad2:	d402      	bmi.n	800aada <_vfiprintf_r+0x1fe>
 800aad4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aad6:	f7ff fdb7 	bl	800a648 <__retarget_lock_release_recursive>
 800aada:	89ab      	ldrh	r3, [r5, #12]
 800aadc:	065b      	lsls	r3, r3, #25
 800aade:	f53f af1f 	bmi.w	800a920 <_vfiprintf_r+0x44>
 800aae2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aae4:	e71e      	b.n	800a924 <_vfiprintf_r+0x48>
 800aae6:	ab03      	add	r3, sp, #12
 800aae8:	9300      	str	r3, [sp, #0]
 800aaea:	462a      	mov	r2, r5
 800aaec:	4b05      	ldr	r3, [pc, #20]	@ (800ab04 <_vfiprintf_r+0x228>)
 800aaee:	a904      	add	r1, sp, #16
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	f000 f879 	bl	800abe8 <_printf_i>
 800aaf6:	e7e4      	b.n	800aac2 <_vfiprintf_r+0x1e6>
 800aaf8:	0800b686 	.word	0x0800b686
 800aafc:	0800b690 	.word	0x0800b690
 800ab00:	00000000 	.word	0x00000000
 800ab04:	0800a8b7 	.word	0x0800a8b7
 800ab08:	0800b68c 	.word	0x0800b68c

0800ab0c <_printf_common>:
 800ab0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab10:	4616      	mov	r6, r2
 800ab12:	4698      	mov	r8, r3
 800ab14:	688a      	ldr	r2, [r1, #8]
 800ab16:	690b      	ldr	r3, [r1, #16]
 800ab18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	bfb8      	it	lt
 800ab20:	4613      	movlt	r3, r2
 800ab22:	6033      	str	r3, [r6, #0]
 800ab24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ab28:	4607      	mov	r7, r0
 800ab2a:	460c      	mov	r4, r1
 800ab2c:	b10a      	cbz	r2, 800ab32 <_printf_common+0x26>
 800ab2e:	3301      	adds	r3, #1
 800ab30:	6033      	str	r3, [r6, #0]
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	0699      	lsls	r1, r3, #26
 800ab36:	bf42      	ittt	mi
 800ab38:	6833      	ldrmi	r3, [r6, #0]
 800ab3a:	3302      	addmi	r3, #2
 800ab3c:	6033      	strmi	r3, [r6, #0]
 800ab3e:	6825      	ldr	r5, [r4, #0]
 800ab40:	f015 0506 	ands.w	r5, r5, #6
 800ab44:	d106      	bne.n	800ab54 <_printf_common+0x48>
 800ab46:	f104 0a19 	add.w	sl, r4, #25
 800ab4a:	68e3      	ldr	r3, [r4, #12]
 800ab4c:	6832      	ldr	r2, [r6, #0]
 800ab4e:	1a9b      	subs	r3, r3, r2
 800ab50:	42ab      	cmp	r3, r5
 800ab52:	dc26      	bgt.n	800aba2 <_printf_common+0x96>
 800ab54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ab58:	6822      	ldr	r2, [r4, #0]
 800ab5a:	3b00      	subs	r3, #0
 800ab5c:	bf18      	it	ne
 800ab5e:	2301      	movne	r3, #1
 800ab60:	0692      	lsls	r2, r2, #26
 800ab62:	d42b      	bmi.n	800abbc <_printf_common+0xb0>
 800ab64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ab68:	4641      	mov	r1, r8
 800ab6a:	4638      	mov	r0, r7
 800ab6c:	47c8      	blx	r9
 800ab6e:	3001      	adds	r0, #1
 800ab70:	d01e      	beq.n	800abb0 <_printf_common+0xa4>
 800ab72:	6823      	ldr	r3, [r4, #0]
 800ab74:	6922      	ldr	r2, [r4, #16]
 800ab76:	f003 0306 	and.w	r3, r3, #6
 800ab7a:	2b04      	cmp	r3, #4
 800ab7c:	bf02      	ittt	eq
 800ab7e:	68e5      	ldreq	r5, [r4, #12]
 800ab80:	6833      	ldreq	r3, [r6, #0]
 800ab82:	1aed      	subeq	r5, r5, r3
 800ab84:	68a3      	ldr	r3, [r4, #8]
 800ab86:	bf0c      	ite	eq
 800ab88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab8c:	2500      	movne	r5, #0
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	bfc4      	itt	gt
 800ab92:	1a9b      	subgt	r3, r3, r2
 800ab94:	18ed      	addgt	r5, r5, r3
 800ab96:	2600      	movs	r6, #0
 800ab98:	341a      	adds	r4, #26
 800ab9a:	42b5      	cmp	r5, r6
 800ab9c:	d11a      	bne.n	800abd4 <_printf_common+0xc8>
 800ab9e:	2000      	movs	r0, #0
 800aba0:	e008      	b.n	800abb4 <_printf_common+0xa8>
 800aba2:	2301      	movs	r3, #1
 800aba4:	4652      	mov	r2, sl
 800aba6:	4641      	mov	r1, r8
 800aba8:	4638      	mov	r0, r7
 800abaa:	47c8      	blx	r9
 800abac:	3001      	adds	r0, #1
 800abae:	d103      	bne.n	800abb8 <_printf_common+0xac>
 800abb0:	f04f 30ff 	mov.w	r0, #4294967295
 800abb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb8:	3501      	adds	r5, #1
 800abba:	e7c6      	b.n	800ab4a <_printf_common+0x3e>
 800abbc:	18e1      	adds	r1, r4, r3
 800abbe:	1c5a      	adds	r2, r3, #1
 800abc0:	2030      	movs	r0, #48	@ 0x30
 800abc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800abc6:	4422      	add	r2, r4
 800abc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800abcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800abd0:	3302      	adds	r3, #2
 800abd2:	e7c7      	b.n	800ab64 <_printf_common+0x58>
 800abd4:	2301      	movs	r3, #1
 800abd6:	4622      	mov	r2, r4
 800abd8:	4641      	mov	r1, r8
 800abda:	4638      	mov	r0, r7
 800abdc:	47c8      	blx	r9
 800abde:	3001      	adds	r0, #1
 800abe0:	d0e6      	beq.n	800abb0 <_printf_common+0xa4>
 800abe2:	3601      	adds	r6, #1
 800abe4:	e7d9      	b.n	800ab9a <_printf_common+0x8e>
	...

0800abe8 <_printf_i>:
 800abe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abec:	7e0f      	ldrb	r7, [r1, #24]
 800abee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800abf0:	2f78      	cmp	r7, #120	@ 0x78
 800abf2:	4691      	mov	r9, r2
 800abf4:	4680      	mov	r8, r0
 800abf6:	460c      	mov	r4, r1
 800abf8:	469a      	mov	sl, r3
 800abfa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800abfe:	d807      	bhi.n	800ac10 <_printf_i+0x28>
 800ac00:	2f62      	cmp	r7, #98	@ 0x62
 800ac02:	d80a      	bhi.n	800ac1a <_printf_i+0x32>
 800ac04:	2f00      	cmp	r7, #0
 800ac06:	f000 80d2 	beq.w	800adae <_printf_i+0x1c6>
 800ac0a:	2f58      	cmp	r7, #88	@ 0x58
 800ac0c:	f000 80b9 	beq.w	800ad82 <_printf_i+0x19a>
 800ac10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ac18:	e03a      	b.n	800ac90 <_printf_i+0xa8>
 800ac1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ac1e:	2b15      	cmp	r3, #21
 800ac20:	d8f6      	bhi.n	800ac10 <_printf_i+0x28>
 800ac22:	a101      	add	r1, pc, #4	@ (adr r1, 800ac28 <_printf_i+0x40>)
 800ac24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac28:	0800ac81 	.word	0x0800ac81
 800ac2c:	0800ac95 	.word	0x0800ac95
 800ac30:	0800ac11 	.word	0x0800ac11
 800ac34:	0800ac11 	.word	0x0800ac11
 800ac38:	0800ac11 	.word	0x0800ac11
 800ac3c:	0800ac11 	.word	0x0800ac11
 800ac40:	0800ac95 	.word	0x0800ac95
 800ac44:	0800ac11 	.word	0x0800ac11
 800ac48:	0800ac11 	.word	0x0800ac11
 800ac4c:	0800ac11 	.word	0x0800ac11
 800ac50:	0800ac11 	.word	0x0800ac11
 800ac54:	0800ad95 	.word	0x0800ad95
 800ac58:	0800acbf 	.word	0x0800acbf
 800ac5c:	0800ad4f 	.word	0x0800ad4f
 800ac60:	0800ac11 	.word	0x0800ac11
 800ac64:	0800ac11 	.word	0x0800ac11
 800ac68:	0800adb7 	.word	0x0800adb7
 800ac6c:	0800ac11 	.word	0x0800ac11
 800ac70:	0800acbf 	.word	0x0800acbf
 800ac74:	0800ac11 	.word	0x0800ac11
 800ac78:	0800ac11 	.word	0x0800ac11
 800ac7c:	0800ad57 	.word	0x0800ad57
 800ac80:	6833      	ldr	r3, [r6, #0]
 800ac82:	1d1a      	adds	r2, r3, #4
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	6032      	str	r2, [r6, #0]
 800ac88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac90:	2301      	movs	r3, #1
 800ac92:	e09d      	b.n	800add0 <_printf_i+0x1e8>
 800ac94:	6833      	ldr	r3, [r6, #0]
 800ac96:	6820      	ldr	r0, [r4, #0]
 800ac98:	1d19      	adds	r1, r3, #4
 800ac9a:	6031      	str	r1, [r6, #0]
 800ac9c:	0606      	lsls	r6, r0, #24
 800ac9e:	d501      	bpl.n	800aca4 <_printf_i+0xbc>
 800aca0:	681d      	ldr	r5, [r3, #0]
 800aca2:	e003      	b.n	800acac <_printf_i+0xc4>
 800aca4:	0645      	lsls	r5, r0, #25
 800aca6:	d5fb      	bpl.n	800aca0 <_printf_i+0xb8>
 800aca8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800acac:	2d00      	cmp	r5, #0
 800acae:	da03      	bge.n	800acb8 <_printf_i+0xd0>
 800acb0:	232d      	movs	r3, #45	@ 0x2d
 800acb2:	426d      	negs	r5, r5
 800acb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800acb8:	4859      	ldr	r0, [pc, #356]	@ (800ae20 <_printf_i+0x238>)
 800acba:	230a      	movs	r3, #10
 800acbc:	e011      	b.n	800ace2 <_printf_i+0xfa>
 800acbe:	6821      	ldr	r1, [r4, #0]
 800acc0:	6833      	ldr	r3, [r6, #0]
 800acc2:	0608      	lsls	r0, r1, #24
 800acc4:	f853 5b04 	ldr.w	r5, [r3], #4
 800acc8:	d402      	bmi.n	800acd0 <_printf_i+0xe8>
 800acca:	0649      	lsls	r1, r1, #25
 800accc:	bf48      	it	mi
 800acce:	b2ad      	uxthmi	r5, r5
 800acd0:	2f6f      	cmp	r7, #111	@ 0x6f
 800acd2:	4853      	ldr	r0, [pc, #332]	@ (800ae20 <_printf_i+0x238>)
 800acd4:	6033      	str	r3, [r6, #0]
 800acd6:	bf14      	ite	ne
 800acd8:	230a      	movne	r3, #10
 800acda:	2308      	moveq	r3, #8
 800acdc:	2100      	movs	r1, #0
 800acde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ace2:	6866      	ldr	r6, [r4, #4]
 800ace4:	60a6      	str	r6, [r4, #8]
 800ace6:	2e00      	cmp	r6, #0
 800ace8:	bfa2      	ittt	ge
 800acea:	6821      	ldrge	r1, [r4, #0]
 800acec:	f021 0104 	bicge.w	r1, r1, #4
 800acf0:	6021      	strge	r1, [r4, #0]
 800acf2:	b90d      	cbnz	r5, 800acf8 <_printf_i+0x110>
 800acf4:	2e00      	cmp	r6, #0
 800acf6:	d04b      	beq.n	800ad90 <_printf_i+0x1a8>
 800acf8:	4616      	mov	r6, r2
 800acfa:	fbb5 f1f3 	udiv	r1, r5, r3
 800acfe:	fb03 5711 	mls	r7, r3, r1, r5
 800ad02:	5dc7      	ldrb	r7, [r0, r7]
 800ad04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ad08:	462f      	mov	r7, r5
 800ad0a:	42bb      	cmp	r3, r7
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	d9f4      	bls.n	800acfa <_printf_i+0x112>
 800ad10:	2b08      	cmp	r3, #8
 800ad12:	d10b      	bne.n	800ad2c <_printf_i+0x144>
 800ad14:	6823      	ldr	r3, [r4, #0]
 800ad16:	07df      	lsls	r7, r3, #31
 800ad18:	d508      	bpl.n	800ad2c <_printf_i+0x144>
 800ad1a:	6923      	ldr	r3, [r4, #16]
 800ad1c:	6861      	ldr	r1, [r4, #4]
 800ad1e:	4299      	cmp	r1, r3
 800ad20:	bfde      	ittt	le
 800ad22:	2330      	movle	r3, #48	@ 0x30
 800ad24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ad28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ad2c:	1b92      	subs	r2, r2, r6
 800ad2e:	6122      	str	r2, [r4, #16]
 800ad30:	f8cd a000 	str.w	sl, [sp]
 800ad34:	464b      	mov	r3, r9
 800ad36:	aa03      	add	r2, sp, #12
 800ad38:	4621      	mov	r1, r4
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	f7ff fee6 	bl	800ab0c <_printf_common>
 800ad40:	3001      	adds	r0, #1
 800ad42:	d14a      	bne.n	800adda <_printf_i+0x1f2>
 800ad44:	f04f 30ff 	mov.w	r0, #4294967295
 800ad48:	b004      	add	sp, #16
 800ad4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4e:	6823      	ldr	r3, [r4, #0]
 800ad50:	f043 0320 	orr.w	r3, r3, #32
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	4833      	ldr	r0, [pc, #204]	@ (800ae24 <_printf_i+0x23c>)
 800ad58:	2778      	movs	r7, #120	@ 0x78
 800ad5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	6831      	ldr	r1, [r6, #0]
 800ad62:	061f      	lsls	r7, r3, #24
 800ad64:	f851 5b04 	ldr.w	r5, [r1], #4
 800ad68:	d402      	bmi.n	800ad70 <_printf_i+0x188>
 800ad6a:	065f      	lsls	r7, r3, #25
 800ad6c:	bf48      	it	mi
 800ad6e:	b2ad      	uxthmi	r5, r5
 800ad70:	6031      	str	r1, [r6, #0]
 800ad72:	07d9      	lsls	r1, r3, #31
 800ad74:	bf44      	itt	mi
 800ad76:	f043 0320 	orrmi.w	r3, r3, #32
 800ad7a:	6023      	strmi	r3, [r4, #0]
 800ad7c:	b11d      	cbz	r5, 800ad86 <_printf_i+0x19e>
 800ad7e:	2310      	movs	r3, #16
 800ad80:	e7ac      	b.n	800acdc <_printf_i+0xf4>
 800ad82:	4827      	ldr	r0, [pc, #156]	@ (800ae20 <_printf_i+0x238>)
 800ad84:	e7e9      	b.n	800ad5a <_printf_i+0x172>
 800ad86:	6823      	ldr	r3, [r4, #0]
 800ad88:	f023 0320 	bic.w	r3, r3, #32
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	e7f6      	b.n	800ad7e <_printf_i+0x196>
 800ad90:	4616      	mov	r6, r2
 800ad92:	e7bd      	b.n	800ad10 <_printf_i+0x128>
 800ad94:	6833      	ldr	r3, [r6, #0]
 800ad96:	6825      	ldr	r5, [r4, #0]
 800ad98:	6961      	ldr	r1, [r4, #20]
 800ad9a:	1d18      	adds	r0, r3, #4
 800ad9c:	6030      	str	r0, [r6, #0]
 800ad9e:	062e      	lsls	r6, r5, #24
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	d501      	bpl.n	800ada8 <_printf_i+0x1c0>
 800ada4:	6019      	str	r1, [r3, #0]
 800ada6:	e002      	b.n	800adae <_printf_i+0x1c6>
 800ada8:	0668      	lsls	r0, r5, #25
 800adaa:	d5fb      	bpl.n	800ada4 <_printf_i+0x1bc>
 800adac:	8019      	strh	r1, [r3, #0]
 800adae:	2300      	movs	r3, #0
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	4616      	mov	r6, r2
 800adb4:	e7bc      	b.n	800ad30 <_printf_i+0x148>
 800adb6:	6833      	ldr	r3, [r6, #0]
 800adb8:	1d1a      	adds	r2, r3, #4
 800adba:	6032      	str	r2, [r6, #0]
 800adbc:	681e      	ldr	r6, [r3, #0]
 800adbe:	6862      	ldr	r2, [r4, #4]
 800adc0:	2100      	movs	r1, #0
 800adc2:	4630      	mov	r0, r6
 800adc4:	f7f5 fa1c 	bl	8000200 <memchr>
 800adc8:	b108      	cbz	r0, 800adce <_printf_i+0x1e6>
 800adca:	1b80      	subs	r0, r0, r6
 800adcc:	6060      	str	r0, [r4, #4]
 800adce:	6863      	ldr	r3, [r4, #4]
 800add0:	6123      	str	r3, [r4, #16]
 800add2:	2300      	movs	r3, #0
 800add4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800add8:	e7aa      	b.n	800ad30 <_printf_i+0x148>
 800adda:	6923      	ldr	r3, [r4, #16]
 800addc:	4632      	mov	r2, r6
 800adde:	4649      	mov	r1, r9
 800ade0:	4640      	mov	r0, r8
 800ade2:	47d0      	blx	sl
 800ade4:	3001      	adds	r0, #1
 800ade6:	d0ad      	beq.n	800ad44 <_printf_i+0x15c>
 800ade8:	6823      	ldr	r3, [r4, #0]
 800adea:	079b      	lsls	r3, r3, #30
 800adec:	d413      	bmi.n	800ae16 <_printf_i+0x22e>
 800adee:	68e0      	ldr	r0, [r4, #12]
 800adf0:	9b03      	ldr	r3, [sp, #12]
 800adf2:	4298      	cmp	r0, r3
 800adf4:	bfb8      	it	lt
 800adf6:	4618      	movlt	r0, r3
 800adf8:	e7a6      	b.n	800ad48 <_printf_i+0x160>
 800adfa:	2301      	movs	r3, #1
 800adfc:	4632      	mov	r2, r6
 800adfe:	4649      	mov	r1, r9
 800ae00:	4640      	mov	r0, r8
 800ae02:	47d0      	blx	sl
 800ae04:	3001      	adds	r0, #1
 800ae06:	d09d      	beq.n	800ad44 <_printf_i+0x15c>
 800ae08:	3501      	adds	r5, #1
 800ae0a:	68e3      	ldr	r3, [r4, #12]
 800ae0c:	9903      	ldr	r1, [sp, #12]
 800ae0e:	1a5b      	subs	r3, r3, r1
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	dcf2      	bgt.n	800adfa <_printf_i+0x212>
 800ae14:	e7eb      	b.n	800adee <_printf_i+0x206>
 800ae16:	2500      	movs	r5, #0
 800ae18:	f104 0619 	add.w	r6, r4, #25
 800ae1c:	e7f5      	b.n	800ae0a <_printf_i+0x222>
 800ae1e:	bf00      	nop
 800ae20:	0800b697 	.word	0x0800b697
 800ae24:	0800b6a8 	.word	0x0800b6a8

0800ae28 <__sflush_r>:
 800ae28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae30:	0716      	lsls	r6, r2, #28
 800ae32:	4605      	mov	r5, r0
 800ae34:	460c      	mov	r4, r1
 800ae36:	d454      	bmi.n	800aee2 <__sflush_r+0xba>
 800ae38:	684b      	ldr	r3, [r1, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	dc02      	bgt.n	800ae44 <__sflush_r+0x1c>
 800ae3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dd48      	ble.n	800aed6 <__sflush_r+0xae>
 800ae44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae46:	2e00      	cmp	r6, #0
 800ae48:	d045      	beq.n	800aed6 <__sflush_r+0xae>
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae50:	682f      	ldr	r7, [r5, #0]
 800ae52:	6a21      	ldr	r1, [r4, #32]
 800ae54:	602b      	str	r3, [r5, #0]
 800ae56:	d030      	beq.n	800aeba <__sflush_r+0x92>
 800ae58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae5a:	89a3      	ldrh	r3, [r4, #12]
 800ae5c:	0759      	lsls	r1, r3, #29
 800ae5e:	d505      	bpl.n	800ae6c <__sflush_r+0x44>
 800ae60:	6863      	ldr	r3, [r4, #4]
 800ae62:	1ad2      	subs	r2, r2, r3
 800ae64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae66:	b10b      	cbz	r3, 800ae6c <__sflush_r+0x44>
 800ae68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae6a:	1ad2      	subs	r2, r2, r3
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae70:	6a21      	ldr	r1, [r4, #32]
 800ae72:	4628      	mov	r0, r5
 800ae74:	47b0      	blx	r6
 800ae76:	1c43      	adds	r3, r0, #1
 800ae78:	89a3      	ldrh	r3, [r4, #12]
 800ae7a:	d106      	bne.n	800ae8a <__sflush_r+0x62>
 800ae7c:	6829      	ldr	r1, [r5, #0]
 800ae7e:	291d      	cmp	r1, #29
 800ae80:	d82b      	bhi.n	800aeda <__sflush_r+0xb2>
 800ae82:	4a2a      	ldr	r2, [pc, #168]	@ (800af2c <__sflush_r+0x104>)
 800ae84:	410a      	asrs	r2, r1
 800ae86:	07d6      	lsls	r6, r2, #31
 800ae88:	d427      	bmi.n	800aeda <__sflush_r+0xb2>
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	6062      	str	r2, [r4, #4]
 800ae8e:	04d9      	lsls	r1, r3, #19
 800ae90:	6922      	ldr	r2, [r4, #16]
 800ae92:	6022      	str	r2, [r4, #0]
 800ae94:	d504      	bpl.n	800aea0 <__sflush_r+0x78>
 800ae96:	1c42      	adds	r2, r0, #1
 800ae98:	d101      	bne.n	800ae9e <__sflush_r+0x76>
 800ae9a:	682b      	ldr	r3, [r5, #0]
 800ae9c:	b903      	cbnz	r3, 800aea0 <__sflush_r+0x78>
 800ae9e:	6560      	str	r0, [r4, #84]	@ 0x54
 800aea0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aea2:	602f      	str	r7, [r5, #0]
 800aea4:	b1b9      	cbz	r1, 800aed6 <__sflush_r+0xae>
 800aea6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aeaa:	4299      	cmp	r1, r3
 800aeac:	d002      	beq.n	800aeb4 <__sflush_r+0x8c>
 800aeae:	4628      	mov	r0, r5
 800aeb0:	f7ff fbea 	bl	800a688 <_free_r>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	6363      	str	r3, [r4, #52]	@ 0x34
 800aeb8:	e00d      	b.n	800aed6 <__sflush_r+0xae>
 800aeba:	2301      	movs	r3, #1
 800aebc:	4628      	mov	r0, r5
 800aebe:	47b0      	blx	r6
 800aec0:	4602      	mov	r2, r0
 800aec2:	1c50      	adds	r0, r2, #1
 800aec4:	d1c9      	bne.n	800ae5a <__sflush_r+0x32>
 800aec6:	682b      	ldr	r3, [r5, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0c6      	beq.n	800ae5a <__sflush_r+0x32>
 800aecc:	2b1d      	cmp	r3, #29
 800aece:	d001      	beq.n	800aed4 <__sflush_r+0xac>
 800aed0:	2b16      	cmp	r3, #22
 800aed2:	d11e      	bne.n	800af12 <__sflush_r+0xea>
 800aed4:	602f      	str	r7, [r5, #0]
 800aed6:	2000      	movs	r0, #0
 800aed8:	e022      	b.n	800af20 <__sflush_r+0xf8>
 800aeda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aede:	b21b      	sxth	r3, r3
 800aee0:	e01b      	b.n	800af1a <__sflush_r+0xf2>
 800aee2:	690f      	ldr	r7, [r1, #16]
 800aee4:	2f00      	cmp	r7, #0
 800aee6:	d0f6      	beq.n	800aed6 <__sflush_r+0xae>
 800aee8:	0793      	lsls	r3, r2, #30
 800aeea:	680e      	ldr	r6, [r1, #0]
 800aeec:	bf08      	it	eq
 800aeee:	694b      	ldreq	r3, [r1, #20]
 800aef0:	600f      	str	r7, [r1, #0]
 800aef2:	bf18      	it	ne
 800aef4:	2300      	movne	r3, #0
 800aef6:	eba6 0807 	sub.w	r8, r6, r7
 800aefa:	608b      	str	r3, [r1, #8]
 800aefc:	f1b8 0f00 	cmp.w	r8, #0
 800af00:	dde9      	ble.n	800aed6 <__sflush_r+0xae>
 800af02:	6a21      	ldr	r1, [r4, #32]
 800af04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800af06:	4643      	mov	r3, r8
 800af08:	463a      	mov	r2, r7
 800af0a:	4628      	mov	r0, r5
 800af0c:	47b0      	blx	r6
 800af0e:	2800      	cmp	r0, #0
 800af10:	dc08      	bgt.n	800af24 <__sflush_r+0xfc>
 800af12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af1a:	81a3      	strh	r3, [r4, #12]
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af24:	4407      	add	r7, r0
 800af26:	eba8 0800 	sub.w	r8, r8, r0
 800af2a:	e7e7      	b.n	800aefc <__sflush_r+0xd4>
 800af2c:	dfbffffe 	.word	0xdfbffffe

0800af30 <_fflush_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	690b      	ldr	r3, [r1, #16]
 800af34:	4605      	mov	r5, r0
 800af36:	460c      	mov	r4, r1
 800af38:	b913      	cbnz	r3, 800af40 <_fflush_r+0x10>
 800af3a:	2500      	movs	r5, #0
 800af3c:	4628      	mov	r0, r5
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	b118      	cbz	r0, 800af4a <_fflush_r+0x1a>
 800af42:	6a03      	ldr	r3, [r0, #32]
 800af44:	b90b      	cbnz	r3, 800af4a <_fflush_r+0x1a>
 800af46:	f7ff f92b 	bl	800a1a0 <__sinit>
 800af4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0f3      	beq.n	800af3a <_fflush_r+0xa>
 800af52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af54:	07d0      	lsls	r0, r2, #31
 800af56:	d404      	bmi.n	800af62 <_fflush_r+0x32>
 800af58:	0599      	lsls	r1, r3, #22
 800af5a:	d402      	bmi.n	800af62 <_fflush_r+0x32>
 800af5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af5e:	f7ff fb72 	bl	800a646 <__retarget_lock_acquire_recursive>
 800af62:	4628      	mov	r0, r5
 800af64:	4621      	mov	r1, r4
 800af66:	f7ff ff5f 	bl	800ae28 <__sflush_r>
 800af6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af6c:	07da      	lsls	r2, r3, #31
 800af6e:	4605      	mov	r5, r0
 800af70:	d4e4      	bmi.n	800af3c <_fflush_r+0xc>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	059b      	lsls	r3, r3, #22
 800af76:	d4e1      	bmi.n	800af3c <_fflush_r+0xc>
 800af78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af7a:	f7ff fb65 	bl	800a648 <__retarget_lock_release_recursive>
 800af7e:	e7dd      	b.n	800af3c <_fflush_r+0xc>

0800af80 <fiprintf>:
 800af80:	b40e      	push	{r1, r2, r3}
 800af82:	b503      	push	{r0, r1, lr}
 800af84:	4601      	mov	r1, r0
 800af86:	ab03      	add	r3, sp, #12
 800af88:	4805      	ldr	r0, [pc, #20]	@ (800afa0 <fiprintf+0x20>)
 800af8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af8e:	6800      	ldr	r0, [r0, #0]
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	f7ff fca3 	bl	800a8dc <_vfiprintf_r>
 800af96:	b002      	add	sp, #8
 800af98:	f85d eb04 	ldr.w	lr, [sp], #4
 800af9c:	b003      	add	sp, #12
 800af9e:	4770      	bx	lr
 800afa0:	2000012c 	.word	0x2000012c

0800afa4 <__swhatbuf_r>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	460c      	mov	r4, r1
 800afa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afac:	2900      	cmp	r1, #0
 800afae:	b096      	sub	sp, #88	@ 0x58
 800afb0:	4615      	mov	r5, r2
 800afb2:	461e      	mov	r6, r3
 800afb4:	da0d      	bge.n	800afd2 <__swhatbuf_r+0x2e>
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800afbc:	f04f 0100 	mov.w	r1, #0
 800afc0:	bf14      	ite	ne
 800afc2:	2340      	movne	r3, #64	@ 0x40
 800afc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800afc8:	2000      	movs	r0, #0
 800afca:	6031      	str	r1, [r6, #0]
 800afcc:	602b      	str	r3, [r5, #0]
 800afce:	b016      	add	sp, #88	@ 0x58
 800afd0:	bd70      	pop	{r4, r5, r6, pc}
 800afd2:	466a      	mov	r2, sp
 800afd4:	f000 f848 	bl	800b068 <_fstat_r>
 800afd8:	2800      	cmp	r0, #0
 800afda:	dbec      	blt.n	800afb6 <__swhatbuf_r+0x12>
 800afdc:	9901      	ldr	r1, [sp, #4]
 800afde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afe2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800afe6:	4259      	negs	r1, r3
 800afe8:	4159      	adcs	r1, r3
 800afea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afee:	e7eb      	b.n	800afc8 <__swhatbuf_r+0x24>

0800aff0 <__smakebuf_r>:
 800aff0:	898b      	ldrh	r3, [r1, #12]
 800aff2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aff4:	079d      	lsls	r5, r3, #30
 800aff6:	4606      	mov	r6, r0
 800aff8:	460c      	mov	r4, r1
 800affa:	d507      	bpl.n	800b00c <__smakebuf_r+0x1c>
 800affc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	6123      	str	r3, [r4, #16]
 800b004:	2301      	movs	r3, #1
 800b006:	6163      	str	r3, [r4, #20]
 800b008:	b003      	add	sp, #12
 800b00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b00c:	ab01      	add	r3, sp, #4
 800b00e:	466a      	mov	r2, sp
 800b010:	f7ff ffc8 	bl	800afa4 <__swhatbuf_r>
 800b014:	9f00      	ldr	r7, [sp, #0]
 800b016:	4605      	mov	r5, r0
 800b018:	4639      	mov	r1, r7
 800b01a:	4630      	mov	r0, r6
 800b01c:	f7ff fba8 	bl	800a770 <_malloc_r>
 800b020:	b948      	cbnz	r0, 800b036 <__smakebuf_r+0x46>
 800b022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b026:	059a      	lsls	r2, r3, #22
 800b028:	d4ee      	bmi.n	800b008 <__smakebuf_r+0x18>
 800b02a:	f023 0303 	bic.w	r3, r3, #3
 800b02e:	f043 0302 	orr.w	r3, r3, #2
 800b032:	81a3      	strh	r3, [r4, #12]
 800b034:	e7e2      	b.n	800affc <__smakebuf_r+0xc>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	6020      	str	r0, [r4, #0]
 800b03a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b03e:	81a3      	strh	r3, [r4, #12]
 800b040:	9b01      	ldr	r3, [sp, #4]
 800b042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b046:	b15b      	cbz	r3, 800b060 <__smakebuf_r+0x70>
 800b048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b04c:	4630      	mov	r0, r6
 800b04e:	f000 f81d 	bl	800b08c <_isatty_r>
 800b052:	b128      	cbz	r0, 800b060 <__smakebuf_r+0x70>
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	f023 0303 	bic.w	r3, r3, #3
 800b05a:	f043 0301 	orr.w	r3, r3, #1
 800b05e:	81a3      	strh	r3, [r4, #12]
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	431d      	orrs	r5, r3
 800b064:	81a5      	strh	r5, [r4, #12]
 800b066:	e7cf      	b.n	800b008 <__smakebuf_r+0x18>

0800b068 <_fstat_r>:
 800b068:	b538      	push	{r3, r4, r5, lr}
 800b06a:	4d07      	ldr	r5, [pc, #28]	@ (800b088 <_fstat_r+0x20>)
 800b06c:	2300      	movs	r3, #0
 800b06e:	4604      	mov	r4, r0
 800b070:	4608      	mov	r0, r1
 800b072:	4611      	mov	r1, r2
 800b074:	602b      	str	r3, [r5, #0]
 800b076:	f7f6 fbaf 	bl	80017d8 <_fstat>
 800b07a:	1c43      	adds	r3, r0, #1
 800b07c:	d102      	bne.n	800b084 <_fstat_r+0x1c>
 800b07e:	682b      	ldr	r3, [r5, #0]
 800b080:	b103      	cbz	r3, 800b084 <_fstat_r+0x1c>
 800b082:	6023      	str	r3, [r4, #0]
 800b084:	bd38      	pop	{r3, r4, r5, pc}
 800b086:	bf00      	nop
 800b088:	20003134 	.word	0x20003134

0800b08c <_isatty_r>:
 800b08c:	b538      	push	{r3, r4, r5, lr}
 800b08e:	4d06      	ldr	r5, [pc, #24]	@ (800b0a8 <_isatty_r+0x1c>)
 800b090:	2300      	movs	r3, #0
 800b092:	4604      	mov	r4, r0
 800b094:	4608      	mov	r0, r1
 800b096:	602b      	str	r3, [r5, #0]
 800b098:	f7f6 fbae 	bl	80017f8 <_isatty>
 800b09c:	1c43      	adds	r3, r0, #1
 800b09e:	d102      	bne.n	800b0a6 <_isatty_r+0x1a>
 800b0a0:	682b      	ldr	r3, [r5, #0]
 800b0a2:	b103      	cbz	r3, 800b0a6 <_isatty_r+0x1a>
 800b0a4:	6023      	str	r3, [r4, #0]
 800b0a6:	bd38      	pop	{r3, r4, r5, pc}
 800b0a8:	20003134 	.word	0x20003134

0800b0ac <_sbrk_r>:
 800b0ac:	b538      	push	{r3, r4, r5, lr}
 800b0ae:	4d06      	ldr	r5, [pc, #24]	@ (800b0c8 <_sbrk_r+0x1c>)
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	4604      	mov	r4, r0
 800b0b4:	4608      	mov	r0, r1
 800b0b6:	602b      	str	r3, [r5, #0]
 800b0b8:	f7f6 fbb6 	bl	8001828 <_sbrk>
 800b0bc:	1c43      	adds	r3, r0, #1
 800b0be:	d102      	bne.n	800b0c6 <_sbrk_r+0x1a>
 800b0c0:	682b      	ldr	r3, [r5, #0]
 800b0c2:	b103      	cbz	r3, 800b0c6 <_sbrk_r+0x1a>
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	bd38      	pop	{r3, r4, r5, pc}
 800b0c8:	20003134 	.word	0x20003134

0800b0cc <abort>:
 800b0cc:	b508      	push	{r3, lr}
 800b0ce:	2006      	movs	r0, #6
 800b0d0:	f000 f82c 	bl	800b12c <raise>
 800b0d4:	2001      	movs	r0, #1
 800b0d6:	f7f6 fb2f 	bl	8001738 <_exit>

0800b0da <_raise_r>:
 800b0da:	291f      	cmp	r1, #31
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4605      	mov	r5, r0
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	d904      	bls.n	800b0ee <_raise_r+0x14>
 800b0e4:	2316      	movs	r3, #22
 800b0e6:	6003      	str	r3, [r0, #0]
 800b0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ec:	bd38      	pop	{r3, r4, r5, pc}
 800b0ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b0f0:	b112      	cbz	r2, 800b0f8 <_raise_r+0x1e>
 800b0f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b0f6:	b94b      	cbnz	r3, 800b10c <_raise_r+0x32>
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	f000 f831 	bl	800b160 <_getpid_r>
 800b0fe:	4622      	mov	r2, r4
 800b100:	4601      	mov	r1, r0
 800b102:	4628      	mov	r0, r5
 800b104:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b108:	f000 b818 	b.w	800b13c <_kill_r>
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d00a      	beq.n	800b126 <_raise_r+0x4c>
 800b110:	1c59      	adds	r1, r3, #1
 800b112:	d103      	bne.n	800b11c <_raise_r+0x42>
 800b114:	2316      	movs	r3, #22
 800b116:	6003      	str	r3, [r0, #0]
 800b118:	2001      	movs	r0, #1
 800b11a:	e7e7      	b.n	800b0ec <_raise_r+0x12>
 800b11c:	2100      	movs	r1, #0
 800b11e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b122:	4620      	mov	r0, r4
 800b124:	4798      	blx	r3
 800b126:	2000      	movs	r0, #0
 800b128:	e7e0      	b.n	800b0ec <_raise_r+0x12>
	...

0800b12c <raise>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	@ (800b138 <raise+0xc>)
 800b12e:	4601      	mov	r1, r0
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f7ff bfd2 	b.w	800b0da <_raise_r>
 800b136:	bf00      	nop
 800b138:	2000012c 	.word	0x2000012c

0800b13c <_kill_r>:
 800b13c:	b538      	push	{r3, r4, r5, lr}
 800b13e:	4d07      	ldr	r5, [pc, #28]	@ (800b15c <_kill_r+0x20>)
 800b140:	2300      	movs	r3, #0
 800b142:	4604      	mov	r4, r0
 800b144:	4608      	mov	r0, r1
 800b146:	4611      	mov	r1, r2
 800b148:	602b      	str	r3, [r5, #0]
 800b14a:	f7f6 fae5 	bl	8001718 <_kill>
 800b14e:	1c43      	adds	r3, r0, #1
 800b150:	d102      	bne.n	800b158 <_kill_r+0x1c>
 800b152:	682b      	ldr	r3, [r5, #0]
 800b154:	b103      	cbz	r3, 800b158 <_kill_r+0x1c>
 800b156:	6023      	str	r3, [r4, #0]
 800b158:	bd38      	pop	{r3, r4, r5, pc}
 800b15a:	bf00      	nop
 800b15c:	20003134 	.word	0x20003134

0800b160 <_getpid_r>:
 800b160:	f7f6 bad2 	b.w	8001708 <_getpid>

0800b164 <_init>:
 800b164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b166:	bf00      	nop
 800b168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b16a:	bc08      	pop	{r3}
 800b16c:	469e      	mov	lr, r3
 800b16e:	4770      	bx	lr

0800b170 <_fini>:
 800b170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b172:	bf00      	nop
 800b174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b176:	bc08      	pop	{r3}
 800b178:	469e      	mov	lr, r3
 800b17a:	4770      	bx	lr
