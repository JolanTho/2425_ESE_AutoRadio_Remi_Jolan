
Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  0800811c  0800811c  0000911c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008434  08008434  0000a168  2**0
                  CONTENTS
  4 .ARM          00000008  08008434  08008434  00009434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800843c  0800843c  0000a168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008440  08008440  00009440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000168  20000000  08008444  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002ddc  20000168  080085ac  0000a168  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f44  080085ac  0000af44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a168  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001711f  00000000  00000000  0000a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc5  00000000  00000000  000212b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00025080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e94  00000000  00000000  000263b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a10d  00000000  00000000  00027244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001834f  00000000  00000000  00051351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4f9d  00000000  00000000  000696a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015e63d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056b0  00000000  00000000  0015e680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00163d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008104 	.word	0x08008104

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	08008104 	.word	0x08008104

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MCP17023_init>:
extern SPI_HandleTypeDef hspi3;
uint8_t Spitxbuffer[3];
volatile int spi_tx_complete = 0;


void MCP17023_init(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

	MCP17023_write_register(IODIRA_REG, 0x00);
 8000594:	2100      	movs	r1, #0
 8000596:	2000      	movs	r0, #0
 8000598:	f000 f806 	bl	80005a8 <MCP17023_write_register>
	MCP17023_write_register(IODIRB_REG, 0x00);
 800059c:	2100      	movs	r1, #0
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 f802 	bl	80005a8 <MCP17023_write_register>

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <MCP17023_write_register>:

void MCP17023_write_register(uint8_t addr, uint8_t value){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	460a      	mov	r2, r1
 80005b2:	71fb      	strb	r3, [r7, #7]
 80005b4:	4613      	mov	r3, r2
 80005b6:	71bb      	strb	r3, [r7, #6]
	while(spi_tx_complete != 1){
 80005b8:	e01a      	b.n	80005f0 <MCP17023_write_register+0x48>
		spi_tx_complete = 1;
 80005ba:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MCP17023_write_register+0x5c>)
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]

		Spitxbuffer[0] = MCP23S17_WRITE_OPCODE;
 80005c0:	4b11      	ldr	r3, [pc, #68]	@ (8000608 <MCP17023_write_register+0x60>)
 80005c2:	2240      	movs	r2, #64	@ 0x40
 80005c4:	701a      	strb	r2, [r3, #0]
		Spitxbuffer[1] = addr;
 80005c6:	4a10      	ldr	r2, [pc, #64]	@ (8000608 <MCP17023_write_register+0x60>)
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	7053      	strb	r3, [r2, #1]
		Spitxbuffer[2] = value;
 80005cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <MCP17023_write_register+0x60>)
 80005ce:	79bb      	ldrb	r3, [r7, #6]
 80005d0:	7093      	strb	r3, [r2, #2]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2180      	movs	r1, #128	@ 0x80
 80005d6:	480d      	ldr	r0, [pc, #52]	@ (800060c <MCP17023_write_register+0x64>)
 80005d8:	f001 f9f6 	bl	80019c8 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit_IT(&hspi3, Spitxbuffer, 3);
 80005dc:	2203      	movs	r2, #3
 80005de:	490a      	ldr	r1, [pc, #40]	@ (8000608 <MCP17023_write_register+0x60>)
 80005e0:	480b      	ldr	r0, [pc, #44]	@ (8000610 <MCP17023_write_register+0x68>)
 80005e2:	f002 fde7 	bl	80031b4 <HAL_SPI_Transmit_IT>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <MCP17023_write_register+0x64>)
 80005ec:	f001 f9ec 	bl	80019c8 <HAL_GPIO_WritePin>
	while(spi_tx_complete != 1){
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <MCP17023_write_register+0x5c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d1e0      	bne.n	80005ba <MCP17023_write_register+0x12>

	}
}
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000188 	.word	0x20000188
 8000608:	20000184 	.word	0x20000184
 800060c:	48000400 	.word	0x48000400
 8000610:	200004a0 	.word	0x200004a0

08000614 <MCP17023_set_led>:

void MCP17023_set_led (uint8_t addrled){
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]

	MCP17023_write_register(GPIOA_REG, addrled);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4619      	mov	r1, r3
 8000622:	2012      	movs	r0, #18
 8000624:	f7ff ffc0 	bl	80005a8 <MCP17023_write_register>
	MCP17023_write_register(GPIOB_REG, addrled);
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	4619      	mov	r1, r3
 800062c:	2013      	movs	r0, #19
 800062e:	f7ff ffbb 	bl	80005a8 <MCP17023_write_register>

}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <MCP17023_chenillard>:

void MCP17023_chenillard(char **argv){
 800063a:	b580      	push	{r7, lr}
 800063c:	b084      	sub	sp, #16
 800063e:	af00      	add	r7, sp, #0
 8000640:	6078      	str	r0, [r7, #4]
	uint8_t actual_led = 0x01;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
	for(;;){
		MCP17023_set_led(actual_led);
 8000646:	7bfb      	ldrb	r3, [r7, #15]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffe3 	bl	8000614 <MCP17023_set_led>
		actual_led <<=1;
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
		if (actual_led == 0x00){
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d101      	bne.n	800065e <MCP17023_chenillard+0x24>
			actual_led = 0X01;
 800065a:	2301      	movs	r3, #1
 800065c:	73fb      	strb	r3, [r7, #15]
		}
		HAL_Delay(1000);
 800065e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000662:	f000 fe53 	bl	800130c <HAL_Delay>
		MCP17023_set_led(actual_led);
 8000666:	e7ee      	b.n	8000646 <MCP17023_chenillard+0xc>

08000668 <HAL_UART_RxCpltCallback>:
 */

/*********** PREEMPTION PRIORITY  ***********/

/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART2) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0d      	ldr	r2, [pc, #52]	@ (80006ac <HAL_UART_RxCpltCallback+0x44>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d114      	bne.n	80006a4 <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 800067e:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <HAL_UART_RxCpltCallback+0x48>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	f107 020c 	add.w	r2, r7, #12
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f004 fef7 	bl	800547c <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d007      	beq.n	80006a4 <HAL_UART_RxCpltCallback+0x3c>
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <HAL_UART_RxCpltCallback+0x4c>)
 8000696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	f3bf 8f4f 	dsb	sy
 80006a0:	f3bf 8f6f 	isb	sy
	}
}
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40004400 	.word	0x40004400
 80006b0:	2000018c 	.word	0x2000018c
 80006b4:	e000ed04 	.word	0xe000ed04

080006b8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	if(hspi->Instance == SPI3){
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a05      	ldr	r2, [pc, #20]	@ (80006dc <HAL_SPI_TxCpltCallback+0x24>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d102      	bne.n	80006d0 <HAL_SPI_TxCpltCallback+0x18>
		spi_tx_complete = 0;
 80006ca:	4b05      	ldr	r3, [pc, #20]	@ (80006e0 <HAL_SPI_TxCpltCallback+0x28>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
		//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr
 80006dc:	40003c00 	.word	0x40003c00
 80006e0:	20000188 	.word	0x20000188

080006e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	4a07      	ldr	r2, [pc, #28]	@ (8000710 <vApplicationGetIdleTaskMemory+0x2c>)
 80006f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006f6:	68bb      	ldr	r3, [r7, #8]
 80006f8:	4a06      	ldr	r2, [pc, #24]	@ (8000714 <vApplicationGetIdleTaskMemory+0x30>)
 80006fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2280      	movs	r2, #128	@ 0x80
 8000700:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	20000194 	.word	0x20000194
 8000714:	200001e8 	.word	0x200001e8

08000718 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000718:	b5b0      	push	{r4, r5, r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800071e:	4b0a      	ldr	r3, [pc, #40]	@ (8000748 <MX_FREERTOS_Init+0x30>)
 8000720:	1d3c      	adds	r4, r7, #4
 8000722:	461d      	mov	r5, r3
 8000724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000728:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f004 fcc8 	bl	80050ca <osThreadCreate>
 800073a:	4603      	mov	r3, r0
 800073c:	4a03      	ldr	r2, [pc, #12]	@ (800074c <MX_FREERTOS_Init+0x34>)
 800073e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bdb0      	pop	{r4, r5, r7, pc}
 8000748:	08008128 	.word	0x08008128
 800074c:	20000190 	.word	0x20000190

08000750 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f004 fd02 	bl	8005162 <osDelay>
 800075e:	e7fb      	b.n	8000758 <StartDefaultTask+0x8>

08000760 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	@ 0x28
 8000764:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b35      	ldr	r3, [pc, #212]	@ (800084c <MX_GPIO_Init+0xec>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	4a34      	ldr	r2, [pc, #208]	@ (800084c <MX_GPIO_Init+0xec>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000782:	4b32      	ldr	r3, [pc, #200]	@ (800084c <MX_GPIO_Init+0xec>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b2f      	ldr	r3, [pc, #188]	@ (800084c <MX_GPIO_Init+0xec>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a2e      	ldr	r2, [pc, #184]	@ (800084c <MX_GPIO_Init+0xec>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b2c      	ldr	r3, [pc, #176]	@ (800084c <MX_GPIO_Init+0xec>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b29      	ldr	r3, [pc, #164]	@ (800084c <MX_GPIO_Init+0xec>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a28      	ldr	r2, [pc, #160]	@ (800084c <MX_GPIO_Init+0xec>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b26      	ldr	r3, [pc, #152]	@ (800084c <MX_GPIO_Init+0xec>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b23      	ldr	r3, [pc, #140]	@ (800084c <MX_GPIO_Init+0xec>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <MX_GPIO_Init+0xec>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b20      	ldr	r3, [pc, #128]	@ (800084c <MX_GPIO_Init+0xec>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2120      	movs	r1, #32
 80007da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007de:	f001 f8f3 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	481a      	ldr	r0, [pc, #104]	@ (8000850 <MX_GPIO_Init+0xf0>)
 80007e8:	f001 f8ee 	bl	80019c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	4619      	mov	r1, r3
 8000802:	4814      	ldr	r0, [pc, #80]	@ (8000854 <MX_GPIO_Init+0xf4>)
 8000804:	f000 ff36 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000808:	2320      	movs	r3, #32
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4619      	mov	r1, r3
 800081e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000822:	f000 ff27 	bl	8001674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000826:	2380      	movs	r3, #128	@ 0x80
 8000828:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	4619      	mov	r1, r3
 800083c:	4804      	ldr	r0, [pc, #16]	@ (8000850 <MX_GPIO_Init+0xf0>)
 800083e:	f000 ff19 	bl	8001674 <HAL_GPIO_Init>

}
 8000842:	bf00      	nop
 8000844:	3728      	adds	r7, #40	@ 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	48000400 	.word	0x48000400
 8000854:	48000800 	.word	0x48000800

08000858 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int chr){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000866:	2201      	movs	r2, #1
 8000868:	4803      	ldr	r0, [pc, #12]	@ (8000878 <__io_putchar+0x20>)
 800086a:	f003 f874 	bl	8003956 <HAL_UART_Transmit>
	return chr;
 800086e:	687b      	ldr	r3, [r7, #4]
}
 8000870:	4618      	mov	r0, r3
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000508 	.word	0x20000508

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000886:	f000 fcc5 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088a:	f000 f82d 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800088e:	f7ff ff67 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000892:	f000 fc01 	bl	8001098 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000896:	f000 fa11 	bl	8000cbc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  MCP17023_init();
 800089a:	f7ff fe79 	bl	8000590 <MCP17023_init>
  shell_init();
 800089e:	f000 f87b 	bl	8000998 <shell_init>

  xReturned = xTaskCreate(
 80008a2:	463b      	mov	r3, r7
 80008a4:	9301      	str	r3, [sp, #4]
 80008a6:	2300      	movs	r3, #0
 80008a8:	9300      	str	r3, [sp, #0]
 80008aa:	2300      	movs	r3, #0
 80008ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80008b0:	490a      	ldr	r1, [pc, #40]	@ (80008dc <main+0x60>)
 80008b2:	480b      	ldr	r0, [pc, #44]	@ (80008e0 <main+0x64>)
 80008b4:	f005 f862 	bl	800597c <xTaskCreate>
 80008b8:	6078      	str	r0, [r7, #4]
		  STACK_SIZE,
		  (void*) NULL,
		  tskIDLE_PRIORITY,
		  &xHandle1);

  if(xReturned != pdPASS){
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d004      	beq.n	80008ca <main+0x4e>
	  printf("Le shell fonctionne pas mon reuf. \r\n");
 80008c0:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <main+0x68>)
 80008c2:	f006 fcdb 	bl	800727c <puts>
	  Error_Handler();
 80008c6:	f000 f860 	bl	800098a <Error_Handler>
  }

  vTaskStartScheduler();
 80008ca:	f005 f9c5 	bl	8005c58 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80008ce:	f7ff ff23 	bl	8000718 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008d2:	f004 fbf3 	bl	80050bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008d6:	bf00      	nop
 80008d8:	e7fd      	b.n	80008d6 <main+0x5a>
 80008da:	bf00      	nop
 80008dc:	08008144 	.word	0x08008144
 80008e0:	08000a2d 	.word	0x08000a2d
 80008e4:	0800814c 	.word	0x0800814c

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b096      	sub	sp, #88	@ 0x58
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0314 	add.w	r3, r7, #20
 80008f2:	2244      	movs	r2, #68	@ 0x44
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 fd24 	bl	8007344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	609a      	str	r2, [r3, #8]
 8000906:	60da      	str	r2, [r3, #12]
 8000908:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800090a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800090e:	f001 f89b 	bl	8001a48 <HAL_PWREx_ControlVoltageScaling>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000918:	f000 f837 	bl	800098a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800091c:	2302      	movs	r3, #2
 800091e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000924:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000926:	2310      	movs	r3, #16
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800092e:	2302      	movs	r3, #2
 8000930:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000936:	230a      	movs	r3, #10
 8000938:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800093a:	2307      	movs	r3, #7
 800093c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800093e:	2302      	movs	r3, #2
 8000940:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000942:	2302      	movs	r3, #2
 8000944:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f8d2 	bl	8001af4 <HAL_RCC_OscConfig>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000956:	f000 f818 	bl	800098a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095a:	230f      	movs	r3, #15
 800095c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095e:	2303      	movs	r3, #3
 8000960:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800096e:	463b      	mov	r3, r7
 8000970:	2104      	movs	r1, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f001 fc9a 	bl	80022ac <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800097e:	f000 f804 	bl	800098a <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3758      	adds	r7, #88	@ 0x58
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098e:	b672      	cpsid	i
}
 8000990:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000992:	bf00      	nop
 8000994:	e7fd      	b.n	8000992 <Error_Handler+0x8>
	...

08000998 <shell_init>:
int isStarted = 0;
int isADC_cplt =0;
uint8_t PWMLed = 255;


void shell_init(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 800099c:	2220      	movs	r2, #32
 800099e:	2100      	movs	r1, #0
 80009a0:	481a      	ldr	r0, [pc, #104]	@ (8000a0c <shell_init+0x74>)
 80009a2:	f006 fccf 	bl	8007344 <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 80009a6:	2240      	movs	r2, #64	@ 0x40
 80009a8:	2100      	movs	r1, #0
 80009aa:	4819      	ldr	r0, [pc, #100]	@ (8000a10 <shell_init+0x78>)
 80009ac:	f006 fcca 	bl	8007344 <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 80009b0:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <shell_init+0x7c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 80009b6:	2240      	movs	r2, #64	@ 0x40
 80009b8:	2100      	movs	r1, #0
 80009ba:	4817      	ldr	r0, [pc, #92]	@ (8000a18 <shell_init+0x80>)
 80009bc:	f006 fcc2 	bl	8007344 <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 80009c0:	2203      	movs	r2, #3
 80009c2:	2100      	movs	r1, #0
 80009c4:	2001      	movs	r0, #1
 80009c6:	f004 fcff 	bl	80053c8 <xQueueGenericCreate>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a13      	ldr	r2, [pc, #76]	@ (8000a1c <shell_init+0x84>)
 80009ce:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <shell_init+0x84>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d101      	bne.n	80009dc <shell_init+0x44>
 80009d8:	f7ff ffd7 	bl	800098a <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 80009dc:	4810      	ldr	r0, [pc, #64]	@ (8000a20 <shell_init+0x88>)
 80009de:	f7ff fbf7 	bl	80001d0 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ea:	490d      	ldr	r1, [pc, #52]	@ (8000a20 <shell_init+0x88>)
 80009ec:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <shell_init+0x8c>)
 80009ee:	f002 ffb2 	bl	8003956 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 80009f2:	480d      	ldr	r0, [pc, #52]	@ (8000a28 <shell_init+0x90>)
 80009f4:	f7ff fbec 	bl	80001d0 <strlen>
 80009f8:	4603      	mov	r3, r0
 80009fa:	b29a      	uxth	r2, r3
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a00:	4909      	ldr	r1, [pc, #36]	@ (8000a28 <shell_init+0x90>)
 8000a02:	4808      	ldr	r0, [pc, #32]	@ (8000a24 <shell_init+0x8c>)
 8000a04:	f002 ffa7 	bl	8003956 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000470 	.word	0x20000470
 8000a10:	2000042c 	.word	0x2000042c
 8000a14:	200003e8 	.word	0x200003e8
 8000a18:	200003ec 	.word	0x200003ec
 8000a1c:	2000018c 	.word	0x2000018c
 8000a20:	20000030 	.word	0x20000030
 8000a24:	20000508 	.word	0x20000508
 8000a28:	200000e0 	.word	0x200000e0

08000a2c <shell_run>:

void shell_run(void*) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 8000a3c:	4b5d      	ldr	r3, [pc, #372]	@ (8000bb4 <shell_run+0x188>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
		while (reading) {
 8000a42:	e070      	b.n	8000b26 <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000a44:	2201      	movs	r2, #1
 8000a46:	495c      	ldr	r1, [pc, #368]	@ (8000bb8 <shell_run+0x18c>)
 8000a48:	485c      	ldr	r0, [pc, #368]	@ (8000bbc <shell_run+0x190>)
 8000a4a:	f003 f80d 	bl	8003a68 <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 8000a4e:	4b5c      	ldr	r3, [pc, #368]	@ (8000bc0 <shell_run+0x194>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a56:	4618      	mov	r0, r3
 8000a58:	f004 fda0 	bl	800559c <xQueueSemaphoreTake>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d001      	beq.n	8000a66 <shell_run+0x3a>
 8000a62:	f7ff ff92 	bl	800098a <Error_Handler>

			switch (uartRxBuffer[0]) {
 8000a66:	4b54      	ldr	r3, [pc, #336]	@ (8000bb8 <shell_run+0x18c>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a6c:	d035      	beq.n	8000ada <shell_run+0xae>
 8000a6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a70:	dc47      	bgt.n	8000b02 <shell_run+0xd6>
 8000a72:	2b08      	cmp	r3, #8
 8000a74:	d031      	beq.n	8000ada <shell_run+0xae>
 8000a76:	2b0d      	cmp	r3, #13
 8000a78:	d143      	bne.n	8000b02 <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a7e:	2203      	movs	r2, #3
 8000a80:	4950      	ldr	r1, [pc, #320]	@ (8000bc4 <shell_run+0x198>)
 8000a82:	484e      	ldr	r0, [pc, #312]	@ (8000bbc <shell_run+0x190>)
 8000a84:	f002 ff67 	bl	8003956 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				//cmdBuffer[idx_cmd] = '\0';
				//On copie la commande dans l'historique
				//strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
				//cmdHistory_index_save++;
				argc = 0;
 8000a88:	4b4f      	ldr	r3, [pc, #316]	@ (8000bc8 <shell_run+0x19c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 8000a8e:	494f      	ldr	r1, [pc, #316]	@ (8000bcc <shell_run+0x1a0>)
 8000a90:	484f      	ldr	r0, [pc, #316]	@ (8000bd0 <shell_run+0x1a4>)
 8000a92:	f006 fbfb 	bl	800728c <strtok>
 8000a96:	4603      	mov	r3, r0
 8000a98:	4a4e      	ldr	r2, [pc, #312]	@ (8000bd4 <shell_run+0x1a8>)
 8000a9a:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 8000a9c:	e010      	b.n	8000ac0 <shell_run+0x94>
					argv[argc++] = token;
 8000a9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000bc8 <shell_run+0x19c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	4948      	ldr	r1, [pc, #288]	@ (8000bc8 <shell_run+0x19c>)
 8000aa6:	600a      	str	r2, [r1, #0]
 8000aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8000bd4 <shell_run+0x1a8>)
 8000aaa:	6812      	ldr	r2, [r2, #0]
 8000aac:	494a      	ldr	r1, [pc, #296]	@ (8000bd8 <shell_run+0x1ac>)
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 8000ab2:	4946      	ldr	r1, [pc, #280]	@ (8000bcc <shell_run+0x1a0>)
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f006 fbe9 	bl	800728c <strtok>
 8000aba:	4603      	mov	r3, r0
 8000abc:	4a45      	ldr	r2, [pc, #276]	@ (8000bd4 <shell_run+0x1a8>)
 8000abe:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 8000ac0:	4b44      	ldr	r3, [pc, #272]	@ (8000bd4 <shell_run+0x1a8>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d1ea      	bne.n	8000a9e <shell_run+0x72>
				}
				idx_cmd = 0;
 8000ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8000bb4 <shell_run+0x188>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 8000ad2:	4b42      	ldr	r3, [pc, #264]	@ (8000bdc <shell_run+0x1b0>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	601a      	str	r2, [r3, #0]
				break;
 8000ad8:	e025      	b.n	8000b26 <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 8000ada:	4b36      	ldr	r3, [pc, #216]	@ (8000bb4 <shell_run+0x188>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d020      	beq.n	8000b24 <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 8000ae2:	4b34      	ldr	r3, [pc, #208]	@ (8000bb4 <shell_run+0x188>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1e5a      	subs	r2, r3, #1
 8000ae8:	4932      	ldr	r1, [pc, #200]	@ (8000bb4 <shell_run+0x188>)
 8000aea:	600a      	str	r2, [r1, #0]
 8000aec:	4a38      	ldr	r2, [pc, #224]	@ (8000bd0 <shell_run+0x1a4>)
 8000aee:	2100      	movs	r1, #0
 8000af0:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000af6:	2204      	movs	r2, #4
 8000af8:	4939      	ldr	r1, [pc, #228]	@ (8000be0 <shell_run+0x1b4>)
 8000afa:	4830      	ldr	r0, [pc, #192]	@ (8000bbc <shell_run+0x190>)
 8000afc:	f002 ff2b 	bl	8003956 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 8000b00:	e011      	b.n	8000b26 <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000b02:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb4 <shell_run+0x188>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	1c5a      	adds	r2, r3, #1
 8000b08:	492a      	ldr	r1, [pc, #168]	@ (8000bb4 <shell_run+0x188>)
 8000b0a:	600a      	str	r2, [r1, #0]
 8000b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb8 <shell_run+0x18c>)
 8000b0e:	7811      	ldrb	r1, [r2, #0]
 8000b10:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd0 <shell_run+0x1a4>)
 8000b12:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 8000b14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b18:	2201      	movs	r2, #1
 8000b1a:	4927      	ldr	r1, [pc, #156]	@ (8000bb8 <shell_run+0x18c>)
 8000b1c:	4827      	ldr	r0, [pc, #156]	@ (8000bbc <shell_run+0x190>)
 8000b1e:	f002 ff1a 	bl	8003956 <HAL_UART_Transmit>
 8000b22:	e000      	b.n	8000b26 <shell_run+0xfa>
					break;
 8000b24:	bf00      	nop
		while (reading) {
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d18b      	bne.n	8000a44 <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 8000b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bdc <shell_run+0x1b0>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d081      	beq.n	8000a38 <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	e01b      	b.n	8000b72 <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 8000b3a:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <shell_run+0x1ac>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	4929      	ldr	r1, [pc, #164]	@ (8000be4 <shell_run+0x1b8>)
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	011b      	lsls	r3, r3, #4
 8000b44:	440b      	add	r3, r1
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	f7ff fb48 	bl	80001e0 <strcmp>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10a      	bne.n	8000b6c <shell_run+0x140>
					isFind = 1;
 8000b56:	4b24      	ldr	r3, [pc, #144]	@ (8000be8 <shell_run+0x1bc>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <shell_run+0x1b8>)
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	011b      	lsls	r3, r3, #4
 8000b62:	4413      	add	r3, r2
 8000b64:	330c      	adds	r3, #12
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	481b      	ldr	r0, [pc, #108]	@ (8000bd8 <shell_run+0x1ac>)
 8000b6a:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	2b02      	cmp	r3, #2
 8000b76:	d9e0      	bls.n	8000b3a <shell_run+0x10e>
				}
			}
			if (!isFind) {
 8000b78:	4b1b      	ldr	r3, [pc, #108]	@ (8000be8 <shell_run+0x1bc>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d106      	bne.n	8000b8e <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b84:	2214      	movs	r2, #20
 8000b86:	4919      	ldr	r1, [pc, #100]	@ (8000bec <shell_run+0x1c0>)
 8000b88:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <shell_run+0x190>)
 8000b8a:	f002 fee4 	bl	8003956 <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b92:	2212      	movs	r2, #18
 8000b94:	4916      	ldr	r1, [pc, #88]	@ (8000bf0 <shell_run+0x1c4>)
 8000b96:	4809      	ldr	r0, [pc, #36]	@ (8000bbc <shell_run+0x190>)
 8000b98:	f002 fedd 	bl	8003956 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <shell_run+0x1b0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
			isFind = 0;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <shell_run+0x1bc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 8000ba8:	2220      	movs	r2, #32
 8000baa:	2100      	movs	r1, #0
 8000bac:	4808      	ldr	r0, [pc, #32]	@ (8000bd0 <shell_run+0x1a4>)
 8000bae:	f006 fbc9 	bl	8007344 <memset>
		reading = 1;
 8000bb2:	e741      	b.n	8000a38 <shell_run+0xc>
 8000bb4:	2000046c 	.word	0x2000046c
 8000bb8:	200003e8 	.word	0x200003e8
 8000bbc:	20000508 	.word	0x20000508
 8000bc0:	2000018c 	.word	0x2000018c
 8000bc4:	200000c4 	.word	0x200000c4
 8000bc8:	20000490 	.word	0x20000490
 8000bcc:	080081e0 	.word	0x080081e0
 8000bd0:	2000042c 	.word	0x2000042c
 8000bd4:	20000494 	.word	0x20000494
 8000bd8:	20000470 	.word	0x20000470
 8000bdc:	20000498 	.word	0x20000498
 8000be0:	200000c8 	.word	0x200000c8
 8000be4:	20000000 	.word	0x20000000
 8000be8:	2000049c 	.word	0x2000049c
 8000bec:	200000cc 	.word	0x200000cc
 8000bf0:	200000e0 	.word	0x200000e0

08000bf4 <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b088      	sub	sp, #32
 8000bf8:	af04      	add	r7, sp, #16
 8000bfa:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <subfunct_help+0x74>)
 8000bfe:	9302      	str	r3, [sp, #8]
 8000c00:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <subfunct_help+0x78>)
 8000c02:	9301      	str	r3, [sp, #4]
 8000c04:	4b1a      	ldr	r3, [pc, #104]	@ (8000c70 <subfunct_help+0x7c>)
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <subfunct_help+0x80>)
 8000c0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <subfunct_help+0x84>)
 8000c0c:	491b      	ldr	r1, [pc, #108]	@ (8000c7c <subfunct_help+0x88>)
 8000c0e:	481c      	ldr	r0, [pc, #112]	@ (8000c80 <subfunct_help+0x8c>)
 8000c10:	f006 facc 	bl	80071ac <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8000c14:	2300      	movs	r3, #0
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	e01b      	b.n	8000c52 <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8000c84 <subfunct_help+0x90>)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	4413      	add	r3, r2
 8000c22:	6819      	ldr	r1, [r3, #0]
 8000c24:	4a17      	ldr	r2, [pc, #92]	@ (8000c84 <subfunct_help+0x90>)
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	011b      	lsls	r3, r3, #4
 8000c2a:	4413      	add	r3, r2
 8000c2c:	3308      	adds	r3, #8
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4814      	ldr	r0, [pc, #80]	@ (8000c84 <subfunct_help+0x90>)
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	4402      	add	r2, r0
 8000c38:	3204      	adds	r2, #4
 8000c3a:	6812      	ldr	r2, [r2, #0]
 8000c3c:	9201      	str	r2, [sp, #4]
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <subfunct_help+0x78>)
 8000c42:	460a      	mov	r2, r1
 8000c44:	4910      	ldr	r1, [pc, #64]	@ (8000c88 <subfunct_help+0x94>)
 8000c46:	4811      	ldr	r0, [pc, #68]	@ (8000c8c <subfunct_help+0x98>)
 8000c48:	f006 fab0 	bl	80071ac <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d9e0      	bls.n	8000c1a <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 8000c58:	480d      	ldr	r0, [pc, #52]	@ (8000c90 <subfunct_help+0x9c>)
 8000c5a:	f006 fb0f 	bl	800727c <puts>
}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	08008220 	.word	0x08008220
 8000c6c:	08008270 	.word	0x08008270
 8000c70:	08008278 	.word	0x08008278
 8000c74:	080081e4 	.word	0x080081e4
 8000c78:	080081ec 	.word	0x080081ec
 8000c7c:	080081f8 	.word	0x080081f8
 8000c80:	08008200 	.word	0x08008200
 8000c84:	20000000 	.word	0x20000000
 8000c88:	08008284 	.word	0x08008284
 8000c8c:	0800828c 	.word	0x0800828c
 8000c90:	080082a8 	.word	0x080082a8

08000c94 <subfunct_clear>:

void subfunct_clear(char **argv) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 8000c9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca0:	2208      	movs	r2, #8
 8000ca2:	4904      	ldr	r1, [pc, #16]	@ (8000cb4 <subfunct_clear+0x20>)
 8000ca4:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <subfunct_clear+0x24>)
 8000ca6:	f002 fe56 	bl	8003956 <HAL_UART_Transmit>
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200000f4 	.word	0x200000f4
 8000cb8:	20000508 	.word	0x20000508

08000cbc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cc2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d34 <MX_SPI3_Init+0x78>)
 8000cc4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cc8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ccc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd4:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cd6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cda:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000d16:	2208      	movs	r2, #8
 8000d18:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_SPI3_Init+0x74>)
 8000d1c:	f002 f9a6 	bl	800306c <HAL_SPI_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d26:	f7ff fe30 	bl	800098a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200004a0 	.word	0x200004a0
 8000d34:	40003c00 	.word	0x40003c00

08000d38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a29      	ldr	r2, [pc, #164]	@ (8000dfc <HAL_SPI_MspInit+0xc4>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d14c      	bne.n	8000df4 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d5a:	4b29      	ldr	r3, [pc, #164]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d5e:	4a28      	ldr	r2, [pc, #160]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d66:	4b26      	ldr	r3, [pc, #152]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d6a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b23      	ldr	r3, [pc, #140]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d76:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d7e:	4b20      	ldr	r3, [pc, #128]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d96:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <HAL_SPI_MspInit+0xc8>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000da2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	2303      	movs	r3, #3
 8000db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000db4:	2306      	movs	r3, #6
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4811      	ldr	r0, [pc, #68]	@ (8000e04 <HAL_SPI_MspInit+0xcc>)
 8000dc0:	f000 fc58 	bl	8001674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dc4:	2320      	movs	r3, #32
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480a      	ldr	r0, [pc, #40]	@ (8000e08 <HAL_SPI_MspInit+0xd0>)
 8000de0:	f000 fc48 	bl	8001674 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2105      	movs	r1, #5
 8000de8:	2033      	movs	r0, #51	@ 0x33
 8000dea:	f000 fb8e 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000dee:	2033      	movs	r0, #51	@ 0x33
 8000df0:	f000 fba7 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	@ 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40003c00 	.word	0x40003c00
 8000e00:	40021000 	.word	0x40021000
 8000e04:	48000800 	.word	0x48000800
 8000e08:	48000400 	.word	0x48000400

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e36:	4b08      	ldr	r3, [pc, #32]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e42:	2200      	movs	r2, #0
 8000e44:	210f      	movs	r1, #15
 8000e46:	f06f 0001 	mvn.w	r0, #1
 8000e4a:	f000 fb5e 	bl	800150a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	bf00      	nop
 8000e72:	e7fd      	b.n	8000e70 <MemManage_Handler+0x4>

08000e74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e78:	bf00      	nop
 8000e7a:	e7fd      	b.n	8000e78 <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	bf00      	nop
 8000e82:	e7fd      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e96:	f000 fa19 	bl	80012cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e9a:	f005 fae7 	bl	800646c <xTaskGetSchedulerState>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d001      	beq.n	8000ea8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ea4:	f005 fe40 	bl	8006b28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	@ (8000ebc <USART2_IRQHandler+0x10>)
 8000eb2:	f002 fe25 	bl	8003b00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000508 	.word	0x20000508

08000ec0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000ec4:	4806      	ldr	r0, [pc, #24]	@ (8000ee0 <SPI3_IRQHandler+0x20>)
 8000ec6:	f002 f9fd 	bl	80032c4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */
  spi_tx_complete = 0;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <SPI3_IRQHandler+0x24>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ed0:	2120      	movs	r1, #32
 8000ed2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ed6:	f000 fd8f 	bl	80019f8 <HAL_GPIO_TogglePin>
  /* USER CODE END SPI3_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200004a0 	.word	0x200004a0
 8000ee4:	20000188 	.word	0x20000188

08000ee8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return 1;
 8000eec:	2301      	movs	r3, #1
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_kill>:

int _kill(int pid, int sig)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f02:	f006 fa27 	bl	8007354 <__errno>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2216      	movs	r2, #22
 8000f0a:	601a      	str	r2, [r3, #0]
  return -1;
 8000f0c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <_exit>:

void _exit (int status)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff ffe7 	bl	8000ef8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f2a:	bf00      	nop
 8000f2c:	e7fd      	b.n	8000f2a <_exit+0x12>

08000f2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e00a      	b.n	8000f56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f40:	f3af 8000 	nop.w
 8000f44:	4601      	mov	r1, r0
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60ba      	str	r2, [r7, #8]
 8000f4c:	b2ca      	uxtb	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	697a      	ldr	r2, [r7, #20]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbf0      	blt.n	8000f40 <_read+0x12>
  }

  return len;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3718      	adds	r7, #24
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	e009      	b.n	8000f8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	1c5a      	adds	r2, r3, #1
 8000f7e:	60ba      	str	r2, [r7, #8]
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fc68 	bl	8000858 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697a      	ldr	r2, [r7, #20]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	dbf1      	blt.n	8000f7a <_write+0x12>
  }
  return len;
 8000f96:	687b      	ldr	r3, [r7, #4]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_close>:

int _close(int file)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fc8:	605a      	str	r2, [r3, #4]
  return 0;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_isatty>:

int _isatty(int file)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b085      	sub	sp, #20
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	60f8      	str	r0, [r7, #12]
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b086      	sub	sp, #24
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001010:	4a14      	ldr	r2, [pc, #80]	@ (8001064 <_sbrk+0x5c>)
 8001012:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <_sbrk+0x60>)
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <_sbrk+0x64>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d102      	bne.n	800102a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <_sbrk+0x64>)
 8001026:	4a12      	ldr	r2, [pc, #72]	@ (8001070 <_sbrk+0x68>)
 8001028:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	429a      	cmp	r2, r3
 8001036:	d207      	bcs.n	8001048 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001038:	f006 f98c 	bl	8007354 <__errno>
 800103c:	4603      	mov	r3, r0
 800103e:	220c      	movs	r2, #12
 8001040:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001042:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001046:	e009      	b.n	800105c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001048:	4b08      	ldr	r3, [pc, #32]	@ (800106c <_sbrk+0x64>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	4a05      	ldr	r2, [pc, #20]	@ (800106c <_sbrk+0x64>)
 8001058:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800105a:	68fb      	ldr	r3, [r7, #12]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20018000 	.word	0x20018000
 8001068:	00000400 	.word	0x00000400
 800106c:	20000504 	.word	0x20000504
 8001070:	20002f48 	.word	0x20002f48

08001074 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001078:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <SystemInit+0x20>)
 800107a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800107e:	4a05      	ldr	r2, [pc, #20]	@ (8001094 <SystemInit+0x20>)
 8001080:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001084:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800109c:	4b14      	ldr	r3, [pc, #80]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 800109e:	4a15      	ldr	r2, [pc, #84]	@ (80010f4 <MX_USART2_UART_Init+0x5c>)
 80010a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010a2:	4b13      	ldr	r3, [pc, #76]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010aa:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010b0:	4b0f      	ldr	r3, [pc, #60]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010be:	220c      	movs	r2, #12
 80010c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c8:	4b09      	ldr	r3, [pc, #36]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	@ (80010f0 <MX_USART2_UART_Init+0x58>)
 80010dc:	f002 fbed 	bl	80038ba <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010e6:	f7ff fc50 	bl	800098a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000508 	.word	0x20000508
 80010f4:	40004400 	.word	0x40004400

080010f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0ac      	sub	sp, #176	@ 0xb0
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	2288      	movs	r2, #136	@ 0x88
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f006 f913 	bl	8007344 <memset>
  if(uartHandle->Instance==USART2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a25      	ldr	r2, [pc, #148]	@ (80011b8 <HAL_UART_MspInit+0xc0>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d143      	bne.n	80011b0 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001128:	2302      	movs	r3, #2
 800112a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800112c:	2300      	movs	r3, #0
 800112e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4618      	mov	r0, r3
 8001136:	f001 fadd 	bl	80026f4 <HAL_RCCEx_PeriphCLKConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001140:	f7ff fc23 	bl	800098a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001144:	4b1d      	ldr	r3, [pc, #116]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 8001146:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001148:	4a1c      	ldr	r2, [pc, #112]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 800114a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001150:	4b1a      	ldr	r3, [pc, #104]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 8001152:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b17      	ldr	r3, [pc, #92]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001160:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001168:	4b14      	ldr	r3, [pc, #80]	@ (80011bc <HAL_UART_MspInit+0xc4>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001174:	230c      	movs	r3, #12
 8001176:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001186:	2303      	movs	r3, #3
 8001188:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800118c:	2307      	movs	r3, #7
 800118e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f000 fa6a 	bl	8001674 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2105      	movs	r1, #5
 80011a4:	2026      	movs	r0, #38	@ 0x26
 80011a6:	f000 f9b0 	bl	800150a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011aa:	2026      	movs	r0, #38	@ 0x26
 80011ac:	f000 f9c9 	bl	8001542 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011b0:	bf00      	nop
 80011b2:	37b0      	adds	r7, #176	@ 0xb0
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40021000 	.word	0x40021000

080011c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c4:	f7ff ff56 	bl	8001074 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <LoopForever+0x6>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	@ (8001200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <LoopForever+0xe>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	@ (800120c <LoopForever+0x16>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f006 f8b7 	bl	8007360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f2:	f7ff fb43 	bl	800087c <main>

080011f6 <LoopForever>:

LoopForever:
    b LoopForever
 80011f6:	e7fe      	b.n	80011f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001200:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001204:	08008444 	.word	0x08008444
  ldr r2, =_sbss
 8001208:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 800120c:	20002f44 	.word	0x20002f44

08001210 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_2_IRQHandler>
	...

08001214 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <HAL_Init+0x3c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a0b      	ldr	r2, [pc, #44]	@ (8001250 <HAL_Init+0x3c>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001228:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122a:	2003      	movs	r0, #3
 800122c:	f000 f962 	bl	80014f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001230:	200f      	movs	r0, #15
 8001232:	f000 f80f 	bl	8001254 <HAL_InitTick>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	e001      	b.n	8001246 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001242:	f7ff fde3 	bl	8000e0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001246:	79fb      	ldrb	r3, [r7, #7]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40022000 	.word	0x40022000

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001260:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <HAL_InitTick+0x6c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d023      	beq.n	80012b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <HAL_InitTick+0x70>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <HAL_InitTick+0x6c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f96d 	bl	800155e <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d10f      	bne.n	80012aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d809      	bhi.n	80012a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001298:	f000 f937 	bl	800150a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129c:	4a0a      	ldr	r2, [pc, #40]	@ (80012c8 <HAL_InitTick+0x74>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e007      	b.n	80012b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e004      	b.n	80012b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	73fb      	strb	r3, [r7, #15]
 80012ae:	e001      	b.n	80012b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000104 	.word	0x20000104
 80012c4:	200000fc 	.word	0x200000fc
 80012c8:	20000100 	.word	0x20000100

080012cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <HAL_IncTick+0x20>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <HAL_IncTick+0x24>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4413      	add	r3, r2
 80012dc:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <HAL_IncTick+0x24>)
 80012de:	6013      	str	r3, [r2, #0]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	20000104 	.word	0x20000104
 80012f0:	20000590 	.word	0x20000590

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000590 	.word	0x20000590

0800130c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001314:	f7ff ffee 	bl	80012f4 <HAL_GetTick>
 8001318:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001324:	d005      	beq.n	8001332 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001326:	4b0a      	ldr	r3, [pc, #40]	@ (8001350 <HAL_Delay+0x44>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	461a      	mov	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001332:	bf00      	nop
 8001334:	f7ff ffde 	bl	80012f4 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d8f7      	bhi.n	8001334 <HAL_Delay+0x28>
  {
  }
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000104 	.word	0x20000104

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4907      	ldr	r1, [pc, #28]	@ (80013f0 <__NVIC_EnableIRQ+0x38>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000e100 	.word	0xe000e100

080013f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	4603      	mov	r3, r0
 80013fc:	6039      	str	r1, [r7, #0]
 80013fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001404:	2b00      	cmp	r3, #0
 8001406:	db0a      	blt.n	800141e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	b2da      	uxtb	r2, r3
 800140c:	490c      	ldr	r1, [pc, #48]	@ (8001440 <__NVIC_SetPriority+0x4c>)
 800140e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001412:	0112      	lsls	r2, r2, #4
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	440b      	add	r3, r1
 8001418:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800141c:	e00a      	b.n	8001434 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4908      	ldr	r1, [pc, #32]	@ (8001444 <__NVIC_SetPriority+0x50>)
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	3b04      	subs	r3, #4
 800142c:	0112      	lsls	r2, r2, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	440b      	add	r3, r1
 8001432:	761a      	strb	r2, [r3, #24]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000e100 	.word	0xe000e100
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b480      	push	{r7}
 800144a:	b089      	sub	sp, #36	@ 0x24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	f1c3 0307 	rsb	r3, r3, #7
 8001462:	2b04      	cmp	r3, #4
 8001464:	bf28      	it	cs
 8001466:	2304      	movcs	r3, #4
 8001468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	3304      	adds	r3, #4
 800146e:	2b06      	cmp	r3, #6
 8001470:	d902      	bls.n	8001478 <NVIC_EncodePriority+0x30>
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	3b03      	subs	r3, #3
 8001476:	e000      	b.n	800147a <NVIC_EncodePriority+0x32>
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43da      	mvns	r2, r3
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	401a      	ands	r2, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001490:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa01 f303 	lsl.w	r3, r1, r3
 800149a:	43d9      	mvns	r1, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	4313      	orrs	r3, r2
         );
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3724      	adds	r7, #36	@ 0x24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014c0:	d301      	bcc.n	80014c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00f      	b.n	80014e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014c6:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <SysTick_Config+0x40>)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ce:	210f      	movs	r1, #15
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014d4:	f7ff ff8e 	bl	80013f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d8:	4b05      	ldr	r3, [pc, #20]	@ (80014f0 <SysTick_Config+0x40>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014de:	4b04      	ldr	r3, [pc, #16]	@ (80014f0 <SysTick_Config+0x40>)
 80014e0:	2207      	movs	r2, #7
 80014e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	e000e010 	.word	0xe000e010

080014f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff ff29 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b086      	sub	sp, #24
 800150e:	af00      	add	r7, sp, #0
 8001510:	4603      	mov	r3, r0
 8001512:	60b9      	str	r1, [r7, #8]
 8001514:	607a      	str	r2, [r7, #4]
 8001516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800151c:	f7ff ff3e 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001520:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	6978      	ldr	r0, [r7, #20]
 8001528:	f7ff ff8e 	bl	8001448 <NVIC_EncodePriority>
 800152c:	4602      	mov	r2, r0
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	4611      	mov	r1, r2
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff5d 	bl	80013f4 <__NVIC_SetPriority>
}
 800153a:	bf00      	nop
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff31 	bl	80013b8 <__NVIC_EnableIRQ>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ffa2 	bl	80014b0 <SysTick_Config>
 800156c:	4603      	mov	r3, r0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001576:	b480      	push	{r7}
 8001578:	b085      	sub	sp, #20
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d008      	beq.n	80015a0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2204      	movs	r2, #4
 8001592:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e022      	b.n	80015e6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 020e 	bic.w	r2, r2, #14
 80015ae:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f022 0201 	bic.w	r2, r2, #1
 80015be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c4:	f003 021c 	and.w	r2, r3, #28
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	2101      	movs	r1, #1
 80015ce:	fa01 f202 	lsl.w	r2, r1, r2
 80015d2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2201      	movs	r2, #1
 80015d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80015e4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d005      	beq.n	8001616 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2204      	movs	r2, #4
 800160e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	e029      	b.n	800166a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f022 020e 	bic.w	r2, r2, #14
 8001624:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 0201 	bic.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	f003 021c 	and.w	r2, r3, #28
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001642:	2101      	movs	r1, #1
 8001644:	fa01 f202 	lsl.w	r2, r1, r2
 8001648:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	4798      	blx	r3
    }
  }
  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001682:	e17f      	b.n	8001984 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 8171 	beq.w	800197e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d005      	beq.n	80016b4 <HAL_GPIO_Init+0x40>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43db      	mvns	r3, r3
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	f003 0201 	and.w	r2, r3, #1
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b03      	cmp	r3, #3
 8001720:	d118      	bne.n	8001754 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001728:	2201      	movs	r2, #1
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43db      	mvns	r3, r3
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	08db      	lsrs	r3, r3, #3
 800173e:	f003 0201 	and.w	r2, r3, #1
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b03      	cmp	r3, #3
 800175e:	d017      	beq.n	8001790 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	2203      	movs	r2, #3
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d123      	bne.n	80017e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	08da      	lsrs	r2, r3, #3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3208      	adds	r2, #8
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	220f      	movs	r2, #15
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	08da      	lsrs	r2, r3, #3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	3208      	adds	r2, #8
 80017de:	6939      	ldr	r1, [r7, #16]
 80017e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0203 	and.w	r2, r3, #3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001820:	2b00      	cmp	r3, #0
 8001822:	f000 80ac 	beq.w	800197e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001826:	4b5f      	ldr	r3, [pc, #380]	@ (80019a4 <HAL_GPIO_Init+0x330>)
 8001828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800182a:	4a5e      	ldr	r2, [pc, #376]	@ (80019a4 <HAL_GPIO_Init+0x330>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6613      	str	r3, [r2, #96]	@ 0x60
 8001832:	4b5c      	ldr	r3, [pc, #368]	@ (80019a4 <HAL_GPIO_Init+0x330>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800183e:	4a5a      	ldr	r2, [pc, #360]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0303 	and.w	r3, r3, #3
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	220f      	movs	r2, #15
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001868:	d025      	beq.n	80018b6 <HAL_GPIO_Init+0x242>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a4f      	ldr	r2, [pc, #316]	@ (80019ac <HAL_GPIO_Init+0x338>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01f      	beq.n	80018b2 <HAL_GPIO_Init+0x23e>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a4e      	ldr	r2, [pc, #312]	@ (80019b0 <HAL_GPIO_Init+0x33c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d019      	beq.n	80018ae <HAL_GPIO_Init+0x23a>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a4d      	ldr	r2, [pc, #308]	@ (80019b4 <HAL_GPIO_Init+0x340>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d013      	beq.n	80018aa <HAL_GPIO_Init+0x236>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a4c      	ldr	r2, [pc, #304]	@ (80019b8 <HAL_GPIO_Init+0x344>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_GPIO_Init+0x232>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a4b      	ldr	r2, [pc, #300]	@ (80019bc <HAL_GPIO_Init+0x348>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d007      	beq.n	80018a2 <HAL_GPIO_Init+0x22e>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a4a      	ldr	r2, [pc, #296]	@ (80019c0 <HAL_GPIO_Init+0x34c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d101      	bne.n	800189e <HAL_GPIO_Init+0x22a>
 800189a:	2306      	movs	r3, #6
 800189c:	e00c      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 800189e:	2307      	movs	r3, #7
 80018a0:	e00a      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018a2:	2305      	movs	r3, #5
 80018a4:	e008      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018a6:	2304      	movs	r3, #4
 80018a8:	e006      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018aa:	2303      	movs	r3, #3
 80018ac:	e004      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e002      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_GPIO_Init+0x244>
 80018b6:	2300      	movs	r3, #0
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	f002 0203 	and.w	r2, r2, #3
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	4093      	lsls	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018c8:	4937      	ldr	r1, [pc, #220]	@ (80019a8 <HAL_GPIO_Init+0x334>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018d6:	4b3b      	ldr	r3, [pc, #236]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018fa:	4a32      	ldr	r2, [pc, #200]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001900:	4b30      	ldr	r3, [pc, #192]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001924:	4a27      	ldr	r2, [pc, #156]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800192a:	4b26      	ldr	r3, [pc, #152]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800194e:	4a1d      	ldr	r2, [pc, #116]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001978:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <HAL_GPIO_Init+0x350>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa22 f303 	lsr.w	r3, r2, r3
 800198e:	2b00      	cmp	r3, #0
 8001990:	f47f ae78 	bne.w	8001684 <HAL_GPIO_Init+0x10>
  }
}
 8001994:	bf00      	nop
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	48000400 	.word	0x48000400
 80019b0:	48000800 	.word	0x48000800
 80019b4:	48000c00 	.word	0x48000c00
 80019b8:	48001000 	.word	0x48001000
 80019bc:	48001400 	.word	0x48001400
 80019c0:	48001800 	.word	0x48001800
 80019c4:	40010400 	.word	0x40010400

080019c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
 80019d4:	4613      	mov	r3, r2
 80019d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019d8:	787b      	ldrb	r3, [r7, #1]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e4:	e002      	b.n	80019ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019e6:	887a      	ldrh	r2, [r7, #2]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	041a      	lsls	r2, r3, #16
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43d9      	mvns	r1, r3
 8001a16:	887b      	ldrh	r3, [r7, #2]
 8001a18:	400b      	ands	r3, r1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	619a      	str	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a30:	4b04      	ldr	r3, [pc, #16]	@ (8001a44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40007000 	.word	0x40007000

08001a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a56:	d130      	bne.n	8001aba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a58:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a64:	d038      	beq.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2232      	movs	r2, #50	@ 0x32
 8001a7c:	fb02 f303 	mul.w	r3, r2, r3
 8001a80:	4a1b      	ldr	r2, [pc, #108]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0c9b      	lsrs	r3, r3, #18
 8001a88:	3301      	adds	r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8c:	e002      	b.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa0:	d102      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1f2      	bne.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ab4:	d110      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e00f      	b.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ac6:	d007      	beq.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac8:	4b07      	ldr	r3, [pc, #28]	@ (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ad0:	4a05      	ldr	r2, [pc, #20]	@ (8001ae8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ad6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	200000fc 	.word	0x200000fc
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e3ca      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b06:	4b97      	ldr	r3, [pc, #604]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b10:	4b94      	ldr	r3, [pc, #592]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 80e4 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_RCC_OscConfig+0x4a>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	f040 808b 	bne.w	8001c4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	f040 8087 	bne.w	8001c4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b3e:	4b89      	ldr	r3, [pc, #548]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x62>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e3a2      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	4b82      	ldr	r3, [pc, #520]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d004      	beq.n	8001b70 <HAL_RCC_OscConfig+0x7c>
 8001b66:	4b7f      	ldr	r3, [pc, #508]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b6e:	e005      	b.n	8001b7c <HAL_RCC_OscConfig+0x88>
 8001b70:	4b7c      	ldr	r3, [pc, #496]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b76:	091b      	lsrs	r3, r3, #4
 8001b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d223      	bcs.n	8001bc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fd55 	bl	8002634 <RCC_SetFlashLatencyFromMSIRange>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e383      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b94:	4b73      	ldr	r3, [pc, #460]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a72      	ldr	r2, [pc, #456]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b70      	ldr	r3, [pc, #448]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	496d      	ldr	r1, [pc, #436]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	021b      	lsls	r3, r3, #8
 8001bc0:	4968      	ldr	r1, [pc, #416]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	604b      	str	r3, [r1, #4]
 8001bc6:	e025      	b.n	8001c14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bc8:	4b66      	ldr	r3, [pc, #408]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a65      	ldr	r2, [pc, #404]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bce:	f043 0308 	orr.w	r3, r3, #8
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b63      	ldr	r3, [pc, #396]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4960      	ldr	r1, [pc, #384]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001be6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69db      	ldr	r3, [r3, #28]
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	495b      	ldr	r1, [pc, #364]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fd15 	bl	8002634 <RCC_SetFlashLatencyFromMSIRange>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e343      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c14:	f000 fc4a 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	4b52      	ldr	r3, [pc, #328]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	091b      	lsrs	r3, r3, #4
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	4950      	ldr	r1, [pc, #320]	@ (8001d68 <HAL_RCC_OscConfig+0x274>)
 8001c26:	5ccb      	ldrb	r3, [r1, r3]
 8001c28:	f003 031f 	and.w	r3, r3, #31
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	4a4e      	ldr	r2, [pc, #312]	@ (8001d6c <HAL_RCC_OscConfig+0x278>)
 8001c32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c34:	4b4e      	ldr	r3, [pc, #312]	@ (8001d70 <HAL_RCC_OscConfig+0x27c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fb0b 	bl	8001254 <HAL_InitTick>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d052      	beq.n	8001cee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c48:	7bfb      	ldrb	r3, [r7, #15]
 8001c4a:	e327      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d032      	beq.n	8001cba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c54:	4b43      	ldr	r3, [pc, #268]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a42      	ldr	r2, [pc, #264]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb48 	bl	80012f4 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c68:	f7ff fb44 	bl	80012f4 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e310      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c7a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c86:	4b37      	ldr	r3, [pc, #220]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a36      	ldr	r2, [pc, #216]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c8c:	f043 0308 	orr.w	r3, r3, #8
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b34      	ldr	r3, [pc, #208]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4931      	ldr	r1, [pc, #196]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	021b      	lsls	r3, r3, #8
 8001cb2:	492c      	ldr	r1, [pc, #176]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	604b      	str	r3, [r1, #4]
 8001cb8:	e01a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cba:	4b2a      	ldr	r3, [pc, #168]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a29      	ldr	r2, [pc, #164]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff fb15 	bl	80012f4 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cce:	f7ff fb11 	bl	80012f4 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e2dd      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ce0:	4b20      	ldr	r3, [pc, #128]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1f0      	bne.n	8001cce <HAL_RCC_OscConfig+0x1da>
 8001cec:	e000      	b.n	8001cf0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d074      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2b08      	cmp	r3, #8
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x21a>
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b0c      	cmp	r3, #12
 8001d06:	d10e      	bne.n	8001d26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d10b      	bne.n	8001d26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d064      	beq.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d160      	bne.n	8001de4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e2ba      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x24a>
 8001d30:	4b0c      	ldr	r3, [pc, #48]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	e026      	b.n	8001d8c <HAL_RCC_OscConfig+0x298>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d46:	d115      	bne.n	8001d74 <HAL_RCC_OscConfig+0x280>
 8001d48:	4b06      	ldr	r3, [pc, #24]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a05      	ldr	r2, [pc, #20]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a02      	ldr	r2, [pc, #8]	@ (8001d64 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	e014      	b.n	8001d8c <HAL_RCC_OscConfig+0x298>
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	0800830c 	.word	0x0800830c
 8001d6c:	200000fc 	.word	0x200000fc
 8001d70:	20000100 	.word	0x20000100
 8001d74:	4ba0      	ldr	r3, [pc, #640]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a9f      	ldr	r2, [pc, #636]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b9d      	ldr	r3, [pc, #628]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a9c      	ldr	r2, [pc, #624]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff faae 	bl	80012f4 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff faaa 	bl	80012f4 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e276      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dae:	4b92      	ldr	r3, [pc, #584]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0x2a8>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fa9a 	bl	80012f4 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fa96 	bl	80012f4 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e262      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dd6:	4b88      	ldr	r3, [pc, #544]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x2d0>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d060      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_OscConfig+0x310>
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d119      	bne.n	8001e32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d116      	bne.n	8001e32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e04:	4b7c      	ldr	r3, [pc, #496]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_OscConfig+0x328>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e23f      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e1c:	4b76      	ldr	r3, [pc, #472]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	061b      	lsls	r3, r3, #24
 8001e2a:	4973      	ldr	r1, [pc, #460]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e30:	e040      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d023      	beq.n	8001e82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6e      	ldr	r2, [pc, #440]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7ff fa55 	bl	80012f4 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7ff fa51 	bl	80012f4 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e21d      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e60:	4b65      	ldr	r3, [pc, #404]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4b62      	ldr	r3, [pc, #392]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	061b      	lsls	r3, r3, #24
 8001e7a:	495f      	ldr	r1, [pc, #380]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e018      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e82:	4b5d      	ldr	r3, [pc, #372]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a5c      	ldr	r2, [pc, #368]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001e88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8e:	f7ff fa31 	bl	80012f4 <HAL_GetTick>
 8001e92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e94:	e008      	b.n	8001ea8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fa2d 	bl	80012f4 <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e1f9      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea8:	4b53      	ldr	r3, [pc, #332]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f0      	bne.n	8001e96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d03c      	beq.n	8001f3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d01c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ece:	4a4a      	ldr	r2, [pc, #296]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fa0c 	bl	80012f4 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fa08 	bl	80012f4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1d4      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ef2:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0ef      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x3ec>
 8001f00:	e01b      	b.n	8001f3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f02:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f08:	4a3b      	ldr	r2, [pc, #236]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f12:	f7ff f9ef 	bl	80012f4 <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7ff f9eb 	bl	80012f4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1b7      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f2c:	4b32      	ldr	r3, [pc, #200]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1ef      	bne.n	8001f1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 80a6 	beq.w	8002094 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10d      	bne.n	8001f74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f5c:	4a26      	ldr	r2, [pc, #152]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f62:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f64:	4b24      	ldr	r3, [pc, #144]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6c:	60bb      	str	r3, [r7, #8]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f70:	2301      	movs	r3, #1
 8001f72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f74:	4b21      	ldr	r3, [pc, #132]	@ (8001ffc <HAL_RCC_OscConfig+0x508>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d118      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <HAL_RCC_OscConfig+0x508>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <HAL_RCC_OscConfig+0x508>)
 8001f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f9b2 	bl	80012f4 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f94:	f7ff f9ae 	bl	80012f4 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e17a      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_RCC_OscConfig+0x508>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d108      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4d8>
 8001fba:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fca:	e029      	b.n	8002020 <HAL_RCC_OscConfig+0x52c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b05      	cmp	r3, #5
 8001fd2:	d115      	bne.n	8002000 <HAL_RCC_OscConfig+0x50c>
 8001fd4:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fda:	4a07      	ldr	r2, [pc, #28]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fdc:	f043 0304 	orr.w	r3, r3, #4
 8001fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fea:	4a03      	ldr	r2, [pc, #12]	@ (8001ff8 <HAL_RCC_OscConfig+0x504>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ff4:	e014      	b.n	8002020 <HAL_RCC_OscConfig+0x52c>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
 8002000:	4b9c      	ldr	r3, [pc, #624]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002006:	4a9b      	ldr	r2, [pc, #620]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002010:	4b98      	ldr	r3, [pc, #608]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	4a97      	ldr	r2, [pc, #604]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002018:	f023 0304 	bic.w	r3, r3, #4
 800201c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d016      	beq.n	8002056 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff f964 	bl	80012f4 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff f960 	bl	80012f4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e12a      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002046:	4b8b      	ldr	r3, [pc, #556]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ed      	beq.n	8002030 <HAL_RCC_OscConfig+0x53c>
 8002054:	e015      	b.n	8002082 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002056:	f7ff f94d 	bl	80012f4 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205e:	f7ff f949 	bl	80012f4 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800206c:	4293      	cmp	r3, r2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e113      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002074:	4b7f      	ldr	r3, [pc, #508]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1ed      	bne.n	800205e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002082:	7ffb      	ldrb	r3, [r7, #31]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002088:	4b7a      	ldr	r3, [pc, #488]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800208c:	4a79      	ldr	r2, [pc, #484]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 800208e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002092:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 80fe 	beq.w	800229a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	f040 80d0 	bne.w	8002248 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020a8:	4b72      	ldr	r3, [pc, #456]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f003 0203 	and.w	r2, r3, #3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d130      	bne.n	800211e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	3b01      	subs	r3, #1
 80020c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d127      	bne.n	800211e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d11f      	bne.n	800211e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020e8:	2a07      	cmp	r2, #7
 80020ea:	bf14      	ite	ne
 80020ec:	2201      	movne	r2, #1
 80020ee:	2200      	moveq	r2, #0
 80020f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d113      	bne.n	800211e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002100:	085b      	lsrs	r3, r3, #1
 8002102:	3b01      	subs	r3, #1
 8002104:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002106:	429a      	cmp	r2, r3
 8002108:	d109      	bne.n	800211e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	085b      	lsrs	r3, r3, #1
 8002116:	3b01      	subs	r3, #1
 8002118:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d06e      	beq.n	80021fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	2b0c      	cmp	r3, #12
 8002122:	d069      	beq.n	80021f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002124:	4b53      	ldr	r3, [pc, #332]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d105      	bne.n	800213c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002130:	4b50      	ldr	r3, [pc, #320]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0ad      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002140:	4b4c      	ldr	r3, [pc, #304]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a4b      	ldr	r2, [pc, #300]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002146:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800214c:	f7ff f8d2 	bl	80012f4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f8ce 	bl	80012f4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e09a      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002166:	4b43      	ldr	r3, [pc, #268]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002172:	4b40      	ldr	r3, [pc, #256]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	4b40      	ldr	r3, [pc, #256]	@ (8002278 <HAL_RCC_OscConfig+0x784>)
 8002178:	4013      	ands	r3, r2
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002182:	3a01      	subs	r2, #1
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	4311      	orrs	r1, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800218c:	0212      	lsls	r2, r2, #8
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002194:	0852      	lsrs	r2, r2, #1
 8002196:	3a01      	subs	r2, #1
 8002198:	0552      	lsls	r2, r2, #21
 800219a:	4311      	orrs	r1, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021a0:	0852      	lsrs	r2, r2, #1
 80021a2:	3a01      	subs	r2, #1
 80021a4:	0652      	lsls	r2, r2, #25
 80021a6:	4311      	orrs	r1, r2
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021ac:	0912      	lsrs	r2, r2, #4
 80021ae:	0452      	lsls	r2, r2, #17
 80021b0:	430a      	orrs	r2, r1
 80021b2:	4930      	ldr	r1, [pc, #192]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 80021be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 80021ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021d0:	f7ff f890 	bl	80012f4 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d8:	f7ff f88c 	bl	80012f4 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e058      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021f6:	e050      	b.n	800229a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e04f      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d148      	bne.n	800229a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002208:	4b1a      	ldr	r3, [pc, #104]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a19      	ldr	r2, [pc, #100]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002212:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002214:	4b17      	ldr	r3, [pc, #92]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a16      	ldr	r2, [pc, #88]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800221e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002220:	f7ff f868 	bl	80012f4 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff f864 	bl	80012f4 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e030      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223a:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x734>
 8002246:	e028      	b.n	800229a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b0c      	cmp	r3, #12
 800224c:	d023      	beq.n	8002296 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a08      	ldr	r2, [pc, #32]	@ (8002274 <HAL_RCC_OscConfig+0x780>)
 8002254:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff f84b 	bl	80012f4 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002260:	e00c      	b.n	800227c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff f847 	bl	80012f4 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d905      	bls.n	800227c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e013      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
 8002274:	40021000 	.word	0x40021000
 8002278:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227c:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_RCC_OscConfig+0x7b0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1ec      	bne.n	8002262 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <HAL_RCC_OscConfig+0x7b0>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	4905      	ldr	r1, [pc, #20]	@ (80022a4 <HAL_RCC_OscConfig+0x7b0>)
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_RCC_OscConfig+0x7b4>)
 8002290:	4013      	ands	r3, r2
 8002292:	60cb      	str	r3, [r1, #12]
 8002294:	e001      	b.n	800229a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3720      	adds	r7, #32
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	feeefffc 	.word	0xfeeefffc

080022ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0e7      	b.n	8002490 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c0:	4b75      	ldr	r3, [pc, #468]	@ (8002498 <HAL_RCC_ClockConfig+0x1ec>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d910      	bls.n	80022f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b72      	ldr	r3, [pc, #456]	@ (8002498 <HAL_RCC_ClockConfig+0x1ec>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4970      	ldr	r1, [pc, #448]	@ (8002498 <HAL_RCC_ClockConfig+0x1ec>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b6e      	ldr	r3, [pc, #440]	@ (8002498 <HAL_RCC_ClockConfig+0x1ec>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0cf      	b.n	8002490 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d010      	beq.n	800231e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689a      	ldr	r2, [r3, #8]
 8002300:	4b66      	ldr	r3, [pc, #408]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002308:	429a      	cmp	r2, r3
 800230a:	d908      	bls.n	800231e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800230c:	4b63      	ldr	r3, [pc, #396]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4960      	ldr	r1, [pc, #384]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d04c      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b03      	cmp	r3, #3
 8002330:	d107      	bne.n	8002342 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002332:	4b5a      	ldr	r3, [pc, #360]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d121      	bne.n	8002382 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e0a6      	b.n	8002490 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800234a:	4b54      	ldr	r3, [pc, #336]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d115      	bne.n	8002382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e09a      	b.n	8002490 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002362:	4b4e      	ldr	r3, [pc, #312]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e08e      	b.n	8002490 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002372:	4b4a      	ldr	r3, [pc, #296]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e086      	b.n	8002490 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4b46      	ldr	r3, [pc, #280]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4943      	ldr	r1, [pc, #268]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002394:	f7fe ffae 	bl	80012f4 <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe ffaa 	bl	80012f4 <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e06e      	b.n	8002490 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	4b3a      	ldr	r3, [pc, #232]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 020c 	and.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1eb      	bne.n	800239c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d010      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	4b31      	ldr	r3, [pc, #196]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023dc:	429a      	cmp	r2, r3
 80023de:	d208      	bcs.n	80023f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e0:	4b2e      	ldr	r3, [pc, #184]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	492b      	ldr	r1, [pc, #172]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f2:	4b29      	ldr	r3, [pc, #164]	@ (8002498 <HAL_RCC_ClockConfig+0x1ec>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d210      	bcs.n	8002422 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002400:	4b25      	ldr	r3, [pc, #148]	@ (8002498 <HAL_RCC_ClockConfig+0x1ec>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f023 0207 	bic.w	r2, r3, #7
 8002408:	4923      	ldr	r1, [pc, #140]	@ (8002498 <HAL_RCC_ClockConfig+0x1ec>)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	4313      	orrs	r3, r2
 800240e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002410:	4b21      	ldr	r3, [pc, #132]	@ (8002498 <HAL_RCC_ClockConfig+0x1ec>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d001      	beq.n	8002422 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e036      	b.n	8002490 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	4918      	ldr	r1, [pc, #96]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244c:	4b13      	ldr	r3, [pc, #76]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4910      	ldr	r1, [pc, #64]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002460:	f000 f824 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8002464:	4602      	mov	r2, r0
 8002466:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <HAL_RCC_ClockConfig+0x1f0>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	490b      	ldr	r1, [pc, #44]	@ (80024a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002472:	5ccb      	ldrb	r3, [r1, r3]
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	fa22 f303 	lsr.w	r3, r2, r3
 800247c:	4a09      	ldr	r2, [pc, #36]	@ (80024a4 <HAL_RCC_ClockConfig+0x1f8>)
 800247e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002480:	4b09      	ldr	r3, [pc, #36]	@ (80024a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe fee5 	bl	8001254 <HAL_InitTick>
 800248a:	4603      	mov	r3, r0
 800248c:	72fb      	strb	r3, [r7, #11]

  return status;
 800248e:	7afb      	ldrb	r3, [r7, #11]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40022000 	.word	0x40022000
 800249c:	40021000 	.word	0x40021000
 80024a0:	0800830c 	.word	0x0800830c
 80024a4:	200000fc 	.word	0x200000fc
 80024a8:	20000100 	.word	0x20000100

080024ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	@ 0x24
 80024b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ba:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c4:	4b3b      	ldr	r3, [pc, #236]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x34>
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	2b0c      	cmp	r3, #12
 80024d8:	d121      	bne.n	800251e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d11e      	bne.n	800251e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024e0:	4b34      	ldr	r3, [pc, #208]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024ec:	4b31      	ldr	r3, [pc, #196]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	f003 030f 	and.w	r3, r3, #15
 80024f8:	61fb      	str	r3, [r7, #28]
 80024fa:	e005      	b.n	8002508 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024fc:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002508:	4a2b      	ldr	r2, [pc, #172]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002510:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10d      	bne.n	8002534 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800251c:	e00a      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	2b04      	cmp	r3, #4
 8002522:	d102      	bne.n	800252a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002524:	4b25      	ldr	r3, [pc, #148]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002526:	61bb      	str	r3, [r7, #24]
 8002528:	e004      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d101      	bne.n	8002534 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002530:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002532:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	2b0c      	cmp	r3, #12
 8002538:	d134      	bne.n	80025a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800253a:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d003      	beq.n	8002552 <HAL_RCC_GetSysClockFreq+0xa6>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b03      	cmp	r3, #3
 800254e:	d003      	beq.n	8002558 <HAL_RCC_GetSysClockFreq+0xac>
 8002550:	e005      	b.n	800255e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002552:	4b1a      	ldr	r3, [pc, #104]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002554:	617b      	str	r3, [r7, #20]
      break;
 8002556:	e005      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002558:	4b19      	ldr	r3, [pc, #100]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800255a:	617b      	str	r3, [r7, #20]
      break;
 800255c:	e002      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	617b      	str	r3, [r7, #20]
      break;
 8002562:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	091b      	lsrs	r3, r3, #4
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	3301      	adds	r3, #1
 8002570:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002572:	4b10      	ldr	r3, [pc, #64]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	0a1b      	lsrs	r3, r3, #8
 8002578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	fb03 f202 	mul.w	r2, r3, r2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	fbb2 f3f3 	udiv	r3, r2, r3
 8002588:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800258a:	4b0a      	ldr	r3, [pc, #40]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	0e5b      	lsrs	r3, r3, #25
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	3301      	adds	r3, #1
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800259a:	697a      	ldr	r2, [r7, #20]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025a4:	69bb      	ldr	r3, [r7, #24]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	@ 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	08008324 	.word	0x08008324
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	007a1200 	.word	0x007a1200

080025c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	@ (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	200000fc 	.word	0x200000fc

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025e0:	f7ff fff0 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4904      	ldr	r1, [pc, #16]	@ (8002604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	0800831c 	.word	0x0800831c

08002608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800260c:	f7ff ffda 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0adb      	lsrs	r3, r3, #11
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4904      	ldr	r1, [pc, #16]	@ (8002630 <HAL_RCC_GetPCLK2Freq+0x28>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002628:	4618      	mov	r0, r3
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000
 8002630:	0800831c 	.word	0x0800831c

08002634 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800263c:	2300      	movs	r3, #0
 800263e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002640:	4b2a      	ldr	r3, [pc, #168]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800264c:	f7ff f9ee 	bl	8001a2c <HAL_PWREx_GetVoltageRange>
 8002650:	6178      	str	r0, [r7, #20]
 8002652:	e014      	b.n	800267e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002658:	4a24      	ldr	r2, [pc, #144]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800265e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002660:	4b22      	ldr	r3, [pc, #136]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800266c:	f7ff f9de 	bl	8001a2c <HAL_PWREx_GetVoltageRange>
 8002670:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	4a1d      	ldr	r2, [pc, #116]	@ (80026ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002684:	d10b      	bne.n	800269e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b80      	cmp	r3, #128	@ 0x80
 800268a:	d919      	bls.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002690:	d902      	bls.n	8002698 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002692:	2302      	movs	r3, #2
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	e013      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002698:	2301      	movs	r3, #1
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e010      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b80      	cmp	r3, #128	@ 0x80
 80026a2:	d902      	bls.n	80026aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026a4:	2303      	movs	r3, #3
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	e00a      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b80      	cmp	r3, #128	@ 0x80
 80026ae:	d102      	bne.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b0:	2302      	movs	r3, #2
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e004      	b.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b70      	cmp	r3, #112	@ 0x70
 80026ba:	d101      	bne.n	80026c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026bc:	2301      	movs	r3, #1
 80026be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c0:	4b0b      	ldr	r3, [pc, #44]	@ (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f023 0207 	bic.w	r2, r3, #7
 80026c8:	4909      	ldr	r1, [pc, #36]	@ (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d0:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0307 	and.w	r3, r3, #7
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40022000 	.word	0x40022000

080026f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026fc:	2300      	movs	r3, #0
 80026fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002700:	2300      	movs	r3, #0
 8002702:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800270c:	2b00      	cmp	r3, #0
 800270e:	d041      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002714:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002718:	d02a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800271a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800271e:	d824      	bhi.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002720:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002724:	d008      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002726:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800272a:	d81e      	bhi.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002730:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002734:	d010      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002736:	e018      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002738:	4b86      	ldr	r3, [pc, #536]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a85      	ldr	r2, [pc, #532]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002742:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002744:	e015      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3304      	adds	r3, #4
 800274a:	2100      	movs	r1, #0
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fabb 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002752:	4603      	mov	r3, r0
 8002754:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002756:	e00c      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3320      	adds	r3, #32
 800275c:	2100      	movs	r1, #0
 800275e:	4618      	mov	r0, r3
 8002760:	f000 fba6 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 8002764:	4603      	mov	r3, r0
 8002766:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002768:	e003      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	74fb      	strb	r3, [r7, #19]
      break;
 800276e:	e000      	b.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002770:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002772:	7cfb      	ldrb	r3, [r7, #19]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002778:	4b76      	ldr	r3, [pc, #472]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800277e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002786:	4973      	ldr	r1, [pc, #460]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800278e:	e001      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d041      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027a8:	d02a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027ae:	d824      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027b4:	d008      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80027b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027ba:	d81e      	bhi.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00a      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c4:	d010      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027c6:	e018      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80027c8:	4b62      	ldr	r3, [pc, #392]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	4a61      	ldr	r2, [pc, #388]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027d4:	e015      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3304      	adds	r3, #4
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f000 fa73 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 80027e2:	4603      	mov	r3, r0
 80027e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027e6:	e00c      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3320      	adds	r3, #32
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 fb5e 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027f8:	e003      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	74fb      	strb	r3, [r7, #19]
      break;
 80027fe:	e000      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002800:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d10b      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002808:	4b52      	ldr	r3, [pc, #328]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800280e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002816:	494f      	ldr	r1, [pc, #316]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002818:	4313      	orrs	r3, r2
 800281a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800281e:	e001      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002820:	7cfb      	ldrb	r3, [r7, #19]
 8002822:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a0 	beq.w	8002972 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002836:	4b47      	ldr	r3, [pc, #284]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800284c:	4b41      	ldr	r3, [pc, #260]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002850:	4a40      	ldr	r2, [pc, #256]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002856:	6593      	str	r3, [r2, #88]	@ 0x58
 8002858:	4b3e      	ldr	r3, [pc, #248]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800285c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002864:	2301      	movs	r3, #1
 8002866:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002868:	4b3b      	ldr	r3, [pc, #236]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a3a      	ldr	r2, [pc, #232]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002872:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002874:	f7fe fd3e 	bl	80012f4 <HAL_GetTick>
 8002878:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800287a:	e009      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287c:	f7fe fd3a 	bl	80012f4 <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	2b02      	cmp	r3, #2
 8002888:	d902      	bls.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	74fb      	strb	r3, [r7, #19]
        break;
 800288e:	e005      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002890:	4b31      	ldr	r3, [pc, #196]	@ (8002958 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0ef      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d15c      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01f      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d019      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028c0:	4b24      	ldr	r3, [pc, #144]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028cc:	4b21      	ldr	r3, [pc, #132]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028d2:	4a20      	ldr	r2, [pc, #128]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ec:	4a19      	ldr	r2, [pc, #100]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d016      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fe:	f7fe fcf9 	bl	80012f4 <HAL_GetTick>
 8002902:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002904:	e00b      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002906:	f7fe fcf5 	bl	80012f4 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002914:	4293      	cmp	r3, r2
 8002916:	d902      	bls.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	74fb      	strb	r3, [r7, #19]
            break;
 800291c:	e006      	b.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0ec      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800292c:	7cfb      	ldrb	r3, [r7, #19]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d10c      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002932:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002938:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002942:	4904      	ldr	r1, [pc, #16]	@ (8002954 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800294a:	e009      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
 8002950:	e006      	b.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000
 8002958:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800295c:	7cfb      	ldrb	r3, [r7, #19]
 800295e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002960:	7c7b      	ldrb	r3, [r7, #17]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b9e      	ldr	r3, [pc, #632]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296a:	4a9d      	ldr	r2, [pc, #628]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002970:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00a      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800297e:	4b98      	ldr	r3, [pc, #608]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002984:	f023 0203 	bic.w	r2, r3, #3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298c:	4994      	ldr	r1, [pc, #592]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029a0:	4b8f      	ldr	r3, [pc, #572]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a6:	f023 020c 	bic.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	498c      	ldr	r1, [pc, #560]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029c2:	4b87      	ldr	r3, [pc, #540]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	4983      	ldr	r1, [pc, #524]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029e4:	4b7e      	ldr	r3, [pc, #504]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	497b      	ldr	r1, [pc, #492]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a06:	4b76      	ldr	r3, [pc, #472]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a14:	4972      	ldr	r1, [pc, #456]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0320 	and.w	r3, r3, #32
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00a      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a28:	4b6d      	ldr	r3, [pc, #436]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a36:	496a      	ldr	r1, [pc, #424]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a4a:	4b65      	ldr	r3, [pc, #404]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a50:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a58:	4961      	ldr	r1, [pc, #388]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a6c:	4b5c      	ldr	r3, [pc, #368]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a7a:	4959      	ldr	r1, [pc, #356]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8e:	4b54      	ldr	r3, [pc, #336]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a94:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9c:	4950      	ldr	r1, [pc, #320]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002abe:	4948      	ldr	r1, [pc, #288]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad2:	4b43      	ldr	r3, [pc, #268]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ad8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae0:	493f      	ldr	r1, [pc, #252]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d028      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002af4:	4b3a      	ldr	r3, [pc, #232]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002afa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b02:	4937      	ldr	r1, [pc, #220]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b12:	d106      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b14:	4b32      	ldr	r3, [pc, #200]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	4a31      	ldr	r2, [pc, #196]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b1e:	60d3      	str	r3, [r2, #12]
 8002b20:	e011      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b2a:	d10c      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	2101      	movs	r1, #1
 8002b32:	4618      	mov	r0, r3
 8002b34:	f000 f8c8 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b52:	4b23      	ldr	r3, [pc, #140]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b58:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	491f      	ldr	r1, [pc, #124]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b70:	d106      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b72:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	4a1a      	ldr	r2, [pc, #104]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b7c:	60d3      	str	r3, [r2, #12]
 8002b7e:	e011      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b84:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	2101      	movs	r1, #1
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f899 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02b      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	4908      	ldr	r1, [pc, #32]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bce:	d109      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bd0:	4b03      	ldr	r3, [pc, #12]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a02      	ldr	r2, [pc, #8]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bda:	60d3      	str	r3, [r2, #12]
 8002bdc:	e014      	b.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bec:	d10c      	bne.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 f867 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02f      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c14:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c22:	4928      	ldr	r1, [pc, #160]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c32:	d10d      	bne.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	2102      	movs	r1, #2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f844 	bl	8002cc8 <RCCEx_PLLSAI1_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d014      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c4a:	7cfb      	ldrb	r3, [r7, #19]
 8002c4c:	74bb      	strb	r3, [r7, #18]
 8002c4e:	e011      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3320      	adds	r3, #32
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 f925 	bl	8002eb0 <RCCEx_PLLSAI2_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c6a:	7cfb      	ldrb	r3, [r7, #19]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c80:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c86:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c8e:	490d      	ldr	r1, [pc, #52]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ca2:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cb2:	4904      	ldr	r1, [pc, #16]	@ (8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002cba:	7cbb      	ldrb	r3, [r7, #18]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40021000 	.word	0x40021000

08002cc8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002cd6:	4b75      	ldr	r3, [pc, #468]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f003 0303 	and.w	r3, r3, #3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ce2:	4b72      	ldr	r3, [pc, #456]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f003 0203 	and.w	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d10d      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d009      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	685b      	ldr	r3, [r3, #4]
       ||
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d047      	beq.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e044      	b.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d018      	beq.n	8002d4e <RCCEx_PLLSAI1_Config+0x86>
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d825      	bhi.n	8002d6c <RCCEx_PLLSAI1_Config+0xa4>
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d002      	beq.n	8002d2a <RCCEx_PLLSAI1_Config+0x62>
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d009      	beq.n	8002d3c <RCCEx_PLLSAI1_Config+0x74>
 8002d28:	e020      	b.n	8002d6c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d2a:	4b60      	ldr	r3, [pc, #384]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d11d      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3a:	e01a      	b.n	8002d72 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d116      	bne.n	8002d76 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4c:	e013      	b.n	8002d76 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d4e:	4b57      	ldr	r3, [pc, #348]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d10f      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d5a:	4b54      	ldr	r3, [pc, #336]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d6a:	e006      	b.n	8002d7a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d70:	e004      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d72:	bf00      	nop
 8002d74:	e002      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d76:	bf00      	nop
 8002d78:	e000      	b.n	8002d7c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d7a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d82:	4b4a      	ldr	r3, [pc, #296]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6819      	ldr	r1, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	011b      	lsls	r3, r3, #4
 8002d96:	430b      	orrs	r3, r1
 8002d98:	4944      	ldr	r1, [pc, #272]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d17d      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002da4:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a40      	ldr	r2, [pc, #256]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002dae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7fe faa0 	bl	80012f4 <HAL_GetTick>
 8002db4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002db6:	e009      	b.n	8002dcc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002db8:	f7fe fa9c 	bl	80012f4 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dca:	e005      	b.n	8002dd8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002dcc:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ef      	bne.n	8002db8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d160      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d111      	bne.n	8002e08 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002de4:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002dec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	0211      	lsls	r1, r2, #8
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68d2      	ldr	r2, [r2, #12]
 8002dfa:	0912      	lsrs	r2, r2, #4
 8002dfc:	0452      	lsls	r2, r2, #17
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	492a      	ldr	r1, [pc, #168]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	610b      	str	r3, [r1, #16]
 8002e06:	e027      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d112      	bne.n	8002e34 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e0e:	4b27      	ldr	r3, [pc, #156]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e16:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	0211      	lsls	r1, r2, #8
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6912      	ldr	r2, [r2, #16]
 8002e24:	0852      	lsrs	r2, r2, #1
 8002e26:	3a01      	subs	r2, #1
 8002e28:	0552      	lsls	r2, r2, #21
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	491f      	ldr	r1, [pc, #124]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	610b      	str	r3, [r1, #16]
 8002e32:	e011      	b.n	8002e58 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e34:	4b1d      	ldr	r3, [pc, #116]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e36:	691b      	ldr	r3, [r3, #16]
 8002e38:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e3c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	6892      	ldr	r2, [r2, #8]
 8002e44:	0211      	lsls	r1, r2, #8
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6952      	ldr	r2, [r2, #20]
 8002e4a:	0852      	lsrs	r2, r2, #1
 8002e4c:	3a01      	subs	r2, #1
 8002e4e:	0652      	lsls	r2, r2, #25
 8002e50:	430a      	orrs	r2, r1
 8002e52:	4916      	ldr	r1, [pc, #88]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e58:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a13      	ldr	r2, [pc, #76]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e62:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e64:	f7fe fa46 	bl	80012f4 <HAL_GetTick>
 8002e68:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e6a:	e009      	b.n	8002e80 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e6c:	f7fe fa42 	bl	80012f4 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d902      	bls.n	8002e80 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e7e:	e005      	b.n	8002e8c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e80:	4b0a      	ldr	r3, [pc, #40]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ef      	beq.n	8002e6c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d106      	bne.n	8002ea0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e92:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	4904      	ldr	r1, [pc, #16]	@ (8002eac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000

08002eb0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d018      	beq.n	8002efc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002eca:	4b67      	ldr	r3, [pc, #412]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	f003 0203 	and.w	r2, r3, #3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d10d      	bne.n	8002ef6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
       ||
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d009      	beq.n	8002ef6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ee2:	4b61      	ldr	r3, [pc, #388]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 0307 	and.w	r3, r3, #7
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d047      	beq.n	8002f86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
 8002efa:	e044      	b.n	8002f86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d018      	beq.n	8002f36 <RCCEx_PLLSAI2_Config+0x86>
 8002f04:	2b03      	cmp	r3, #3
 8002f06:	d825      	bhi.n	8002f54 <RCCEx_PLLSAI2_Config+0xa4>
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d002      	beq.n	8002f12 <RCCEx_PLLSAI2_Config+0x62>
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d009      	beq.n	8002f24 <RCCEx_PLLSAI2_Config+0x74>
 8002f10:	e020      	b.n	8002f54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f12:	4b55      	ldr	r3, [pc, #340]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11d      	bne.n	8002f5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f22:	e01a      	b.n	8002f5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f24:	4b50      	ldr	r3, [pc, #320]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d116      	bne.n	8002f5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f34:	e013      	b.n	8002f5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f36:	4b4c      	ldr	r3, [pc, #304]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10f      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f42:	4b49      	ldr	r3, [pc, #292]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d109      	bne.n	8002f62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f52:	e006      	b.n	8002f62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]
      break;
 8002f58:	e004      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f5a:	bf00      	nop
 8002f5c:	e002      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f5e:	bf00      	nop
 8002f60:	e000      	b.n	8002f64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6819      	ldr	r1, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	430b      	orrs	r3, r1
 8002f80:	4939      	ldr	r1, [pc, #228]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d167      	bne.n	800305c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f8c:	4b36      	ldr	r3, [pc, #216]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a35      	ldr	r2, [pc, #212]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f98:	f7fe f9ac 	bl	80012f4 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f9e:	e009      	b.n	8002fb4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fa0:	f7fe f9a8 	bl	80012f4 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d902      	bls.n	8002fb4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	73fb      	strb	r3, [r7, #15]
        break;
 8002fb2:	e005      	b.n	8002fc0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ef      	bne.n	8002fa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002fc0:	7bfb      	ldrb	r3, [r7, #15]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d14a      	bne.n	800305c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d111      	bne.n	8002ff0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002fcc:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6892      	ldr	r2, [r2, #8]
 8002fdc:	0211      	lsls	r1, r2, #8
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	68d2      	ldr	r2, [r2, #12]
 8002fe2:	0912      	lsrs	r2, r2, #4
 8002fe4:	0452      	lsls	r2, r2, #17
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	491f      	ldr	r1, [pc, #124]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	614b      	str	r3, [r1, #20]
 8002fee:	e011      	b.n	8003014 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ff8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6892      	ldr	r2, [r2, #8]
 8003000:	0211      	lsls	r1, r2, #8
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	6912      	ldr	r2, [r2, #16]
 8003006:	0852      	lsrs	r2, r2, #1
 8003008:	3a01      	subs	r2, #1
 800300a:	0652      	lsls	r2, r2, #25
 800300c:	430a      	orrs	r2, r1
 800300e:	4916      	ldr	r1, [pc, #88]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	4313      	orrs	r3, r2
 8003012:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003014:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a13      	ldr	r2, [pc, #76]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800301e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fe f968 	bl	80012f4 <HAL_GetTick>
 8003024:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003026:	e009      	b.n	800303c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003028:	f7fe f964 	bl	80012f4 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d902      	bls.n	800303c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	73fb      	strb	r3, [r7, #15]
          break;
 800303a:	e005      	b.n	8003048 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800303c:	4b0a      	ldr	r3, [pc, #40]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ef      	beq.n	8003028 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003048:	7bfb      	ldrb	r3, [r7, #15]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	695a      	ldr	r2, [r3, #20]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	4904      	ldr	r1, [pc, #16]	@ (8003068 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000

0800306c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d101      	bne.n	800307e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e095      	b.n	80031aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003082:	2b00      	cmp	r3, #0
 8003084:	d108      	bne.n	8003098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800308e:	d009      	beq.n	80030a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	61da      	str	r2, [r3, #28]
 8003096:	e005      	b.n	80030a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7fd fe3a 	bl	8000d38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80030e4:	d902      	bls.n	80030ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	e002      	b.n	80030f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80030fa:	d007      	beq.n	800310c <HAL_SPI_Init+0xa0>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003104:	d002      	beq.n	800310c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800311c:	431a      	orrs	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	699b      	ldr	r3, [r3, #24]
 8003136:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800313a:	431a      	orrs	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314e:	ea42 0103 	orr.w	r1, r2, r3
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003156:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	0c1b      	lsrs	r3, r3, #16
 8003168:	f003 0204 	and.w	r2, r3, #4
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003188:	ea42 0103 	orr.w	r1, r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b085      	sub	sp, #20
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	4613      	mov	r3, r2
 80031c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_SPI_Transmit_IT+0x1a>
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_SPI_Transmit_IT+0x1e>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06d      	b.n	80032ae <HAL_SPI_Transmit_IT+0xfa>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d001      	beq.n	80031e2 <HAL_SPI_Transmit_IT+0x2e>
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
 80031e0:	e065      	b.n	80032ae <HAL_SPI_Transmit_IT+0xfa>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d101      	bne.n	80031f0 <HAL_SPI_Transmit_IT+0x3c>
 80031ec:	2302      	movs	r3, #2
 80031ee:	e05e      	b.n	80032ae <HAL_SPI_Transmit_IT+0xfa>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2203      	movs	r2, #3
 80031fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	88fa      	ldrh	r2, [r7, #6]
 8003210:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxISR       = NULL;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800323c:	d903      	bls.n	8003246 <HAL_SPI_Transmit_IT+0x92>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4a1e      	ldr	r2, [pc, #120]	@ (80032bc <HAL_SPI_Transmit_IT+0x108>)
 8003242:	651a      	str	r2, [r3, #80]	@ 0x50
 8003244:	e002      	b.n	800324c <HAL_SPI_Transmit_IT+0x98>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4a1d      	ldr	r2, [pc, #116]	@ (80032c0 <HAL_SPI_Transmit_IT+0x10c>)
 800324a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003254:	d10f      	bne.n	8003276 <HAL_SPI_Transmit_IT+0xc2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003274:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003280:	2b40      	cmp	r3, #64	@ 0x40
 8003282:	d007      	beq.n	8003294 <HAL_SPI_Transmit_IT+0xe0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003292:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 80032aa:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	08003531 	.word	0x08003531
 80032c0:	080034eb 	.word	0x080034eb

080032c4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10e      	bne.n	8003304 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d009      	beq.n	8003304 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	4798      	blx	r3
    return;
 8003302:	e0ce      	b.n	80034a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <HAL_SPI_IRQHandler+0x5e>
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	4798      	blx	r3
    return;
 8003320:	e0bf      	b.n	80034a2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <HAL_SPI_IRQHandler+0x7e>
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	d105      	bne.n	8003342 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80b0 	beq.w	80034a2 <HAL_SPI_IRQHandler+0x1de>
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 80aa 	beq.w	80034a2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d023      	beq.n	80033a0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b03      	cmp	r3, #3
 8003362:	d011      	beq.n	8003388 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003368:	f043 0204 	orr.w	r2, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	e00b      	b.n	80033a0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]
        return;
 800339e:	e080      	b.n	80034a2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d014      	beq.n	80033d4 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033ae:	f043 0201 	orr.w	r2, r3, #1
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80033d4:	69bb      	ldr	r3, [r7, #24]
 80033d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033e2:	f043 0208 	orr.w	r2, r3, #8
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d04f      	beq.n	80034a0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800340e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <HAL_SPI_IRQHandler+0x168>
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d034      	beq.n	8003496 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0203 	bic.w	r2, r2, #3
 800343a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	2b00      	cmp	r3, #0
 8003442:	d011      	beq.n	8003468 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003448:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <HAL_SPI_IRQHandler+0x1e4>)
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe f8ce 	bl	80015f2 <HAL_DMA_Abort_IT>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346c:	2b00      	cmp	r3, #0
 800346e:	d016      	beq.n	800349e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003474:	4a0c      	ldr	r2, [pc, #48]	@ (80034a8 <HAL_SPI_IRQHandler+0x1e4>)
 8003476:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800347c:	4618      	mov	r0, r3
 800347e:	f7fe f8b8 	bl	80015f2 <HAL_DMA_Abort_IT>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800348c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8003494:	e003      	b.n	800349e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f808 	bl	80034ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800349c:	e000      	b.n	80034a0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800349e:	bf00      	nop
    return;
 80034a0:	bf00      	nop
  }
}
 80034a2:	3720      	adds	r7, #32
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	080034c1 	.word	0x080034c1

080034ac <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f7ff ffe5 	bl	80034ac <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	330c      	adds	r3, #12
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	1c5a      	adds	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800350e:	b29b      	uxth	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	b29a      	uxth	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800351c:	b29b      	uxth	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f98a 	bl	800383c <SPI_CloseTx_ISR>
  }
}
 8003528:	bf00      	nop
 800352a:	3708      	adds	r7, #8
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	881a      	ldrh	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003548:	1c9a      	adds	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount--;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003552:	b29b      	uxth	r3, r3
 8003554:	3b01      	subs	r3, #1
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  if (hspi->TxXferCount == 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003560:	b29b      	uxth	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f968 	bl	800383c <SPI_CloseTx_ISR>
  }
}
 800356c:	bf00      	nop
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	4613      	mov	r3, r2
 8003582:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003584:	f7fd feb6 	bl	80012f4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	4413      	add	r3, r2
 8003592:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003594:	f7fd feae 	bl	80012f4 <HAL_GetTick>
 8003598:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800359a:	4b39      	ldr	r3, [pc, #228]	@ (8003680 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	015b      	lsls	r3, r3, #5
 80035a0:	0d1b      	lsrs	r3, r3, #20
 80035a2:	69fa      	ldr	r2, [r7, #28]
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035aa:	e054      	b.n	8003656 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035b2:	d050      	beq.n	8003656 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035b4:	f7fd fe9e 	bl	80012f4 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d902      	bls.n	80035ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d13d      	bne.n	8003646 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80035d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035e2:	d111      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0x94>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035ec:	d004      	beq.n	80035f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f6:	d107      	bne.n	8003608 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003606:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003610:	d10f      	bne.n	8003632 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003630:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e017      	b.n	8003676 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	3b01      	subs	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	4013      	ands	r3, r2
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	bf0c      	ite	eq
 8003666:	2301      	moveq	r3, #1
 8003668:	2300      	movne	r3, #0
 800366a:	b2db      	uxtb	r3, r3
 800366c:	461a      	mov	r2, r3
 800366e:	79fb      	ldrb	r3, [r7, #7]
 8003670:	429a      	cmp	r2, r3
 8003672:	d19b      	bne.n	80035ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3720      	adds	r7, #32
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200000fc 	.word	0x200000fc

08003684 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003692:	2300      	movs	r3, #0
 8003694:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003696:	f7fd fe2d 	bl	80012f4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	4413      	add	r3, r2
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80036a6:	f7fd fe25 	bl	80012f4 <HAL_GetTick>
 80036aa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80036b4:	4b3d      	ldr	r3, [pc, #244]	@ (80037ac <SPI_WaitFifoStateUntilTimeout+0x128>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	00da      	lsls	r2, r3, #3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	0d1b      	lsrs	r3, r3, #20
 80036c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80036cc:	e060      	b.n	8003790 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80036d4:	d107      	bne.n	80036e6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d104      	bne.n	80036e6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ec:	d050      	beq.n	8003790 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80036ee:	f7fd fe01 	bl	80012f4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d902      	bls.n	8003704 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	d13d      	bne.n	8003780 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003712:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800371c:	d111      	bne.n	8003742 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003726:	d004      	beq.n	8003732 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003730:	d107      	bne.n	8003742 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003740:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374a:	d10f      	bne.n	800376c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800376a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e010      	b.n	80037a2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3b01      	subs	r3, #1
 800378e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4013      	ands	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	429a      	cmp	r2, r3
 800379e:	d196      	bne.n	80036ce <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3728      	adds	r7, #40	@ 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200000fc 	.word	0x200000fc

080037b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f7ff ff5b 	bl	8003684 <SPI_WaitFifoStateUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037d8:	f043 0220 	orr.w	r2, r3, #32
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e027      	b.n	8003834 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	2200      	movs	r2, #0
 80037ec:	2180      	movs	r1, #128	@ 0x80
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f7ff fec0 	bl	8003574 <SPI_WaitFlagStateUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037fe:	f043 0220 	orr.w	r2, r3, #32
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e014      	b.n	8003834 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f7ff ff34 	bl	8003684 <SPI_WaitFifoStateUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003826:	f043 0220 	orr.w	r2, r3, #32
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800382e:	2303      	movs	r3, #3
 8003830:	e000      	b.n	8003834 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003844:	f7fd fd56 	bl	80012f4 <HAL_GetTick>
 8003848:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003858:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	2164      	movs	r1, #100	@ 0x64
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff ffa6 	bl	80037b0 <SPI_EndRxTxTransaction>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800386e:	f043 0220 	orr.w	r2, r3, #32
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10a      	bne.n	8003894 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	60bb      	str	r3, [r7, #8]
 8003892:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fe01 	bl	80034ac <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80038aa:	e002      	b.n	80038b2 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7fc ff03 	bl	80006b8 <HAL_SPI_TxCpltCallback>
}
 80038b2:	bf00      	nop
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e040      	b.n	800394e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d106      	bne.n	80038e2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7fd fc0b 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2224      	movs	r2, #36	@ 0x24
 80038e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fedb 	bl	80046bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fc20 	bl	800414c <UART_SetConfig>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d101      	bne.n	8003916 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e01b      	b.n	800394e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003924:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003934:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 ff5a 	bl	8004800 <UART_CheckIdleState>
 800394c:	4603      	mov	r3, r0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b08a      	sub	sp, #40	@ 0x28
 800395a:	af02      	add	r7, sp, #8
 800395c:	60f8      	str	r0, [r7, #12]
 800395e:	60b9      	str	r1, [r7, #8]
 8003960:	603b      	str	r3, [r7, #0]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800396a:	2b20      	cmp	r3, #32
 800396c:	d177      	bne.n	8003a5e <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_UART_Transmit+0x24>
 8003974:	88fb      	ldrh	r3, [r7, #6]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e070      	b.n	8003a60 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2221      	movs	r2, #33	@ 0x21
 800398a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800398c:	f7fd fcb2 	bl	80012f4 <HAL_GetTick>
 8003990:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	88fa      	ldrh	r2, [r7, #6]
 8003996:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	88fa      	ldrh	r2, [r7, #6]
 800399e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039aa:	d108      	bne.n	80039be <HAL_UART_Transmit+0x68>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d104      	bne.n	80039be <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	61bb      	str	r3, [r7, #24]
 80039bc:	e003      	b.n	80039c6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c6:	e02f      	b.n	8003a28 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	2200      	movs	r2, #0
 80039d0:	2180      	movs	r1, #128	@ 0x80
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	f000 ffbc 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d004      	beq.n	80039e8 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e03b      	b.n	8003a60 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10b      	bne.n	8003a06 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	881a      	ldrh	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039fa:	b292      	uxth	r2, r2
 80039fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	3302      	adds	r3, #2
 8003a02:	61bb      	str	r3, [r7, #24]
 8003a04:	e007      	b.n	8003a16 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	781a      	ldrb	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	3301      	adds	r3, #1
 8003a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1c9      	bne.n	80039c8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2140      	movs	r1, #64	@ 0x40
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 ff86 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d004      	beq.n	8003a54 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e005      	b.n	8003a60 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a5e:	2302      	movs	r3, #2
  }
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b08a      	sub	sp, #40	@ 0x28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	4613      	mov	r3, r2
 8003a74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d137      	bne.n	8003af0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <HAL_UART_Receive_IT+0x24>
 8003a86:	88fb      	ldrh	r3, [r7, #6]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d101      	bne.n	8003a90 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e030      	b.n	8003af2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a18      	ldr	r2, [pc, #96]	@ (8003afc <HAL_UART_Receive_IT+0x94>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01f      	beq.n	8003ae0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d018      	beq.n	8003ae0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	e853 3f00 	ldrex	r3, [r3]
 8003aba:	613b      	str	r3, [r7, #16]
   return(result);
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003acc:	623b      	str	r3, [r7, #32]
 8003ace:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad0:	69f9      	ldr	r1, [r7, #28]
 8003ad2:	6a3a      	ldr	r2, [r7, #32]
 8003ad4:	e841 2300 	strex	r3, r2, [r1]
 8003ad8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1e6      	bne.n	8003aae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ae0:	88fb      	ldrh	r3, [r7, #6]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68b9      	ldr	r1, [r7, #8]
 8003ae6:	68f8      	ldr	r0, [r7, #12]
 8003ae8:	f000 ffa0 	bl	8004a2c <UART_Start_Receive_IT>
 8003aec:	4603      	mov	r3, r0
 8003aee:	e000      	b.n	8003af2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3728      	adds	r7, #40	@ 0x28
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40008000 	.word	0x40008000

08003b00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b0ba      	sub	sp, #232	@ 0xe8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b26:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003b2a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003b2e:	4013      	ands	r3, r2
 8003b30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d115      	bne.n	8003b68 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00f      	beq.n	8003b68 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d009      	beq.n	8003b68 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f000 82ca 	beq.w	80040f2 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
      }
      return;
 8003b66:	e2c4      	b.n	80040f2 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003b68:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8117 	beq.w	8003da0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b7e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b82:	4b85      	ldr	r3, [pc, #532]	@ (8003d98 <HAL_UART_IRQHandler+0x298>)
 8003b84:	4013      	ands	r3, r2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 810a 	beq.w	8003da0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d011      	beq.n	8003bbc <HAL_UART_IRQHandler+0xbc>
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d011      	beq.n	8003bec <HAL_UART_IRQHandler+0xec>
 8003bc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00b      	beq.n	8003bec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2202      	movs	r2, #2
 8003bda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003be2:	f043 0204 	orr.w	r2, r3, #4
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf0:	f003 0304 	and.w	r3, r3, #4
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d011      	beq.n	8003c1c <HAL_UART_IRQHandler+0x11c>
 8003bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00b      	beq.n	8003c1c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c12:	f043 0202 	orr.w	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d017      	beq.n	8003c58 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d105      	bne.n	8003c40 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003c34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2208      	movs	r2, #8
 8003c46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c4e:	f043 0208 	orr.w	r2, r3, #8
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d012      	beq.n	8003c8a <HAL_UART_IRQHandler+0x18a>
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c68:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00c      	beq.n	8003c8a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c80:	f043 0220 	orr.w	r2, r3, #32
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 8230 	beq.w	80040f6 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd2:	2b40      	cmp	r3, #64	@ 0x40
 8003cd4:	d005      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003cd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cda:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d04f      	beq.n	8003d82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 ff68 	bl	8004bb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf2:	2b40      	cmp	r3, #64	@ 0x40
 8003cf4:	d141      	bne.n	8003d7a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	3308      	adds	r3, #8
 8003cfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d32:	e841 2300 	strex	r3, r2, [r1]
 8003d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1d9      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d013      	beq.n	8003d72 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d4e:	4a13      	ldr	r2, [pc, #76]	@ (8003d9c <HAL_UART_IRQHandler+0x29c>)
 8003d50:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd fc4b 	bl	80015f2 <HAL_DMA_Abort_IT>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d017      	beq.n	8003d92 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d70:	e00f      	b.n	8003d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f9d4 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d78:	e00b      	b.n	8003d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9d0 	bl	8004120 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d80:	e007      	b.n	8003d92 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9cc 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003d90:	e1b1      	b.n	80040f6 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d92:	bf00      	nop
    return;
 8003d94:	e1af      	b.n	80040f6 <HAL_UART_IRQHandler+0x5f6>
 8003d96:	bf00      	nop
 8003d98:	04000120 	.word	0x04000120
 8003d9c:	08004c81 	.word	0x08004c81

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 816a 	bne.w	800407e <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f000 8163 	beq.w	800407e <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dbc:	f003 0310 	and.w	r3, r3, #16
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 815c 	beq.w	800407e <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2210      	movs	r2, #16
 8003dcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dd8:	2b40      	cmp	r3, #64	@ 0x40
 8003dda:	f040 80d4 	bne.w	8003f86 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003dea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80ad 	beq.w	8003f4e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	f080 80a5 	bcs.w	8003f4e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e0a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0320 	and.w	r3, r3, #32
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f040 8086 	bne.w	8003f2c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e2c:	e853 3f00 	ldrex	r3, [r3]
 8003e30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e5a:	e841 2300 	strex	r3, r2, [r1]
 8003e5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1da      	bne.n	8003e20 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3308      	adds	r3, #8
 8003e70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e9a:	e841 2300 	strex	r3, r2, [r1]
 8003e9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ea0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1e1      	bne.n	8003e6a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	3308      	adds	r3, #8
 8003eac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003eb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3308      	adds	r3, #8
 8003ec6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003eca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ecc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ed0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ed8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e3      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef4:	e853 3f00 	ldrex	r3, [r3]
 8003ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003efc:	f023 0310 	bic.w	r3, r3, #16
 8003f00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003f10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e4      	bne.n	8003eec <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fd fb25 	bl	8001576 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f8f4 	bl	8004134 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003f4c:	e0d5      	b.n	80040fa <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	f040 80ce 	bne.w	80040fa <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b20      	cmp	r3, #32
 8003f6c:	f040 80c5 	bne.w	80040fa <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f8d8 	bl	8004134 <HAL_UARTEx_RxEventCallback>
      return;
 8003f84:	e0b9      	b.n	80040fa <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80ab 	beq.w	80040fe <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8003fa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	f000 80a6 	beq.w	80040fe <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e4      	bne.n	8003fb2 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3308      	adds	r3, #8
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	623b      	str	r3, [r7, #32]
   return(result);
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	3308      	adds	r3, #8
 8004008:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800400c:	633a      	str	r2, [r7, #48]	@ 0x30
 800400e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800401a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e3      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	e853 3f00 	ldrex	r3, [r3]
 8004040:	60fb      	str	r3, [r7, #12]
   return(result);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f023 0310 	bic.w	r3, r3, #16
 8004048:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004056:	61fb      	str	r3, [r7, #28]
 8004058:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	69b9      	ldr	r1, [r7, #24]
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	617b      	str	r3, [r7, #20]
   return(result);
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e4      	bne.n	8004034 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2202      	movs	r2, #2
 800406e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004070:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004074:	4619      	mov	r1, r3
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 f85c 	bl	8004134 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800407c:	e03f      	b.n	80040fe <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800407e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00e      	beq.n	80040a8 <HAL_UART_IRQHandler+0x5a8>
 800408a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800408e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d008      	beq.n	80040a8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800409e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 ffe9 	bl	8005078 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80040a6:	e02d      	b.n	8004104 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80040a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00e      	beq.n	80040d2 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80040b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01c      	beq.n	8004102 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4798      	blx	r3
    }
    return;
 80040d0:	e017      	b.n	8004102 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d012      	beq.n	8004104 <HAL_UART_IRQHandler+0x604>
 80040de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00c      	beq.n	8004104 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fdde 	bl	8004cac <UART_EndTransmit_IT>
    return;
 80040f0:	e008      	b.n	8004104 <HAL_UART_IRQHandler+0x604>
      return;
 80040f2:	bf00      	nop
 80040f4:	e006      	b.n	8004104 <HAL_UART_IRQHandler+0x604>
    return;
 80040f6:	bf00      	nop
 80040f8:	e004      	b.n	8004104 <HAL_UART_IRQHandler+0x604>
      return;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_UART_IRQHandler+0x604>
      return;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_UART_IRQHandler+0x604>
    return;
 8004102:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004104:	37e8      	adds	r7, #232	@ 0xe8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop

0800410c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004150:	b08a      	sub	sp, #40	@ 0x28
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	431a      	orrs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4ba4      	ldr	r3, [pc, #656]	@ (800440c <UART_SetConfig+0x2c0>)
 800417c:	4013      	ands	r3, r2
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004184:	430b      	orrs	r3, r1
 8004186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a99      	ldr	r2, [pc, #612]	@ (8004410 <UART_SetConfig+0x2c4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041b4:	4313      	orrs	r3, r2
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a90      	ldr	r2, [pc, #576]	@ (8004414 <UART_SetConfig+0x2c8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d126      	bne.n	8004224 <UART_SetConfig+0xd8>
 80041d6:	4b90      	ldr	r3, [pc, #576]	@ (8004418 <UART_SetConfig+0x2cc>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d81b      	bhi.n	800421c <UART_SetConfig+0xd0>
 80041e4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ec <UART_SetConfig+0xa0>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	0800420d 	.word	0x0800420d
 80041f4:	08004205 	.word	0x08004205
 80041f8:	08004215 	.word	0x08004215
 80041fc:	2301      	movs	r3, #1
 80041fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004202:	e116      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004204:	2302      	movs	r3, #2
 8004206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800420a:	e112      	b.n	8004432 <UART_SetConfig+0x2e6>
 800420c:	2304      	movs	r3, #4
 800420e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004212:	e10e      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004214:	2308      	movs	r3, #8
 8004216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421a:	e10a      	b.n	8004432 <UART_SetConfig+0x2e6>
 800421c:	2310      	movs	r3, #16
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004222:	e106      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a7c      	ldr	r2, [pc, #496]	@ (800441c <UART_SetConfig+0x2d0>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d138      	bne.n	80042a0 <UART_SetConfig+0x154>
 800422e:	4b7a      	ldr	r3, [pc, #488]	@ (8004418 <UART_SetConfig+0x2cc>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004234:	f003 030c 	and.w	r3, r3, #12
 8004238:	2b0c      	cmp	r3, #12
 800423a:	d82d      	bhi.n	8004298 <UART_SetConfig+0x14c>
 800423c:	a201      	add	r2, pc, #4	@ (adr r2, 8004244 <UART_SetConfig+0xf8>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004279 	.word	0x08004279
 8004248:	08004299 	.word	0x08004299
 800424c:	08004299 	.word	0x08004299
 8004250:	08004299 	.word	0x08004299
 8004254:	08004289 	.word	0x08004289
 8004258:	08004299 	.word	0x08004299
 800425c:	08004299 	.word	0x08004299
 8004260:	08004299 	.word	0x08004299
 8004264:	08004281 	.word	0x08004281
 8004268:	08004299 	.word	0x08004299
 800426c:	08004299 	.word	0x08004299
 8004270:	08004299 	.word	0x08004299
 8004274:	08004291 	.word	0x08004291
 8004278:	2300      	movs	r3, #0
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800427e:	e0d8      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004280:	2302      	movs	r3, #2
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004286:	e0d4      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004288:	2304      	movs	r3, #4
 800428a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800428e:	e0d0      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004290:	2308      	movs	r3, #8
 8004292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004296:	e0cc      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004298:	2310      	movs	r3, #16
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429e:	e0c8      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004420 <UART_SetConfig+0x2d4>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d125      	bne.n	80042f6 <UART_SetConfig+0x1aa>
 80042aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004418 <UART_SetConfig+0x2cc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042b4:	2b30      	cmp	r3, #48	@ 0x30
 80042b6:	d016      	beq.n	80042e6 <UART_SetConfig+0x19a>
 80042b8:	2b30      	cmp	r3, #48	@ 0x30
 80042ba:	d818      	bhi.n	80042ee <UART_SetConfig+0x1a2>
 80042bc:	2b20      	cmp	r3, #32
 80042be:	d00a      	beq.n	80042d6 <UART_SetConfig+0x18a>
 80042c0:	2b20      	cmp	r3, #32
 80042c2:	d814      	bhi.n	80042ee <UART_SetConfig+0x1a2>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <UART_SetConfig+0x182>
 80042c8:	2b10      	cmp	r3, #16
 80042ca:	d008      	beq.n	80042de <UART_SetConfig+0x192>
 80042cc:	e00f      	b.n	80042ee <UART_SetConfig+0x1a2>
 80042ce:	2300      	movs	r3, #0
 80042d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d4:	e0ad      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042d6:	2302      	movs	r3, #2
 80042d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042dc:	e0a9      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042de:	2304      	movs	r3, #4
 80042e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e4:	e0a5      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042e6:	2308      	movs	r3, #8
 80042e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ec:	e0a1      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042ee:	2310      	movs	r3, #16
 80042f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f4:	e09d      	b.n	8004432 <UART_SetConfig+0x2e6>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004424 <UART_SetConfig+0x2d8>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d125      	bne.n	800434c <UART_SetConfig+0x200>
 8004300:	4b45      	ldr	r3, [pc, #276]	@ (8004418 <UART_SetConfig+0x2cc>)
 8004302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004306:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800430a:	2bc0      	cmp	r3, #192	@ 0xc0
 800430c:	d016      	beq.n	800433c <UART_SetConfig+0x1f0>
 800430e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004310:	d818      	bhi.n	8004344 <UART_SetConfig+0x1f8>
 8004312:	2b80      	cmp	r3, #128	@ 0x80
 8004314:	d00a      	beq.n	800432c <UART_SetConfig+0x1e0>
 8004316:	2b80      	cmp	r3, #128	@ 0x80
 8004318:	d814      	bhi.n	8004344 <UART_SetConfig+0x1f8>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <UART_SetConfig+0x1d8>
 800431e:	2b40      	cmp	r3, #64	@ 0x40
 8004320:	d008      	beq.n	8004334 <UART_SetConfig+0x1e8>
 8004322:	e00f      	b.n	8004344 <UART_SetConfig+0x1f8>
 8004324:	2300      	movs	r3, #0
 8004326:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432a:	e082      	b.n	8004432 <UART_SetConfig+0x2e6>
 800432c:	2302      	movs	r3, #2
 800432e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004332:	e07e      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004334:	2304      	movs	r3, #4
 8004336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433a:	e07a      	b.n	8004432 <UART_SetConfig+0x2e6>
 800433c:	2308      	movs	r3, #8
 800433e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004342:	e076      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004344:	2310      	movs	r3, #16
 8004346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434a:	e072      	b.n	8004432 <UART_SetConfig+0x2e6>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a35      	ldr	r2, [pc, #212]	@ (8004428 <UART_SetConfig+0x2dc>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d12a      	bne.n	80043ac <UART_SetConfig+0x260>
 8004356:	4b30      	ldr	r3, [pc, #192]	@ (8004418 <UART_SetConfig+0x2cc>)
 8004358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004360:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004364:	d01a      	beq.n	800439c <UART_SetConfig+0x250>
 8004366:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800436a:	d81b      	bhi.n	80043a4 <UART_SetConfig+0x258>
 800436c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004370:	d00c      	beq.n	800438c <UART_SetConfig+0x240>
 8004372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004376:	d815      	bhi.n	80043a4 <UART_SetConfig+0x258>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <UART_SetConfig+0x238>
 800437c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004380:	d008      	beq.n	8004394 <UART_SetConfig+0x248>
 8004382:	e00f      	b.n	80043a4 <UART_SetConfig+0x258>
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800438a:	e052      	b.n	8004432 <UART_SetConfig+0x2e6>
 800438c:	2302      	movs	r3, #2
 800438e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004392:	e04e      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004394:	2304      	movs	r3, #4
 8004396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800439a:	e04a      	b.n	8004432 <UART_SetConfig+0x2e6>
 800439c:	2308      	movs	r3, #8
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a2:	e046      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043a4:	2310      	movs	r3, #16
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043aa:	e042      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a17      	ldr	r2, [pc, #92]	@ (8004410 <UART_SetConfig+0x2c4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d13a      	bne.n	800442c <UART_SetConfig+0x2e0>
 80043b6:	4b18      	ldr	r3, [pc, #96]	@ (8004418 <UART_SetConfig+0x2cc>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80043c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043c4:	d01a      	beq.n	80043fc <UART_SetConfig+0x2b0>
 80043c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80043ca:	d81b      	bhi.n	8004404 <UART_SetConfig+0x2b8>
 80043cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d0:	d00c      	beq.n	80043ec <UART_SetConfig+0x2a0>
 80043d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80043d6:	d815      	bhi.n	8004404 <UART_SetConfig+0x2b8>
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <UART_SetConfig+0x298>
 80043dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e0:	d008      	beq.n	80043f4 <UART_SetConfig+0x2a8>
 80043e2:	e00f      	b.n	8004404 <UART_SetConfig+0x2b8>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ea:	e022      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043ec:	2302      	movs	r3, #2
 80043ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f2:	e01e      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043f4:	2304      	movs	r3, #4
 80043f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fa:	e01a      	b.n	8004432 <UART_SetConfig+0x2e6>
 80043fc:	2308      	movs	r3, #8
 80043fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004402:	e016      	b.n	8004432 <UART_SetConfig+0x2e6>
 8004404:	2310      	movs	r3, #16
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440a:	e012      	b.n	8004432 <UART_SetConfig+0x2e6>
 800440c:	efff69f3 	.word	0xefff69f3
 8004410:	40008000 	.word	0x40008000
 8004414:	40013800 	.word	0x40013800
 8004418:	40021000 	.word	0x40021000
 800441c:	40004400 	.word	0x40004400
 8004420:	40004800 	.word	0x40004800
 8004424:	40004c00 	.word	0x40004c00
 8004428:	40005000 	.word	0x40005000
 800442c:	2310      	movs	r3, #16
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a9f      	ldr	r2, [pc, #636]	@ (80046b4 <UART_SetConfig+0x568>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d17a      	bne.n	8004532 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800443c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004440:	2b08      	cmp	r3, #8
 8004442:	d824      	bhi.n	800448e <UART_SetConfig+0x342>
 8004444:	a201      	add	r2, pc, #4	@ (adr r2, 800444c <UART_SetConfig+0x300>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004471 	.word	0x08004471
 8004450:	0800448f 	.word	0x0800448f
 8004454:	08004479 	.word	0x08004479
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800447f 	.word	0x0800447f
 8004460:	0800448f 	.word	0x0800448f
 8004464:	0800448f 	.word	0x0800448f
 8004468:	0800448f 	.word	0x0800448f
 800446c:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fe f8b4 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8004474:	61f8      	str	r0, [r7, #28]
        break;
 8004476:	e010      	b.n	800449a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b8f      	ldr	r3, [pc, #572]	@ (80046b8 <UART_SetConfig+0x56c>)
 800447a:	61fb      	str	r3, [r7, #28]
        break;
 800447c:	e00d      	b.n	800449a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7fe f815 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8004482:	61f8      	str	r0, [r7, #28]
        break;
 8004484:	e009      	b.n	800449a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800448a:	61fb      	str	r3, [r7, #28]
        break;
 800448c:	e005      	b.n	800449a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004498:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80fb 	beq.w	8004698 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	4613      	mov	r3, r2
 80044a8:	005b      	lsls	r3, r3, #1
 80044aa:	4413      	add	r3, r2
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d305      	bcc.n	80044be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d903      	bls.n	80044c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80044c4:	e0e8      	b.n	8004698 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	2200      	movs	r2, #0
 80044ca:	461c      	mov	r4, r3
 80044cc:	4615      	mov	r5, r2
 80044ce:	f04f 0200 	mov.w	r2, #0
 80044d2:	f04f 0300 	mov.w	r3, #0
 80044d6:	022b      	lsls	r3, r5, #8
 80044d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80044dc:	0222      	lsls	r2, r4, #8
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	6849      	ldr	r1, [r1, #4]
 80044e2:	0849      	lsrs	r1, r1, #1
 80044e4:	2000      	movs	r0, #0
 80044e6:	4688      	mov	r8, r1
 80044e8:	4681      	mov	r9, r0
 80044ea:	eb12 0a08 	adds.w	sl, r2, r8
 80044ee:	eb43 0b09 	adc.w	fp, r3, r9
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	603b      	str	r3, [r7, #0]
 80044fa:	607a      	str	r2, [r7, #4]
 80044fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004500:	4650      	mov	r0, sl
 8004502:	4659      	mov	r1, fp
 8004504:	f7fb fecc 	bl	80002a0 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004516:	d308      	bcc.n	800452a <UART_SetConfig+0x3de>
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800451e:	d204      	bcs.n	800452a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	60da      	str	r2, [r3, #12]
 8004528:	e0b6      	b.n	8004698 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004530:	e0b2      	b.n	8004698 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800453a:	d15e      	bne.n	80045fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800453c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004540:	2b08      	cmp	r3, #8
 8004542:	d828      	bhi.n	8004596 <UART_SetConfig+0x44a>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <UART_SetConfig+0x400>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004571 	.word	0x08004571
 8004550:	08004579 	.word	0x08004579
 8004554:	08004581 	.word	0x08004581
 8004558:	08004597 	.word	0x08004597
 800455c:	08004587 	.word	0x08004587
 8004560:	08004597 	.word	0x08004597
 8004564:	08004597 	.word	0x08004597
 8004568:	08004597 	.word	0x08004597
 800456c:	0800458f 	.word	0x0800458f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe f834 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8004574:	61f8      	str	r0, [r7, #28]
        break;
 8004576:	e014      	b.n	80045a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004578:	f7fe f846 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 800457c:	61f8      	str	r0, [r7, #28]
        break;
 800457e:	e010      	b.n	80045a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004580:	4b4d      	ldr	r3, [pc, #308]	@ (80046b8 <UART_SetConfig+0x56c>)
 8004582:	61fb      	str	r3, [r7, #28]
        break;
 8004584:	e00d      	b.n	80045a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004586:	f7fd ff91 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 800458a:	61f8      	str	r0, [r7, #28]
        break;
 800458c:	e009      	b.n	80045a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004592:	61fb      	str	r3, [r7, #28]
        break;
 8004594:	e005      	b.n	80045a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d077      	beq.n	8004698 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	005a      	lsls	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	085b      	lsrs	r3, r3, #1
 80045b2:	441a      	add	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b0f      	cmp	r3, #15
 80045c2:	d916      	bls.n	80045f2 <UART_SetConfig+0x4a6>
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045ca:	d212      	bcs.n	80045f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f023 030f 	bic.w	r3, r3, #15
 80045d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	8afa      	ldrh	r2, [r7, #22]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	e052      	b.n	8004698 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045f8:	e04e      	b.n	8004698 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d827      	bhi.n	8004652 <UART_SetConfig+0x506>
 8004602:	a201      	add	r2, pc, #4	@ (adr r2, 8004608 <UART_SetConfig+0x4bc>)
 8004604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004608:	0800462d 	.word	0x0800462d
 800460c:	08004635 	.word	0x08004635
 8004610:	0800463d 	.word	0x0800463d
 8004614:	08004653 	.word	0x08004653
 8004618:	08004643 	.word	0x08004643
 800461c:	08004653 	.word	0x08004653
 8004620:	08004653 	.word	0x08004653
 8004624:	08004653 	.word	0x08004653
 8004628:	0800464b 	.word	0x0800464b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800462c:	f7fd ffd6 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8004630:	61f8      	str	r0, [r7, #28]
        break;
 8004632:	e014      	b.n	800465e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004634:	f7fd ffe8 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8004638:	61f8      	str	r0, [r7, #28]
        break;
 800463a:	e010      	b.n	800465e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800463c:	4b1e      	ldr	r3, [pc, #120]	@ (80046b8 <UART_SetConfig+0x56c>)
 800463e:	61fb      	str	r3, [r7, #28]
        break;
 8004640:	e00d      	b.n	800465e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004642:	f7fd ff33 	bl	80024ac <HAL_RCC_GetSysClockFreq>
 8004646:	61f8      	str	r0, [r7, #28]
        break;
 8004648:	e009      	b.n	800465e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800464a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800464e:	61fb      	str	r3, [r7, #28]
        break;
 8004650:	e005      	b.n	800465e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800465c:	bf00      	nop
    }

    if (pclk != 0U)
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d019      	beq.n	8004698 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	085a      	lsrs	r2, r3, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	441a      	add	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b0f      	cmp	r3, #15
 800467c:	d909      	bls.n	8004692 <UART_SetConfig+0x546>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004684:	d205      	bcs.n	8004692 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e002      	b.n	8004698 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80046a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3728      	adds	r7, #40	@ 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b2:	bf00      	nop
 80046b4:	40008000 	.word	0x40008000
 80046b8:	00f42400 	.word	0x00f42400

080046bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	430a      	orrs	r2, r1
 80046e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01a      	beq.n	80047d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047ba:	d10a      	bne.n	80047d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00a      	beq.n	80047f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b098      	sub	sp, #96	@ 0x60
 8004804:	af02      	add	r7, sp, #8
 8004806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004810:	f7fc fd70 	bl	80012f4 <HAL_GetTick>
 8004814:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0308 	and.w	r3, r3, #8
 8004820:	2b08      	cmp	r3, #8
 8004822:	d12e      	bne.n	8004882 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004824:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800482c:	2200      	movs	r2, #0
 800482e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f88c 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d021      	beq.n	8004882 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800484c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004852:	653b      	str	r3, [r7, #80]	@ 0x50
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	461a      	mov	r2, r3
 800485a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800485c:	647b      	str	r3, [r7, #68]	@ 0x44
 800485e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004862:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800486a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e6      	bne.n	800483e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e062      	b.n	8004948 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0304 	and.w	r3, r3, #4
 800488c:	2b04      	cmp	r3, #4
 800488e:	d149      	bne.n	8004924 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004890:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	2200      	movs	r2, #0
 800489a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f856 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d03c      	beq.n	8004924 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	e853 3f00 	ldrex	r3, [r3]
 80048b6:	623b      	str	r3, [r7, #32]
   return(result);
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	461a      	mov	r2, r3
 80048c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e6      	bne.n	80048aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3308      	adds	r3, #8
 80048fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048fc:	61fa      	str	r2, [r7, #28]
 80048fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	69b9      	ldr	r1, [r7, #24]
 8004902:	69fa      	ldr	r2, [r7, #28]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	617b      	str	r3, [r7, #20]
   return(result);
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004920:	2303      	movs	r3, #3
 8004922:	e011      	b.n	8004948 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2220      	movs	r2, #32
 800492e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3758      	adds	r7, #88	@ 0x58
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004960:	e04f      	b.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004968:	d04b      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496a:	f7fc fcc3 	bl	80012f4 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	69ba      	ldr	r2, [r7, #24]
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <UART_WaitOnFlagUntilTimeout+0x30>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e04e      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d037      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b80      	cmp	r3, #128	@ 0x80
 8004996:	d034      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b40      	cmp	r3, #64	@ 0x40
 800499c:	d031      	beq.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d110      	bne.n	80049ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2208      	movs	r2, #8
 80049b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f8ff 	bl	8004bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2208      	movs	r2, #8
 80049be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e029      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049dc:	d111      	bne.n	8004a02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f8e5 	bl	8004bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2220      	movs	r2, #32
 80049f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e00f      	b.n	8004a22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	bf0c      	ite	eq
 8004a12:	2301      	moveq	r3, #1
 8004a14:	2300      	movne	r3, #0
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	461a      	mov	r2, r3
 8004a1a:	79fb      	ldrb	r3, [r7, #7]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d0a0      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a20:	2300      	movs	r3, #0
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b097      	sub	sp, #92	@ 0x5c
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	4613      	mov	r3, r2
 8004a38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	88fa      	ldrh	r2, [r7, #6]
 8004a44:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	88fa      	ldrh	r2, [r7, #6]
 8004a4c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	d10e      	bne.n	8004a7e <UART_Start_Receive_IT+0x52>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d105      	bne.n	8004a74 <UART_Start_Receive_IT+0x48>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004a6e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a72:	e02d      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	22ff      	movs	r2, #255	@ 0xff
 8004a78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a7c:	e028      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10d      	bne.n	8004aa2 <UART_Start_Receive_IT+0x76>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d104      	bne.n	8004a98 <UART_Start_Receive_IT+0x6c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	22ff      	movs	r2, #255	@ 0xff
 8004a92:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004a96:	e01b      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	227f      	movs	r2, #127	@ 0x7f
 8004a9c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004aa0:	e016      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004aaa:	d10d      	bne.n	8004ac8 <UART_Start_Receive_IT+0x9c>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d104      	bne.n	8004abe <UART_Start_Receive_IT+0x92>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	227f      	movs	r2, #127	@ 0x7f
 8004ab8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004abc:	e008      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	223f      	movs	r2, #63	@ 0x3f
 8004ac2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ac6:	e003      	b.n	8004ad0 <UART_Start_Receive_IT+0xa4>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2222      	movs	r2, #34	@ 0x22
 8004adc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3308      	adds	r3, #8
 8004ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af2:	f043 0301 	orr.w	r3, r3, #1
 8004af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	3308      	adds	r3, #8
 8004afe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004b00:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004b02:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b08:	e841 2300 	strex	r3, r2, [r1]
 8004b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1e5      	bne.n	8004ae0 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b1c:	d107      	bne.n	8004b2e <UART_Start_Receive_IT+0x102>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	4a21      	ldr	r2, [pc, #132]	@ (8004bb0 <UART_Start_Receive_IT+0x184>)
 8004b2a:	669a      	str	r2, [r3, #104]	@ 0x68
 8004b2c:	e002      	b.n	8004b34 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a20      	ldr	r2, [pc, #128]	@ (8004bb4 <UART_Start_Receive_IT+0x188>)
 8004b32:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d019      	beq.n	8004b70 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b5c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b60:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e6      	bne.n	8004b3c <UART_Start_Receive_IT+0x110>
 8004b6e:	e018      	b.n	8004ba2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	e853 3f00 	ldrex	r3, [r3]
 8004b7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	f043 0320 	orr.w	r3, r3, #32
 8004b84:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b8e:	623b      	str	r3, [r7, #32]
 8004b90:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	69f9      	ldr	r1, [r7, #28]
 8004b94:	6a3a      	ldr	r2, [r7, #32]
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e6      	bne.n	8004b70 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	375c      	adds	r7, #92	@ 0x5c
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	08004ebd 	.word	0x08004ebd
 8004bb4:	08004d01 	.word	0x08004d01

08004bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b095      	sub	sp, #84	@ 0x54
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bc8:	e853 3f00 	ldrex	r3, [r3]
 8004bcc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bde:	643b      	str	r3, [r7, #64]	@ 0x40
 8004be0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e6      	bne.n	8004bc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	3308      	adds	r3, #8
 8004c10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c1a:	e841 2300 	strex	r3, r2, [r1]
 8004c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1e5      	bne.n	8004bf2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d118      	bne.n	8004c60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	f023 0310 	bic.w	r3, r3, #16
 8004c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4c:	61bb      	str	r3, [r7, #24]
 8004c4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	6979      	ldr	r1, [r7, #20]
 8004c52:	69ba      	ldr	r2, [r7, #24]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e6      	bne.n	8004c2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c74:	bf00      	nop
 8004c76:	3754      	adds	r7, #84	@ 0x54
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f7ff fa3e 	bl	8004120 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	e853 3f00 	ldrex	r3, [r3]
 8004cc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cc8:	61fb      	str	r3, [r7, #28]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
 8004cd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd6:	6979      	ldr	r1, [r7, #20]
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	613b      	str	r3, [r7, #16]
   return(result);
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1e6      	bne.n	8004cb4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2220      	movs	r2, #32
 8004cea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f7ff fa0a 	bl	800410c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cf8:	bf00      	nop
 8004cfa:	3720      	adds	r7, #32
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b09c      	sub	sp, #112	@ 0x70
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004d0e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d18:	2b22      	cmp	r3, #34	@ 0x22
 8004d1a:	f040 80be 	bne.w	8004e9a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004d24:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004d28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004d2c:	b2d9      	uxtb	r1, r3
 8004d2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004d32:	b2da      	uxtb	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d38:	400a      	ands	r2, r1
 8004d3a:	b2d2      	uxtb	r2, r2
 8004d3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f040 80a3 	bne.w	8004eae <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d70:	e853 3f00 	ldrex	r3, [r3]
 8004d74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d8e:	e841 2300 	strex	r3, r2, [r1]
 8004d92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e6      	bne.n	8004d68 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	3308      	adds	r3, #8
 8004da0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3308      	adds	r3, #8
 8004db8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004dba:	647a      	str	r2, [r7, #68]	@ 0x44
 8004dbc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e5      	bne.n	8004d9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a34      	ldr	r2, [pc, #208]	@ (8004eb8 <UART_RxISR_8BIT+0x1b8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01f      	beq.n	8004e2c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e02:	e853 3f00 	ldrex	r3, [r3]
 8004e06:	623b      	str	r3, [r7, #32]
   return(result);
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	461a      	mov	r2, r3
 8004e16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e20:	e841 2300 	strex	r3, r2, [r1]
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1e6      	bne.n	8004dfa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d12e      	bne.n	8004e92 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0310 	bic.w	r3, r3, #16
 8004e4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	461a      	mov	r2, r3
 8004e56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e58:	61fb      	str	r3, [r7, #28]
 8004e5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	69b9      	ldr	r1, [r7, #24]
 8004e5e:	69fa      	ldr	r2, [r7, #28]
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	617b      	str	r3, [r7, #20]
   return(result);
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e6      	bne.n	8004e3a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b10      	cmp	r3, #16
 8004e78:	d103      	bne.n	8004e82 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2210      	movs	r2, #16
 8004e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004e88:	4619      	mov	r1, r3
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff f952 	bl	8004134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004e90:	e00d      	b.n	8004eae <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fb fbe8 	bl	8000668 <HAL_UART_RxCpltCallback>
}
 8004e98:	e009      	b.n	8004eae <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	8b1b      	ldrh	r3, [r3, #24]
 8004ea0:	b29a      	uxth	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f042 0208 	orr.w	r2, r2, #8
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	831a      	strh	r2, [r3, #24]
}
 8004eae:	bf00      	nop
 8004eb0:	3770      	adds	r7, #112	@ 0x70
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	40008000 	.word	0x40008000

08004ebc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b09c      	sub	sp, #112	@ 0x70
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004eca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed4:	2b22      	cmp	r3, #34	@ 0x22
 8004ed6:	f040 80be 	bne.w	8005056 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004ee0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004eea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004eee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ef8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004efe:	1c9a      	adds	r2, r3, #2
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f040 80a3 	bne.w	800506a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f2c:	e853 3f00 	ldrex	r3, [r3]
 8004f30:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f38:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f42:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f44:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f46:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004f4a:	e841 2300 	strex	r3, r2, [r1]
 8004f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8004f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d1e6      	bne.n	8004f24 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	3308      	adds	r3, #8
 8004f5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f60:	e853 3f00 	ldrex	r3, [r3]
 8004f64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f68:	f023 0301 	bic.w	r3, r3, #1
 8004f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f76:	643a      	str	r2, [r7, #64]	@ 0x40
 8004f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e5      	bne.n	8004f56 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2220      	movs	r2, #32
 8004f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a34      	ldr	r2, [pc, #208]	@ (8005074 <UART_RxISR_16BIT+0x1b8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01f      	beq.n	8004fe8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d018      	beq.n	8004fe8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	e853 3f00 	ldrex	r3, [r3]
 8004fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fc4:	69fb      	ldr	r3, [r7, #28]
 8004fc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fdc:	e841 2300 	strex	r3, r2, [r1]
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1e6      	bne.n	8004fb6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d12e      	bne.n	800504e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	e853 3f00 	ldrex	r3, [r3]
 8005002:	60bb      	str	r3, [r7, #8]
   return(result);
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	f023 0310 	bic.w	r3, r3, #16
 800500a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	461a      	mov	r2, r3
 8005012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005014:	61bb      	str	r3, [r7, #24]
 8005016:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005018:	6979      	ldr	r1, [r7, #20]
 800501a:	69ba      	ldr	r2, [r7, #24]
 800501c:	e841 2300 	strex	r3, r2, [r1]
 8005020:	613b      	str	r3, [r7, #16]
   return(result);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d1e6      	bne.n	8004ff6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69db      	ldr	r3, [r3, #28]
 800502e:	f003 0310 	and.w	r3, r3, #16
 8005032:	2b10      	cmp	r3, #16
 8005034:	d103      	bne.n	800503e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2210      	movs	r2, #16
 800503c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f7ff f874 	bl	8004134 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800504c:	e00d      	b.n	800506a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fb fb0a 	bl	8000668 <HAL_UART_RxCpltCallback>
}
 8005054:	e009      	b.n	800506a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	8b1b      	ldrh	r3, [r3, #24]
 800505c:	b29a      	uxth	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0208 	orr.w	r2, r2, #8
 8005066:	b292      	uxth	r2, r2
 8005068:	831a      	strh	r2, [r3, #24]
}
 800506a:	bf00      	nop
 800506c:	3770      	adds	r7, #112	@ 0x70
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40008000 	.word	0x40008000

08005078 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800509a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800509e:	2b84      	cmp	r3, #132	@ 0x84
 80050a0:	d005      	beq.n	80050ae <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	3303      	adds	r3, #3
 80050ac:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050ae:	68fb      	ldr	r3, [r7, #12]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3714      	adds	r7, #20
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80050c0:	f000 fdca 	bl	8005c58 <vTaskStartScheduler>
  
  return osOK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	bd80      	pop	{r7, pc}

080050ca <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80050ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050cc:	b089      	sub	sp, #36	@ 0x24
 80050ce:	af04      	add	r7, sp, #16
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	695b      	ldr	r3, [r3, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d020      	beq.n	800511e <osThreadCreate+0x54>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d01c      	beq.n	800511e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685c      	ldr	r4, [r3, #4]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	691e      	ldr	r6, [r3, #16]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7ff ffc8 	bl	800508c <makeFreeRtosPriority>
 80050fc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005106:	9202      	str	r2, [sp, #8]
 8005108:	9301      	str	r3, [sp, #4]
 800510a:	9100      	str	r1, [sp, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	4632      	mov	r2, r6
 8005110:	4629      	mov	r1, r5
 8005112:	4620      	mov	r0, r4
 8005114:	f000 fbd2 	bl	80058bc <xTaskCreateStatic>
 8005118:	4603      	mov	r3, r0
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e01c      	b.n	8005158 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685c      	ldr	r4, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800512a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff ffaa 	bl	800508c <makeFreeRtosPriority>
 8005138:	4602      	mov	r2, r0
 800513a:	f107 030c 	add.w	r3, r7, #12
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	9200      	str	r2, [sp, #0]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	4632      	mov	r2, r6
 8005146:	4629      	mov	r1, r5
 8005148:	4620      	mov	r0, r4
 800514a:	f000 fc17 	bl	800597c <xTaskCreate>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d001      	beq.n	8005158 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005154:	2300      	movs	r3, #0
 8005156:	e000      	b.n	800515a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005158:	68fb      	ldr	r3, [r7, #12]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005162 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <osDelay+0x16>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	e000      	b.n	800517a <osDelay+0x18>
 8005178:	2301      	movs	r3, #1
 800517a:	4618      	mov	r0, r3
 800517c:	f000 fd36 	bl	8005bec <vTaskDelay>
  
  return osOK;
 8005180:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005182:	4618      	mov	r0, r3
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800518a:	b480      	push	{r7}
 800518c:	b083      	sub	sp, #12
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f103 0208 	add.w	r2, r3, #8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051a2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f103 0208 	add.w	r2, r3, #8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f103 0208 	add.w	r2, r3, #8
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	601a      	str	r2, [r3, #0]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005242:	d103      	bne.n	800524c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	e00c      	b.n	8005266 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3308      	adds	r3, #8
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e002      	b.n	800525a <vListInsert+0x2e>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	d2f6      	bcs.n	8005254 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	601a      	str	r2, [r3, #0]
}
 8005292:	bf00      	nop
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	6892      	ldr	r2, [r2, #8]
 80052b4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	6852      	ldr	r2, [r2, #4]
 80052be:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d103      	bne.n	80052d2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	1e5a      	subs	r2, r3, #1
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3714      	adds	r7, #20
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
	...

080052f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10b      	bne.n	8005320 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530c:	f383 8811 	msr	BASEPRI, r3
 8005310:	f3bf 8f6f 	isb	sy
 8005314:	f3bf 8f4f 	dsb	sy
 8005318:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800531a:	bf00      	nop
 800531c:	bf00      	nop
 800531e:	e7fd      	b.n	800531c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005320:	f001 fb72 	bl	8006a08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005330:	fb01 f303 	mul.w	r3, r1, r3
 8005334:	441a      	add	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005350:	3b01      	subs	r3, #1
 8005352:	68f9      	ldr	r1, [r7, #12]
 8005354:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005356:	fb01 f303 	mul.w	r3, r1, r3
 800535a:	441a      	add	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	22ff      	movs	r2, #255	@ 0xff
 8005364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	22ff      	movs	r2, #255	@ 0xff
 800536c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d114      	bne.n	80053a0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01a      	beq.n	80053b4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	3310      	adds	r3, #16
 8005382:	4618      	mov	r0, r3
 8005384:	f000 feb2 	bl	80060ec <xTaskRemoveFromEventList>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d012      	beq.n	80053b4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800538e:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <xQueueGenericReset+0xd0>)
 8005390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	e009      	b.n	80053b4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3310      	adds	r3, #16
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7ff fef0 	bl	800518a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3324      	adds	r3, #36	@ 0x24
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff feeb 	bl	800518a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053b4:	f001 fb5a 	bl	8006a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053b8:	2301      	movs	r3, #1
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b08a      	sub	sp, #40	@ 0x28
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	4613      	mov	r3, r2
 80053d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <xQueueGenericCreate+0x2c>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	613b      	str	r3, [r7, #16]
}
 80053ee:	bf00      	nop
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	fb02 f303 	mul.w	r3, r2, r3
 80053fc:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3348      	adds	r3, #72	@ 0x48
 8005402:	4618      	mov	r0, r3
 8005404:	f001 fc22 	bl	8006c4c <pvPortMalloc>
 8005408:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	3348      	adds	r3, #72	@ 0x48
 8005418:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005422:	79fa      	ldrb	r2, [r7, #7]
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	9300      	str	r3, [sp, #0]
 8005428:	4613      	mov	r3, r2
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f805 	bl	800543e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005434:	69bb      	ldr	r3, [r7, #24]
	}
 8005436:	4618      	mov	r0, r3
 8005438:	3720      	adds	r7, #32
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}

0800543e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800543e:	b580      	push	{r7, lr}
 8005440:	b084      	sub	sp, #16
 8005442:	af00      	add	r7, sp, #0
 8005444:	60f8      	str	r0, [r7, #12]
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d103      	bne.n	800545a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e002      	b.n	8005460 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800546c:	2101      	movs	r1, #1
 800546e:	69b8      	ldr	r0, [r7, #24]
 8005470:	f7ff ff40 	bl	80052f4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005474:	bf00      	nop
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b08e      	sub	sp, #56	@ 0x38
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800548a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	623b      	str	r3, [r7, #32]
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d00b      	beq.n	80054c8 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	61fb      	str	r3, [r7, #28]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <xQueueGiveFromISR+0x5c>
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <xQueueGiveFromISR+0x60>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <xQueueGiveFromISR+0x62>
 80054dc:	2300      	movs	r3, #0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d10b      	bne.n	80054fa <xQueueGiveFromISR+0x7e>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	61bb      	str	r3, [r7, #24]
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	e7fd      	b.n	80054f6 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054fa:	f001 fb65 	bl	8006bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054fe:	f3ef 8211 	mrs	r2, BASEPRI
 8005502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005506:	f383 8811 	msr	BASEPRI, r3
 800550a:	f3bf 8f6f 	isb	sy
 800550e:	f3bf 8f4f 	dsb	sy
 8005512:	617a      	str	r2, [r7, #20]
 8005514:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005516:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005518:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800551a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800551e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005526:	429a      	cmp	r2, r3
 8005528:	d22b      	bcs.n	8005582 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800552a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005530:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800553c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005544:	d112      	bne.n	800556c <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	3324      	adds	r3, #36	@ 0x24
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fdca 	bl	80060ec <xTaskRemoveFromEventList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00e      	beq.n	800557c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d00b      	beq.n	800557c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e007      	b.n	800557c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800556c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005570:	3301      	adds	r3, #1
 8005572:	b2db      	uxtb	r3, r3
 8005574:	b25a      	sxtb	r2, r3
 8005576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800557c:	2301      	movs	r3, #1
 800557e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005580:	e001      	b.n	8005586 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005582:	2300      	movs	r3, #0
 8005584:	637b      	str	r3, [r7, #52]	@ 0x34
 8005586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005588:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005590:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005594:	4618      	mov	r0, r3
 8005596:	3738      	adds	r7, #56	@ 0x38
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08e      	sub	sp, #56	@ 0x38
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80055a6:	2300      	movs	r3, #0
 80055a8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	623b      	str	r3, [r7, #32]
}
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	e7fd      	b.n	80055cc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80055d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	61fb      	str	r3, [r7, #28]
}
 80055ea:	bf00      	nop
 80055ec:	bf00      	nop
 80055ee:	e7fd      	b.n	80055ec <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055f0:	f000 ff3c 	bl	800646c <xTaskGetSchedulerState>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <xQueueSemaphoreTake+0x64>
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <xQueueSemaphoreTake+0x68>
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <xQueueSemaphoreTake+0x6a>
 8005604:	2300      	movs	r3, #0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10b      	bne.n	8005622 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	61bb      	str	r3, [r7, #24]
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	e7fd      	b.n	800561e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005622:	f001 f9f1 	bl	8006a08 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	2b00      	cmp	r3, #0
 8005630:	d024      	beq.n	800567c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	1e5a      	subs	r2, r3, #1
 8005636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005638:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800563a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005642:	f001 f837 	bl	80066b4 <pvTaskIncrementMutexHeldCount>
 8005646:	4602      	mov	r2, r0
 8005648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800564c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00f      	beq.n	8005674 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	3310      	adds	r3, #16
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fd47 	bl	80060ec <xTaskRemoveFromEventList>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005664:	4b54      	ldr	r3, [pc, #336]	@ (80057b8 <xQueueSemaphoreTake+0x21c>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005674:	f001 f9fa 	bl	8006a6c <vPortExitCritical>
				return pdPASS;
 8005678:	2301      	movs	r3, #1
 800567a:	e098      	b.n	80057ae <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d112      	bne.n	80056a8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	617b      	str	r3, [r7, #20]
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80056a0:	f001 f9e4 	bl	8006a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e082      	b.n	80057ae <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d106      	bne.n	80056bc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ae:	f107 030c 	add.w	r3, r7, #12
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fd7e 	bl	80061b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056bc:	f001 f9d6 	bl	8006a6c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056c0:	f000 fb2c 	bl	8005d1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056c4:	f001 f9a0 	bl	8006a08 <vPortEnterCritical>
 80056c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056ce:	b25b      	sxtb	r3, r3
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056d4:	d103      	bne.n	80056de <xQueueSemaphoreTake+0x142>
 80056d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056ea:	d103      	bne.n	80056f4 <xQueueSemaphoreTake+0x158>
 80056ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80056f4:	f001 f9ba 	bl	8006a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80056f8:	463a      	mov	r2, r7
 80056fa:	f107 030c 	add.w	r3, r7, #12
 80056fe:	4611      	mov	r1, r2
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fd6d 	bl	80061e0 <xTaskCheckForTimeOut>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d132      	bne.n	8005772 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800570c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800570e:	f000 f8bf 	bl	8005890 <prvIsQueueEmpty>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d026      	beq.n	8005766 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d109      	bne.n	8005734 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005720:	f001 f972 	bl	8006a08 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 febd 	bl	80064a8 <xTaskPriorityInherit>
 800572e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005730:	f001 f99c 	bl	8006a6c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005736:	3324      	adds	r3, #36	@ 0x24
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f000 fcaf 	bl	80060a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005742:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005744:	f000 f852 	bl	80057ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005748:	f000 faf6 	bl	8005d38 <xTaskResumeAll>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	f47f af67 	bne.w	8005622 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005754:	4b18      	ldr	r3, [pc, #96]	@ (80057b8 <xQueueSemaphoreTake+0x21c>)
 8005756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	e75d      	b.n	8005622 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005766:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005768:	f000 f840 	bl	80057ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800576c:	f000 fae4 	bl	8005d38 <xTaskResumeAll>
 8005770:	e757      	b.n	8005622 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005772:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005774:	f000 f83a 	bl	80057ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005778:	f000 fade 	bl	8005d38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800577c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800577e:	f000 f887 	bl	8005890 <prvIsQueueEmpty>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	f43f af4c 	beq.w	8005622 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005790:	f001 f93a 	bl	8006a08 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005794:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005796:	f000 f811 	bl	80057bc <prvGetDisinheritPriorityAfterTimeout>
 800579a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800579c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fef6 	bl	8006594 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80057a8:	f001 f960 	bl	8006a6c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3738      	adds	r7, #56	@ 0x38
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d006      	beq.n	80057da <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f1c3 0307 	rsb	r3, r3, #7
 80057d6:	60fb      	str	r3, [r7, #12]
 80057d8:	e001      	b.n	80057de <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057da:	2300      	movs	r3, #0
 80057dc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057de:	68fb      	ldr	r3, [r7, #12]
	}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057f4:	f001 f908 	bl	8006a08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005800:	e011      	b.n	8005826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d012      	beq.n	8005830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	3324      	adds	r3, #36	@ 0x24
 800580e:	4618      	mov	r0, r3
 8005810:	f000 fc6c 	bl	80060ec <xTaskRemoveFromEventList>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d001      	beq.n	800581e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800581a:	f000 fd45 	bl	80062a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	3b01      	subs	r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800582a:	2b00      	cmp	r3, #0
 800582c:	dce9      	bgt.n	8005802 <prvUnlockQueue+0x16>
 800582e:	e000      	b.n	8005832 <prvUnlockQueue+0x46>
					break;
 8005830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	22ff      	movs	r2, #255	@ 0xff
 8005836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800583a:	f001 f917 	bl	8006a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800583e:	f001 f8e3 	bl	8006a08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800584a:	e011      	b.n	8005870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d012      	beq.n	800587a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	3310      	adds	r3, #16
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fc47 	bl	80060ec <xTaskRemoveFromEventList>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005864:	f000 fd20 	bl	80062a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005868:	7bbb      	ldrb	r3, [r7, #14]
 800586a:	3b01      	subs	r3, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005874:	2b00      	cmp	r3, #0
 8005876:	dce9      	bgt.n	800584c <prvUnlockQueue+0x60>
 8005878:	e000      	b.n	800587c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800587a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	22ff      	movs	r2, #255	@ 0xff
 8005880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005884:	f001 f8f2 	bl	8006a6c <vPortExitCritical>
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005898:	f001 f8b6 	bl	8006a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d102      	bne.n	80058aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e001      	b.n	80058ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058ae:	f001 f8dd 	bl	8006a6c <vPortExitCritical>

	return xReturn;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08e      	sub	sp, #56	@ 0x38
 80058c0:	af04      	add	r7, sp, #16
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80058ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	623b      	str	r3, [r7, #32]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <xTaskCreateStatic+0x4a>
	__asm volatile
 80058ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f2:	f383 8811 	msr	BASEPRI, r3
 80058f6:	f3bf 8f6f 	isb	sy
 80058fa:	f3bf 8f4f 	dsb	sy
 80058fe:	61fb      	str	r3, [r7, #28]
}
 8005900:	bf00      	nop
 8005902:	bf00      	nop
 8005904:	e7fd      	b.n	8005902 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005906:	2354      	movs	r3, #84	@ 0x54
 8005908:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	2b54      	cmp	r3, #84	@ 0x54
 800590e:	d00b      	beq.n	8005928 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	61bb      	str	r3, [r7, #24]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005928:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800592a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800592c:	2b00      	cmp	r3, #0
 800592e:	d01e      	beq.n	800596e <xTaskCreateStatic+0xb2>
 8005930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01b      	beq.n	800596e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005942:	2202      	movs	r2, #2
 8005944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005948:	2300      	movs	r3, #0
 800594a:	9303      	str	r3, [sp, #12]
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	9302      	str	r3, [sp, #8]
 8005950:	f107 0314 	add.w	r3, r7, #20
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 f850 	bl	8005a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005966:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005968:	f000 f8d6 	bl	8005b18 <prvAddNewTaskToReadyList>
 800596c:	e001      	b.n	8005972 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005972:	697b      	ldr	r3, [r7, #20]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	3728      	adds	r7, #40	@ 0x28
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800597c:	b580      	push	{r7, lr}
 800597e:	b08c      	sub	sp, #48	@ 0x30
 8005980:	af04      	add	r7, sp, #16
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	603b      	str	r3, [r7, #0]
 8005988:	4613      	mov	r3, r2
 800598a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800598c:	88fb      	ldrh	r3, [r7, #6]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4618      	mov	r0, r3
 8005992:	f001 f95b 	bl	8006c4c <pvPortMalloc>
 8005996:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00e      	beq.n	80059bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800599e:	2054      	movs	r0, #84	@ 0x54
 80059a0:	f001 f954 	bl	8006c4c <pvPortMalloc>
 80059a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d003      	beq.n	80059b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80059b2:	e005      	b.n	80059c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80059b4:	6978      	ldr	r0, [r7, #20]
 80059b6:	f001 fa17 	bl	8006de8 <vPortFree>
 80059ba:	e001      	b.n	80059c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d017      	beq.n	80059f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	2300      	movs	r3, #0
 80059d2:	9303      	str	r3, [sp, #12]
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	9302      	str	r3, [sp, #8]
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	9301      	str	r3, [sp, #4]
 80059dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 f80e 	bl	8005a06 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059ea:	69f8      	ldr	r0, [r7, #28]
 80059ec:	f000 f894 	bl	8005b18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80059f0:	2301      	movs	r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
 80059f4:	e002      	b.n	80059fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059fc:	69bb      	ldr	r3, [r7, #24]
	}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3720      	adds	r7, #32
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b088      	sub	sp, #32
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	60f8      	str	r0, [r7, #12]
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	f023 0307 	bic.w	r3, r3, #7
 8005a2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	f003 0307 	and.w	r3, r3, #7
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00b      	beq.n	8005a50 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3c:	f383 8811 	msr	BASEPRI, r3
 8005a40:	f3bf 8f6f 	isb	sy
 8005a44:	f3bf 8f4f 	dsb	sy
 8005a48:	617b      	str	r3, [r7, #20]
}
 8005a4a:	bf00      	nop
 8005a4c:	bf00      	nop
 8005a4e:	e7fd      	b.n	8005a4c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d01f      	beq.n	8005a96 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a56:	2300      	movs	r3, #0
 8005a58:	61fb      	str	r3, [r7, #28]
 8005a5a:	e012      	b.n	8005a82 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	4413      	add	r3, r2
 8005a62:	7819      	ldrb	r1, [r3, #0]
 8005a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	4413      	add	r3, r2
 8005a6a:	3334      	adds	r3, #52	@ 0x34
 8005a6c:	460a      	mov	r2, r1
 8005a6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	4413      	add	r3, r2
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d006      	beq.n	8005a8a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	2b0f      	cmp	r3, #15
 8005a86:	d9e9      	bls.n	8005a5c <prvInitialiseNewTask+0x56>
 8005a88:	e000      	b.n	8005a8c <prvInitialiseNewTask+0x86>
			{
				break;
 8005a8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a94:	e003      	b.n	8005a9e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa0:	2b06      	cmp	r3, #6
 8005aa2:	d901      	bls.n	8005aa8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005aa4:	2306      	movs	r3, #6
 8005aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fb83 	bl	80051ca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac6:	3318      	adds	r3, #24
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff fb7e 	bl	80051ca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ace:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad6:	f1c3 0207 	rsb	r2, r3, #7
 8005ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005adc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	68f9      	ldr	r1, [r7, #12]
 8005af6:	69b8      	ldr	r0, [r7, #24]
 8005af8:	f000 fe56 	bl	80067a8 <pxPortInitialiseStack>
 8005afc:	4602      	mov	r2, r0
 8005afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b0e:	bf00      	nop
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b20:	f000 ff72 	bl	8006a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b24:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <prvAddNewTaskToReadyList+0xb8>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	4a29      	ldr	r2, [pc, #164]	@ (8005bd0 <prvAddNewTaskToReadyList+0xb8>)
 8005b2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b2e:	4b29      	ldr	r3, [pc, #164]	@ (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b36:	4a27      	ldr	r2, [pc, #156]	@ (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b3c:	4b24      	ldr	r3, [pc, #144]	@ (8005bd0 <prvAddNewTaskToReadyList+0xb8>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d110      	bne.n	8005b66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b44:	f000 fbd4 	bl	80062f0 <prvInitialiseTaskLists>
 8005b48:	e00d      	b.n	8005b66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b4a:	4b23      	ldr	r3, [pc, #140]	@ (8005bd8 <prvAddNewTaskToReadyList+0xc0>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b52:	4b20      	ldr	r3, [pc, #128]	@ (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d802      	bhi.n	8005b66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b60:	4a1c      	ldr	r2, [pc, #112]	@ (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b66:	4b1d      	ldr	r3, [pc, #116]	@ (8005bdc <prvAddNewTaskToReadyList+0xc4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8005bdc <prvAddNewTaskToReadyList+0xc4>)
 8005b6e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b74:	2201      	movs	r2, #1
 8005b76:	409a      	lsls	r2, r3
 8005b78:	4b19      	ldr	r3, [pc, #100]	@ (8005be0 <prvAddNewTaskToReadyList+0xc8>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	4a18      	ldr	r2, [pc, #96]	@ (8005be0 <prvAddNewTaskToReadyList+0xc8>)
 8005b80:	6013      	str	r3, [r2, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4a15      	ldr	r2, [pc, #84]	@ (8005be4 <prvAddNewTaskToReadyList+0xcc>)
 8005b90:	441a      	add	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3304      	adds	r3, #4
 8005b96:	4619      	mov	r1, r3
 8005b98:	4610      	mov	r0, r2
 8005b9a:	f7ff fb23 	bl	80051e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b9e:	f000 ff65 	bl	8006a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bd8 <prvAddNewTaskToReadyList+0xc0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00e      	beq.n	8005bc8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005baa:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <prvAddNewTaskToReadyList+0xbc>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d207      	bcs.n	8005bc8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <prvAddNewTaskToReadyList+0xd0>)
 8005bba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bc8:	bf00      	nop
 8005bca:	3708      	adds	r7, #8
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	20000694 	.word	0x20000694
 8005bd4:	20000594 	.word	0x20000594
 8005bd8:	200006a0 	.word	0x200006a0
 8005bdc:	200006b0 	.word	0x200006b0
 8005be0:	2000069c 	.word	0x2000069c
 8005be4:	20000598 	.word	0x20000598
 8005be8:	e000ed04 	.word	0xe000ed04

08005bec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d018      	beq.n	8005c30 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bfe:	4b14      	ldr	r3, [pc, #80]	@ (8005c50 <vTaskDelay+0x64>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00b      	beq.n	8005c1e <vTaskDelay+0x32>
	__asm volatile
 8005c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0a:	f383 8811 	msr	BASEPRI, r3
 8005c0e:	f3bf 8f6f 	isb	sy
 8005c12:	f3bf 8f4f 	dsb	sy
 8005c16:	60bb      	str	r3, [r7, #8]
}
 8005c18:	bf00      	nop
 8005c1a:	bf00      	nop
 8005c1c:	e7fd      	b.n	8005c1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c1e:	f000 f87d 	bl	8005d1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c22:	2100      	movs	r1, #0
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 fd59 	bl	80066dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c2a:	f000 f885 	bl	8005d38 <xTaskResumeAll>
 8005c2e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d107      	bne.n	8005c46 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005c36:	4b07      	ldr	r3, [pc, #28]	@ (8005c54 <vTaskDelay+0x68>)
 8005c38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	200006bc 	.word	0x200006bc
 8005c54:	e000ed04 	.word	0xe000ed04

08005c58 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08a      	sub	sp, #40	@ 0x28
 8005c5c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c66:	463a      	mov	r2, r7
 8005c68:	1d39      	adds	r1, r7, #4
 8005c6a:	f107 0308 	add.w	r3, r7, #8
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fa fd38 	bl	80006e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c74:	6839      	ldr	r1, [r7, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	9202      	str	r2, [sp, #8]
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	9300      	str	r3, [sp, #0]
 8005c82:	2300      	movs	r3, #0
 8005c84:	460a      	mov	r2, r1
 8005c86:	491f      	ldr	r1, [pc, #124]	@ (8005d04 <vTaskStartScheduler+0xac>)
 8005c88:	481f      	ldr	r0, [pc, #124]	@ (8005d08 <vTaskStartScheduler+0xb0>)
 8005c8a:	f7ff fe17 	bl	80058bc <xTaskCreateStatic>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	4a1e      	ldr	r2, [pc, #120]	@ (8005d0c <vTaskStartScheduler+0xb4>)
 8005c92:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c94:	4b1d      	ldr	r3, [pc, #116]	@ (8005d0c <vTaskStartScheduler+0xb4>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	617b      	str	r3, [r7, #20]
 8005ca0:	e001      	b.n	8005ca6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d116      	bne.n	8005cda <vTaskStartScheduler+0x82>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	613b      	str	r3, [r7, #16]
}
 8005cbe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005cc0:	4b13      	ldr	r3, [pc, #76]	@ (8005d10 <vTaskStartScheduler+0xb8>)
 8005cc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005cc6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005cc8:	4b12      	ldr	r3, [pc, #72]	@ (8005d14 <vTaskStartScheduler+0xbc>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005cce:	4b12      	ldr	r3, [pc, #72]	@ (8005d18 <vTaskStartScheduler+0xc0>)
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005cd4:	f000 fdf4 	bl	80068c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005cd8:	e00f      	b.n	8005cfa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ce0:	d10b      	bne.n	8005cfa <vTaskStartScheduler+0xa2>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	60fb      	str	r3, [r7, #12]
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	e7fd      	b.n	8005cf6 <vTaskStartScheduler+0x9e>
}
 8005cfa:	bf00      	nop
 8005cfc:	3718      	adds	r7, #24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	08008304 	.word	0x08008304
 8005d08:	080062c1 	.word	0x080062c1
 8005d0c:	200006b8 	.word	0x200006b8
 8005d10:	200006b4 	.word	0x200006b4
 8005d14:	200006a0 	.word	0x200006a0
 8005d18:	20000698 	.word	0x20000698

08005d1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d20:	4b04      	ldr	r3, [pc, #16]	@ (8005d34 <vTaskSuspendAll+0x18>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	3301      	adds	r3, #1
 8005d26:	4a03      	ldr	r2, [pc, #12]	@ (8005d34 <vTaskSuspendAll+0x18>)
 8005d28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	200006bc 	.word	0x200006bc

08005d38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d46:	4b42      	ldr	r3, [pc, #264]	@ (8005e50 <xTaskResumeAll+0x118>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <xTaskResumeAll+0x2e>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	603b      	str	r3, [r7, #0]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d66:	f000 fe4f 	bl	8006a08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d6a:	4b39      	ldr	r3, [pc, #228]	@ (8005e50 <xTaskResumeAll+0x118>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	4a37      	ldr	r2, [pc, #220]	@ (8005e50 <xTaskResumeAll+0x118>)
 8005d72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d74:	4b36      	ldr	r3, [pc, #216]	@ (8005e50 <xTaskResumeAll+0x118>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d161      	bne.n	8005e40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d7c:	4b35      	ldr	r3, [pc, #212]	@ (8005e54 <xTaskResumeAll+0x11c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d05d      	beq.n	8005e40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d84:	e02e      	b.n	8005de4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d86:	4b34      	ldr	r3, [pc, #208]	@ (8005e58 <xTaskResumeAll+0x120>)
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3318      	adds	r3, #24
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff fa83 	bl	800529e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3304      	adds	r3, #4
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7ff fa7e 	bl	800529e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	2201      	movs	r2, #1
 8005da8:	409a      	lsls	r2, r3
 8005daa:	4b2c      	ldr	r3, [pc, #176]	@ (8005e5c <xTaskResumeAll+0x124>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	4a2a      	ldr	r2, [pc, #168]	@ (8005e5c <xTaskResumeAll+0x124>)
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db8:	4613      	mov	r3, r2
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4a27      	ldr	r2, [pc, #156]	@ (8005e60 <xTaskResumeAll+0x128>)
 8005dc2:	441a      	add	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f7ff fa0a 	bl	80051e4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd4:	4b23      	ldr	r3, [pc, #140]	@ (8005e64 <xTaskResumeAll+0x12c>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d302      	bcc.n	8005de4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005dde:	4b22      	ldr	r3, [pc, #136]	@ (8005e68 <xTaskResumeAll+0x130>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005de4:	4b1c      	ldr	r3, [pc, #112]	@ (8005e58 <xTaskResumeAll+0x120>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1cc      	bne.n	8005d86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005df2:	f000 fb1b 	bl	800642c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005df6:	4b1d      	ldr	r3, [pc, #116]	@ (8005e6c <xTaskResumeAll+0x134>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e02:	f000 f837 	bl	8005e74 <xTaskIncrementTick>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d002      	beq.n	8005e12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e0c:	4b16      	ldr	r3, [pc, #88]	@ (8005e68 <xTaskResumeAll+0x130>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	3b01      	subs	r3, #1
 8005e16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d1f1      	bne.n	8005e02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005e1e:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <xTaskResumeAll+0x134>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e24:	4b10      	ldr	r3, [pc, #64]	@ (8005e68 <xTaskResumeAll+0x130>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e30:	4b0f      	ldr	r3, [pc, #60]	@ (8005e70 <xTaskResumeAll+0x138>)
 8005e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e40:	f000 fe14 	bl	8006a6c <vPortExitCritical>

	return xAlreadyYielded;
 8005e44:	68bb      	ldr	r3, [r7, #8]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	200006bc 	.word	0x200006bc
 8005e54:	20000694 	.word	0x20000694
 8005e58:	20000654 	.word	0x20000654
 8005e5c:	2000069c 	.word	0x2000069c
 8005e60:	20000598 	.word	0x20000598
 8005e64:	20000594 	.word	0x20000594
 8005e68:	200006a8 	.word	0x200006a8
 8005e6c:	200006a4 	.word	0x200006a4
 8005e70:	e000ed04 	.word	0xe000ed04

08005e74 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e7e:	4b4f      	ldr	r3, [pc, #316]	@ (8005fbc <xTaskIncrementTick+0x148>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f040 808f 	bne.w	8005fa6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e88:	4b4d      	ldr	r3, [pc, #308]	@ (8005fc0 <xTaskIncrementTick+0x14c>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e90:	4a4b      	ldr	r2, [pc, #300]	@ (8005fc0 <xTaskIncrementTick+0x14c>)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d121      	bne.n	8005ee0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e9c:	4b49      	ldr	r3, [pc, #292]	@ (8005fc4 <xTaskIncrementTick+0x150>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00b      	beq.n	8005ebe <xTaskIncrementTick+0x4a>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	603b      	str	r3, [r7, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <xTaskIncrementTick+0x46>
 8005ebe:	4b41      	ldr	r3, [pc, #260]	@ (8005fc4 <xTaskIncrementTick+0x150>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	4b40      	ldr	r3, [pc, #256]	@ (8005fc8 <xTaskIncrementTick+0x154>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8005fc4 <xTaskIncrementTick+0x150>)
 8005eca:	6013      	str	r3, [r2, #0]
 8005ecc:	4a3e      	ldr	r2, [pc, #248]	@ (8005fc8 <xTaskIncrementTick+0x154>)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6013      	str	r3, [r2, #0]
 8005ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8005fcc <xTaskIncrementTick+0x158>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	4a3c      	ldr	r2, [pc, #240]	@ (8005fcc <xTaskIncrementTick+0x158>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	f000 faa6 	bl	800642c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8005fd0 <xTaskIncrementTick+0x15c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d348      	bcc.n	8005f7c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eea:	4b36      	ldr	r3, [pc, #216]	@ (8005fc4 <xTaskIncrementTick+0x150>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d104      	bne.n	8005efe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ef4:	4b36      	ldr	r3, [pc, #216]	@ (8005fd0 <xTaskIncrementTick+0x15c>)
 8005ef6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005efa:	601a      	str	r2, [r3, #0]
					break;
 8005efc:	e03e      	b.n	8005f7c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efe:	4b31      	ldr	r3, [pc, #196]	@ (8005fc4 <xTaskIncrementTick+0x150>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f0e:	693a      	ldr	r2, [r7, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d203      	bcs.n	8005f1e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f16:	4a2e      	ldr	r2, [pc, #184]	@ (8005fd0 <xTaskIncrementTick+0x15c>)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f1c:	e02e      	b.n	8005f7c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	3304      	adds	r3, #4
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff f9bb 	bl	800529e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d004      	beq.n	8005f3a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	3318      	adds	r3, #24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff f9b2 	bl	800529e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3e:	2201      	movs	r2, #1
 8005f40:	409a      	lsls	r2, r3
 8005f42:	4b24      	ldr	r3, [pc, #144]	@ (8005fd4 <xTaskIncrementTick+0x160>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4313      	orrs	r3, r2
 8005f48:	4a22      	ldr	r2, [pc, #136]	@ (8005fd4 <xTaskIncrementTick+0x160>)
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4a1f      	ldr	r2, [pc, #124]	@ (8005fd8 <xTaskIncrementTick+0x164>)
 8005f5a:	441a      	add	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	3304      	adds	r3, #4
 8005f60:	4619      	mov	r1, r3
 8005f62:	4610      	mov	r0, r2
 8005f64:	f7ff f93e 	bl	80051e4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fdc <xTaskIncrementTick+0x168>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d3b9      	bcc.n	8005eea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005f76:	2301      	movs	r3, #1
 8005f78:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	e7b6      	b.n	8005eea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f7c:	4b17      	ldr	r3, [pc, #92]	@ (8005fdc <xTaskIncrementTick+0x168>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f82:	4915      	ldr	r1, [pc, #84]	@ (8005fd8 <xTaskIncrementTick+0x164>)
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d901      	bls.n	8005f98 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f94:	2301      	movs	r3, #1
 8005f96:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f98:	4b11      	ldr	r3, [pc, #68]	@ (8005fe0 <xTaskIncrementTick+0x16c>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d007      	beq.n	8005fb0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e004      	b.n	8005fb0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe4 <xTaskIncrementTick+0x170>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3301      	adds	r3, #1
 8005fac:	4a0d      	ldr	r2, [pc, #52]	@ (8005fe4 <xTaskIncrementTick+0x170>)
 8005fae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005fb0:	697b      	ldr	r3, [r7, #20]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	200006bc 	.word	0x200006bc
 8005fc0:	20000698 	.word	0x20000698
 8005fc4:	2000064c 	.word	0x2000064c
 8005fc8:	20000650 	.word	0x20000650
 8005fcc:	200006ac 	.word	0x200006ac
 8005fd0:	200006b4 	.word	0x200006b4
 8005fd4:	2000069c 	.word	0x2000069c
 8005fd8:	20000598 	.word	0x20000598
 8005fdc:	20000594 	.word	0x20000594
 8005fe0:	200006a8 	.word	0x200006a8
 8005fe4:	200006a4 	.word	0x200006a4

08005fe8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fee:	4b27      	ldr	r3, [pc, #156]	@ (800608c <vTaskSwitchContext+0xa4>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ff6:	4b26      	ldr	r3, [pc, #152]	@ (8006090 <vTaskSwitchContext+0xa8>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ffc:	e040      	b.n	8006080 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005ffe:	4b24      	ldr	r3, [pc, #144]	@ (8006090 <vTaskSwitchContext+0xa8>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006004:	4b23      	ldr	r3, [pc, #140]	@ (8006094 <vTaskSwitchContext+0xac>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	fab3 f383 	clz	r3, r3
 8006010:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006012:	7afb      	ldrb	r3, [r7, #11]
 8006014:	f1c3 031f 	rsb	r3, r3, #31
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	491f      	ldr	r1, [pc, #124]	@ (8006098 <vTaskSwitchContext+0xb0>)
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	440b      	add	r3, r1
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <vTaskSwitchContext+0x5e>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	607b      	str	r3, [r7, #4]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <vTaskSwitchContext+0x5a>
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4613      	mov	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	4413      	add	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4a11      	ldr	r2, [pc, #68]	@ (8006098 <vTaskSwitchContext+0xb0>)
 8006052:	4413      	add	r3, r2
 8006054:	613b      	str	r3, [r7, #16]
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	605a      	str	r2, [r3, #4]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	3308      	adds	r3, #8
 8006068:	429a      	cmp	r2, r3
 800606a:	d104      	bne.n	8006076 <vTaskSwitchContext+0x8e>
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	605a      	str	r2, [r3, #4]
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68db      	ldr	r3, [r3, #12]
 800607c:	4a07      	ldr	r2, [pc, #28]	@ (800609c <vTaskSwitchContext+0xb4>)
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	371c      	adds	r7, #28
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	200006bc 	.word	0x200006bc
 8006090:	200006a8 	.word	0x200006a8
 8006094:	2000069c 	.word	0x2000069c
 8006098:	20000598 	.word	0x20000598
 800609c:	20000594 	.word	0x20000594

080060a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	60fb      	str	r3, [r7, #12]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060c8:	4b07      	ldr	r3, [pc, #28]	@ (80060e8 <vTaskPlaceOnEventList+0x48>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3318      	adds	r3, #24
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff f8ab 	bl	800522c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060d6:	2101      	movs	r1, #1
 80060d8:	6838      	ldr	r0, [r7, #0]
 80060da:	f000 faff 	bl	80066dc <prvAddCurrentTaskToDelayedList>
}
 80060de:	bf00      	nop
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000594 	.word	0x20000594

080060ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b086      	sub	sp, #24
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10b      	bne.n	800611a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006106:	f383 8811 	msr	BASEPRI, r3
 800610a:	f3bf 8f6f 	isb	sy
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	60fb      	str	r3, [r7, #12]
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop
 8006118:	e7fd      	b.n	8006116 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3318      	adds	r3, #24
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff f8bd 	bl	800529e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006124:	4b1d      	ldr	r3, [pc, #116]	@ (800619c <xTaskRemoveFromEventList+0xb0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d11c      	bne.n	8006166 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	3304      	adds	r3, #4
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff f8b4 	bl	800529e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613a:	2201      	movs	r2, #1
 800613c:	409a      	lsls	r2, r3
 800613e:	4b18      	ldr	r3, [pc, #96]	@ (80061a0 <xTaskRemoveFromEventList+0xb4>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4313      	orrs	r3, r2
 8006144:	4a16      	ldr	r2, [pc, #88]	@ (80061a0 <xTaskRemoveFromEventList+0xb4>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614c:	4613      	mov	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4a13      	ldr	r2, [pc, #76]	@ (80061a4 <xTaskRemoveFromEventList+0xb8>)
 8006156:	441a      	add	r2, r3
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	3304      	adds	r3, #4
 800615c:	4619      	mov	r1, r3
 800615e:	4610      	mov	r0, r2
 8006160:	f7ff f840 	bl	80051e4 <vListInsertEnd>
 8006164:	e005      	b.n	8006172 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3318      	adds	r3, #24
 800616a:	4619      	mov	r1, r3
 800616c:	480e      	ldr	r0, [pc, #56]	@ (80061a8 <xTaskRemoveFromEventList+0xbc>)
 800616e:	f7ff f839 	bl	80051e4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006176:	4b0d      	ldr	r3, [pc, #52]	@ (80061ac <xTaskRemoveFromEventList+0xc0>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	429a      	cmp	r2, r3
 800617e:	d905      	bls.n	800618c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006184:	4b0a      	ldr	r3, [pc, #40]	@ (80061b0 <xTaskRemoveFromEventList+0xc4>)
 8006186:	2201      	movs	r2, #1
 8006188:	601a      	str	r2, [r3, #0]
 800618a:	e001      	b.n	8006190 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006190:	697b      	ldr	r3, [r7, #20]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3718      	adds	r7, #24
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200006bc 	.word	0x200006bc
 80061a0:	2000069c 	.word	0x2000069c
 80061a4:	20000598 	.word	0x20000598
 80061a8:	20000654 	.word	0x20000654
 80061ac:	20000594 	.word	0x20000594
 80061b0:	200006a8 	.word	0x200006a8

080061b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061bc:	4b06      	ldr	r3, [pc, #24]	@ (80061d8 <vTaskInternalSetTimeOutState+0x24>)
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061c4:	4b05      	ldr	r3, [pc, #20]	@ (80061dc <vTaskInternalSetTimeOutState+0x28>)
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	605a      	str	r2, [r3, #4]
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	200006ac 	.word	0x200006ac
 80061dc:	20000698 	.word	0x20000698

080061e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10b      	bne.n	8006208 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	613b      	str	r3, [r7, #16]
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10b      	bne.n	8006226 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	60fb      	str	r3, [r7, #12]
}
 8006220:	bf00      	nop
 8006222:	bf00      	nop
 8006224:	e7fd      	b.n	8006222 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006226:	f000 fbef 	bl	8006a08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800622a:	4b1d      	ldr	r3, [pc, #116]	@ (80062a0 <xTaskCheckForTimeOut+0xc0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006242:	d102      	bne.n	800624a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006244:	2300      	movs	r3, #0
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	e023      	b.n	8006292 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b15      	ldr	r3, [pc, #84]	@ (80062a4 <xTaskCheckForTimeOut+0xc4>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d007      	beq.n	8006266 <xTaskCheckForTimeOut+0x86>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	69ba      	ldr	r2, [r7, #24]
 800625c:	429a      	cmp	r2, r3
 800625e:	d302      	bcc.n	8006266 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006260:	2301      	movs	r3, #1
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	e015      	b.n	8006292 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	429a      	cmp	r2, r3
 800626e:	d20b      	bcs.n	8006288 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	1ad2      	subs	r2, r2, r3
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff ff99 	bl	80061b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006282:	2300      	movs	r3, #0
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	e004      	b.n	8006292 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800628e:	2301      	movs	r3, #1
 8006290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006292:	f000 fbeb 	bl	8006a6c <vPortExitCritical>

	return xReturn;
 8006296:	69fb      	ldr	r3, [r7, #28]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3720      	adds	r7, #32
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000698 	.word	0x20000698
 80062a4:	200006ac 	.word	0x200006ac

080062a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062ac:	4b03      	ldr	r3, [pc, #12]	@ (80062bc <vTaskMissedYield+0x14>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	601a      	str	r2, [r3, #0]
}
 80062b2:	bf00      	nop
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	200006a8 	.word	0x200006a8

080062c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062c8:	f000 f852 	bl	8006370 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062cc:	4b06      	ldr	r3, [pc, #24]	@ (80062e8 <prvIdleTask+0x28>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d9f9      	bls.n	80062c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062d4:	4b05      	ldr	r3, [pc, #20]	@ (80062ec <prvIdleTask+0x2c>)
 80062d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062da:	601a      	str	r2, [r3, #0]
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062e4:	e7f0      	b.n	80062c8 <prvIdleTask+0x8>
 80062e6:	bf00      	nop
 80062e8:	20000598 	.word	0x20000598
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062f6:	2300      	movs	r3, #0
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	e00c      	b.n	8006316 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	4613      	mov	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4413      	add	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4a12      	ldr	r2, [pc, #72]	@ (8006350 <prvInitialiseTaskLists+0x60>)
 8006308:	4413      	add	r3, r2
 800630a:	4618      	mov	r0, r3
 800630c:	f7fe ff3d 	bl	800518a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3301      	adds	r3, #1
 8006314:	607b      	str	r3, [r7, #4]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b06      	cmp	r3, #6
 800631a:	d9ef      	bls.n	80062fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800631c:	480d      	ldr	r0, [pc, #52]	@ (8006354 <prvInitialiseTaskLists+0x64>)
 800631e:	f7fe ff34 	bl	800518a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006322:	480d      	ldr	r0, [pc, #52]	@ (8006358 <prvInitialiseTaskLists+0x68>)
 8006324:	f7fe ff31 	bl	800518a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006328:	480c      	ldr	r0, [pc, #48]	@ (800635c <prvInitialiseTaskLists+0x6c>)
 800632a:	f7fe ff2e 	bl	800518a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800632e:	480c      	ldr	r0, [pc, #48]	@ (8006360 <prvInitialiseTaskLists+0x70>)
 8006330:	f7fe ff2b 	bl	800518a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006334:	480b      	ldr	r0, [pc, #44]	@ (8006364 <prvInitialiseTaskLists+0x74>)
 8006336:	f7fe ff28 	bl	800518a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800633a:	4b0b      	ldr	r3, [pc, #44]	@ (8006368 <prvInitialiseTaskLists+0x78>)
 800633c:	4a05      	ldr	r2, [pc, #20]	@ (8006354 <prvInitialiseTaskLists+0x64>)
 800633e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006340:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <prvInitialiseTaskLists+0x7c>)
 8006342:	4a05      	ldr	r2, [pc, #20]	@ (8006358 <prvInitialiseTaskLists+0x68>)
 8006344:	601a      	str	r2, [r3, #0]
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000598 	.word	0x20000598
 8006354:	20000624 	.word	0x20000624
 8006358:	20000638 	.word	0x20000638
 800635c:	20000654 	.word	0x20000654
 8006360:	20000668 	.word	0x20000668
 8006364:	20000680 	.word	0x20000680
 8006368:	2000064c 	.word	0x2000064c
 800636c:	20000650 	.word	0x20000650

08006370 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006376:	e019      	b.n	80063ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006378:	f000 fb46 	bl	8006a08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800637c:	4b10      	ldr	r3, [pc, #64]	@ (80063c0 <prvCheckTasksWaitingTermination+0x50>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3304      	adds	r3, #4
 8006388:	4618      	mov	r0, r3
 800638a:	f7fe ff88 	bl	800529e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800638e:	4b0d      	ldr	r3, [pc, #52]	@ (80063c4 <prvCheckTasksWaitingTermination+0x54>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3b01      	subs	r3, #1
 8006394:	4a0b      	ldr	r2, [pc, #44]	@ (80063c4 <prvCheckTasksWaitingTermination+0x54>)
 8006396:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006398:	4b0b      	ldr	r3, [pc, #44]	@ (80063c8 <prvCheckTasksWaitingTermination+0x58>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	3b01      	subs	r3, #1
 800639e:	4a0a      	ldr	r2, [pc, #40]	@ (80063c8 <prvCheckTasksWaitingTermination+0x58>)
 80063a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063a2:	f000 fb63 	bl	8006a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f810 	bl	80063cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ac:	4b06      	ldr	r3, [pc, #24]	@ (80063c8 <prvCheckTasksWaitingTermination+0x58>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e1      	bne.n	8006378 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000668 	.word	0x20000668
 80063c4:	20000694 	.word	0x20000694
 80063c8:	2000067c 	.word	0x2000067c

080063cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d108      	bne.n	80063f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063e2:	4618      	mov	r0, r3
 80063e4:	f000 fd00 	bl	8006de8 <vPortFree>
				vPortFree( pxTCB );
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fcfd 	bl	8006de8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063ee:	e019      	b.n	8006424 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d103      	bne.n	8006402 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fcf4 	bl	8006de8 <vPortFree>
	}
 8006400:	e010      	b.n	8006424 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006408:	2b02      	cmp	r3, #2
 800640a:	d00b      	beq.n	8006424 <prvDeleteTCB+0x58>
	__asm volatile
 800640c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006410:	f383 8811 	msr	BASEPRI, r3
 8006414:	f3bf 8f6f 	isb	sy
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	60fb      	str	r3, [r7, #12]
}
 800641e:	bf00      	nop
 8006420:	bf00      	nop
 8006422:	e7fd      	b.n	8006420 <prvDeleteTCB+0x54>
	}
 8006424:	bf00      	nop
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006432:	4b0c      	ldr	r3, [pc, #48]	@ (8006464 <prvResetNextTaskUnblockTime+0x38>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800643c:	4b0a      	ldr	r3, [pc, #40]	@ (8006468 <prvResetNextTaskUnblockTime+0x3c>)
 800643e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006442:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006444:	e008      	b.n	8006458 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006446:	4b07      	ldr	r3, [pc, #28]	@ (8006464 <prvResetNextTaskUnblockTime+0x38>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4a04      	ldr	r2, [pc, #16]	@ (8006468 <prvResetNextTaskUnblockTime+0x3c>)
 8006456:	6013      	str	r3, [r2, #0]
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	2000064c 	.word	0x2000064c
 8006468:	200006b4 	.word	0x200006b4

0800646c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006472:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <xTaskGetSchedulerState+0x34>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800647a:	2301      	movs	r3, #1
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	e008      	b.n	8006492 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006480:	4b08      	ldr	r3, [pc, #32]	@ (80064a4 <xTaskGetSchedulerState+0x38>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006488:	2302      	movs	r3, #2
 800648a:	607b      	str	r3, [r7, #4]
 800648c:	e001      	b.n	8006492 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800648e:	2300      	movs	r3, #0
 8006490:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006492:	687b      	ldr	r3, [r7, #4]
	}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	200006a0 	.word	0x200006a0
 80064a4:	200006bc 	.word	0x200006bc

080064a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80064b4:	2300      	movs	r3, #0
 80064b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d05e      	beq.n	800657c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c2:	4b31      	ldr	r3, [pc, #196]	@ (8006588 <xTaskPriorityInherit+0xe0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d24e      	bcs.n	800656a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	db06      	blt.n	80064e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d4:	4b2c      	ldr	r3, [pc, #176]	@ (8006588 <xTaskPriorityInherit+0xe0>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064da:	f1c3 0207 	rsb	r2, r3, #7
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	6959      	ldr	r1, [r3, #20]
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4a26      	ldr	r2, [pc, #152]	@ (800658c <xTaskPriorityInherit+0xe4>)
 80064f4:	4413      	add	r3, r2
 80064f6:	4299      	cmp	r1, r3
 80064f8:	d12f      	bne.n	800655a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	3304      	adds	r3, #4
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fe fecd 	bl	800529e <uxListRemove>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650e:	2201      	movs	r2, #1
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43da      	mvns	r2, r3
 8006516:	4b1e      	ldr	r3, [pc, #120]	@ (8006590 <xTaskPriorityInherit+0xe8>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4013      	ands	r3, r2
 800651c:	4a1c      	ldr	r2, [pc, #112]	@ (8006590 <xTaskPriorityInherit+0xe8>)
 800651e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006520:	4b19      	ldr	r3, [pc, #100]	@ (8006588 <xTaskPriorityInherit+0xe0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	2201      	movs	r2, #1
 8006530:	409a      	lsls	r2, r3
 8006532:	4b17      	ldr	r3, [pc, #92]	@ (8006590 <xTaskPriorityInherit+0xe8>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	4a15      	ldr	r2, [pc, #84]	@ (8006590 <xTaskPriorityInherit+0xe8>)
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006540:	4613      	mov	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	009b      	lsls	r3, r3, #2
 8006548:	4a10      	ldr	r2, [pc, #64]	@ (800658c <xTaskPriorityInherit+0xe4>)
 800654a:	441a      	add	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	3304      	adds	r3, #4
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f7fe fe46 	bl	80051e4 <vListInsertEnd>
 8006558:	e004      	b.n	8006564 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800655a:	4b0b      	ldr	r3, [pc, #44]	@ (8006588 <xTaskPriorityInherit+0xe0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e008      	b.n	800657c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800656e:	4b06      	ldr	r3, [pc, #24]	@ (8006588 <xTaskPriorityInherit+0xe0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006574:	429a      	cmp	r2, r3
 8006576:	d201      	bcs.n	800657c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006578:	2301      	movs	r3, #1
 800657a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800657c:	68fb      	ldr	r3, [r7, #12]
	}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
 8006586:	bf00      	nop
 8006588:	20000594 	.word	0x20000594
 800658c:	20000598 	.word	0x20000598
 8006590:	2000069c 	.word	0x2000069c

08006594 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80065a2:	2301      	movs	r3, #1
 80065a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d079      	beq.n	80066a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80065ac:	69bb      	ldr	r3, [r7, #24]
 80065ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10b      	bne.n	80065cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	60fb      	str	r3, [r7, #12]
}
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	e7fd      	b.n	80065c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d902      	bls.n	80065dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	e002      	b.n	80065e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d059      	beq.n	80066a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d154      	bne.n	80066a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065f6:	4b2c      	ldr	r3, [pc, #176]	@ (80066a8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d10b      	bne.n	8006618 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	60bb      	str	r3, [r7, #8]
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	e7fd      	b.n	8006614 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	69fa      	ldr	r2, [r7, #28]
 8006622:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	2b00      	cmp	r3, #0
 800662a:	db04      	blt.n	8006636 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f1c3 0207 	rsb	r2, r3, #7
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006636:	69bb      	ldr	r3, [r7, #24]
 8006638:	6959      	ldr	r1, [r3, #20]
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4613      	mov	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4a19      	ldr	r2, [pc, #100]	@ (80066ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006646:	4413      	add	r3, r2
 8006648:	4299      	cmp	r1, r3
 800664a:	d129      	bne.n	80066a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800664c:	69bb      	ldr	r3, [r7, #24]
 800664e:	3304      	adds	r3, #4
 8006650:	4618      	mov	r0, r3
 8006652:	f7fe fe24 	bl	800529e <uxListRemove>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d10a      	bne.n	8006672 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006660:	2201      	movs	r2, #1
 8006662:	fa02 f303 	lsl.w	r3, r2, r3
 8006666:	43da      	mvns	r2, r3
 8006668:	4b11      	ldr	r3, [pc, #68]	@ (80066b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4013      	ands	r3, r2
 800666e:	4a10      	ldr	r2, [pc, #64]	@ (80066b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006670:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	2201      	movs	r2, #1
 8006678:	409a      	lsls	r2, r3
 800667a:	4b0d      	ldr	r3, [pc, #52]	@ (80066b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4313      	orrs	r3, r2
 8006680:	4a0b      	ldr	r2, [pc, #44]	@ (80066b0 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006682:	6013      	str	r3, [r2, #0]
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006688:	4613      	mov	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4413      	add	r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4a06      	ldr	r2, [pc, #24]	@ (80066ac <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006692:	441a      	add	r2, r3
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	3304      	adds	r3, #4
 8006698:	4619      	mov	r1, r3
 800669a:	4610      	mov	r0, r2
 800669c:	f7fe fda2 	bl	80051e4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066a0:	bf00      	nop
 80066a2:	3720      	adds	r7, #32
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20000594 	.word	0x20000594
 80066ac:	20000598 	.word	0x20000598
 80066b0:	2000069c 	.word	0x2000069c

080066b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80066b8:	4b07      	ldr	r3, [pc, #28]	@ (80066d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d004      	beq.n	80066ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80066c0:	4b05      	ldr	r3, [pc, #20]	@ (80066d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066c6:	3201      	adds	r2, #1
 80066c8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80066ca:	4b03      	ldr	r3, [pc, #12]	@ (80066d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80066cc:	681b      	ldr	r3, [r3, #0]
	}
 80066ce:	4618      	mov	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	20000594 	.word	0x20000594

080066dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066e6:	4b29      	ldr	r3, [pc, #164]	@ (800678c <prvAddCurrentTaskToDelayedList+0xb0>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ec:	4b28      	ldr	r3, [pc, #160]	@ (8006790 <prvAddCurrentTaskToDelayedList+0xb4>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4618      	mov	r0, r3
 80066f4:	f7fe fdd3 	bl	800529e <uxListRemove>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80066fe:	4b24      	ldr	r3, [pc, #144]	@ (8006790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006704:	2201      	movs	r2, #1
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43da      	mvns	r2, r3
 800670c:	4b21      	ldr	r3, [pc, #132]	@ (8006794 <prvAddCurrentTaskToDelayedList+0xb8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4013      	ands	r3, r2
 8006712:	4a20      	ldr	r2, [pc, #128]	@ (8006794 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006714:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800671c:	d10a      	bne.n	8006734 <prvAddCurrentTaskToDelayedList+0x58>
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006724:	4b1a      	ldr	r3, [pc, #104]	@ (8006790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3304      	adds	r3, #4
 800672a:	4619      	mov	r1, r3
 800672c:	481a      	ldr	r0, [pc, #104]	@ (8006798 <prvAddCurrentTaskToDelayedList+0xbc>)
 800672e:	f7fe fd59 	bl	80051e4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006732:	e026      	b.n	8006782 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4413      	add	r3, r2
 800673a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800673c:	4b14      	ldr	r3, [pc, #80]	@ (8006790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006744:	68ba      	ldr	r2, [r7, #8]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	429a      	cmp	r2, r3
 800674a:	d209      	bcs.n	8006760 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800674c:	4b13      	ldr	r3, [pc, #76]	@ (800679c <prvAddCurrentTaskToDelayedList+0xc0>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	4b0f      	ldr	r3, [pc, #60]	@ (8006790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3304      	adds	r3, #4
 8006756:	4619      	mov	r1, r3
 8006758:	4610      	mov	r0, r2
 800675a:	f7fe fd67 	bl	800522c <vListInsert>
}
 800675e:	e010      	b.n	8006782 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006760:	4b0f      	ldr	r3, [pc, #60]	@ (80067a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	4b0a      	ldr	r3, [pc, #40]	@ (8006790 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f7fe fd5d 	bl	800522c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006772:	4b0c      	ldr	r3, [pc, #48]	@ (80067a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	429a      	cmp	r2, r3
 800677a:	d202      	bcs.n	8006782 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800677c:	4a09      	ldr	r2, [pc, #36]	@ (80067a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	6013      	str	r3, [r2, #0]
}
 8006782:	bf00      	nop
 8006784:	3710      	adds	r7, #16
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000698 	.word	0x20000698
 8006790:	20000594 	.word	0x20000594
 8006794:	2000069c 	.word	0x2000069c
 8006798:	20000680 	.word	0x20000680
 800679c:	20000650 	.word	0x20000650
 80067a0:	2000064c 	.word	0x2000064c
 80067a4:	200006b4 	.word	0x200006b4

080067a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3b04      	subs	r3, #4
 80067b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80067c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	3b04      	subs	r3, #4
 80067c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f023 0201 	bic.w	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3b04      	subs	r3, #4
 80067d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067d8:	4a0c      	ldr	r2, [pc, #48]	@ (800680c <pxPortInitialiseStack+0x64>)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	3b14      	subs	r3, #20
 80067e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f06f 0202 	mvn.w	r2, #2
 80067f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3b20      	subs	r3, #32
 80067fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067fe:	68fb      	ldr	r3, [r7, #12]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	08006811 	.word	0x08006811

08006810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006810:	b480      	push	{r7}
 8006812:	b085      	sub	sp, #20
 8006814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006816:	2300      	movs	r3, #0
 8006818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800681a:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <prvTaskExitError+0x58>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006822:	d00b      	beq.n	800683c <prvTaskExitError+0x2c>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	60fb      	str	r3, [r7, #12]
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <prvTaskExitError+0x28>
	__asm volatile
 800683c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	60bb      	str	r3, [r7, #8]
}
 800684e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006850:	bf00      	nop
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0fc      	beq.n	8006852 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	20000108 	.word	0x20000108
 800686c:	00000000 	.word	0x00000000

08006870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006870:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <pxCurrentTCBConst2>)
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	6808      	ldr	r0, [r1, #0]
 8006876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800687a:	f380 8809 	msr	PSP, r0
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8811 	msr	BASEPRI, r0
 800688a:	4770      	bx	lr
 800688c:	f3af 8000 	nop.w

08006890 <pxCurrentTCBConst2>:
 8006890:	20000594 	.word	0x20000594
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006898:	4808      	ldr	r0, [pc, #32]	@ (80068bc <prvPortStartFirstTask+0x24>)
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	6800      	ldr	r0, [r0, #0]
 800689e:	f380 8808 	msr	MSP, r0
 80068a2:	f04f 0000 	mov.w	r0, #0
 80068a6:	f380 8814 	msr	CONTROL, r0
 80068aa:	b662      	cpsie	i
 80068ac:	b661      	cpsie	f
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	df00      	svc	0
 80068b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068ba:	bf00      	nop
 80068bc:	e000ed08 	.word	0xe000ed08

080068c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80068c6:	4b47      	ldr	r3, [pc, #284]	@ (80069e4 <xPortStartScheduler+0x124>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a47      	ldr	r2, [pc, #284]	@ (80069e8 <xPortStartScheduler+0x128>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d10b      	bne.n	80068e8 <xPortStartScheduler+0x28>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	613b      	str	r3, [r7, #16]
}
 80068e2:	bf00      	nop
 80068e4:	bf00      	nop
 80068e6:	e7fd      	b.n	80068e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80068e8:	4b3e      	ldr	r3, [pc, #248]	@ (80069e4 <xPortStartScheduler+0x124>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a3f      	ldr	r2, [pc, #252]	@ (80069ec <xPortStartScheduler+0x12c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d10b      	bne.n	800690a <xPortStartScheduler+0x4a>
	__asm volatile
 80068f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f6:	f383 8811 	msr	BASEPRI, r3
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	f3bf 8f4f 	dsb	sy
 8006902:	60fb      	str	r3, [r7, #12]
}
 8006904:	bf00      	nop
 8006906:	bf00      	nop
 8006908:	e7fd      	b.n	8006906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800690a:	4b39      	ldr	r3, [pc, #228]	@ (80069f0 <xPortStartScheduler+0x130>)
 800690c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	b2db      	uxtb	r3, r3
 8006914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	22ff      	movs	r2, #255	@ 0xff
 800691a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	b2db      	uxtb	r3, r3
 8006922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	b2db      	uxtb	r3, r3
 8006928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800692c:	b2da      	uxtb	r2, r3
 800692e:	4b31      	ldr	r3, [pc, #196]	@ (80069f4 <xPortStartScheduler+0x134>)
 8006930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006932:	4b31      	ldr	r3, [pc, #196]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006934:	2207      	movs	r2, #7
 8006936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006938:	e009      	b.n	800694e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800693a:	4b2f      	ldr	r3, [pc, #188]	@ (80069f8 <xPortStartScheduler+0x138>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	3b01      	subs	r3, #1
 8006940:	4a2d      	ldr	r2, [pc, #180]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	b2db      	uxtb	r3, r3
 800694c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800694e:	78fb      	ldrb	r3, [r7, #3]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d0ef      	beq.n	800693a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800695a:	4b27      	ldr	r3, [pc, #156]	@ (80069f8 <xPortStartScheduler+0x138>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1c3 0307 	rsb	r3, r3, #7
 8006962:	2b04      	cmp	r3, #4
 8006964:	d00b      	beq.n	800697e <xPortStartScheduler+0xbe>
	__asm volatile
 8006966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	60bb      	str	r3, [r7, #8]
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	e7fd      	b.n	800697a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800697e:	4b1e      	ldr	r3, [pc, #120]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	021b      	lsls	r3, r3, #8
 8006984:	4a1c      	ldr	r2, [pc, #112]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006988:	4b1b      	ldr	r3, [pc, #108]	@ (80069f8 <xPortStartScheduler+0x138>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006990:	4a19      	ldr	r2, [pc, #100]	@ (80069f8 <xPortStartScheduler+0x138>)
 8006992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	b2da      	uxtb	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800699c:	4b17      	ldr	r3, [pc, #92]	@ (80069fc <xPortStartScheduler+0x13c>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a16      	ldr	r2, [pc, #88]	@ (80069fc <xPortStartScheduler+0x13c>)
 80069a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80069a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069a8:	4b14      	ldr	r3, [pc, #80]	@ (80069fc <xPortStartScheduler+0x13c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a13      	ldr	r2, [pc, #76]	@ (80069fc <xPortStartScheduler+0x13c>)
 80069ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80069b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069b4:	f000 f8da 	bl	8006b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069b8:	4b11      	ldr	r3, [pc, #68]	@ (8006a00 <xPortStartScheduler+0x140>)
 80069ba:	2200      	movs	r2, #0
 80069bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80069be:	f000 f8f9 	bl	8006bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80069c2:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <xPortStartScheduler+0x144>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006a04 <xPortStartScheduler+0x144>)
 80069c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80069cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069ce:	f7ff ff63 	bl	8006898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069d2:	f7ff fb09 	bl	8005fe8 <vTaskSwitchContext>
	prvTaskExitError();
 80069d6:	f7ff ff1b 	bl	8006810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	e000ed00 	.word	0xe000ed00
 80069e8:	410fc271 	.word	0x410fc271
 80069ec:	410fc270 	.word	0x410fc270
 80069f0:	e000e400 	.word	0xe000e400
 80069f4:	200006c0 	.word	0x200006c0
 80069f8:	200006c4 	.word	0x200006c4
 80069fc:	e000ed20 	.word	0xe000ed20
 8006a00:	20000108 	.word	0x20000108
 8006a04:	e000ef34 	.word	0xe000ef34

08006a08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a12:	f383 8811 	msr	BASEPRI, r3
 8006a16:	f3bf 8f6f 	isb	sy
 8006a1a:	f3bf 8f4f 	dsb	sy
 8006a1e:	607b      	str	r3, [r7, #4]
}
 8006a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a22:	4b10      	ldr	r3, [pc, #64]	@ (8006a64 <vPortEnterCritical+0x5c>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	3301      	adds	r3, #1
 8006a28:	4a0e      	ldr	r2, [pc, #56]	@ (8006a64 <vPortEnterCritical+0x5c>)
 8006a2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <vPortEnterCritical+0x5c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d110      	bne.n	8006a56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a34:	4b0c      	ldr	r3, [pc, #48]	@ (8006a68 <vPortEnterCritical+0x60>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <vPortEnterCritical+0x4e>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	603b      	str	r3, [r7, #0]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <vPortEnterCritical+0x4a>
	}
}
 8006a56:	bf00      	nop
 8006a58:	370c      	adds	r7, #12
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	20000108 	.word	0x20000108
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a72:	4b12      	ldr	r3, [pc, #72]	@ (8006abc <vPortExitCritical+0x50>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10b      	bne.n	8006a92 <vPortExitCritical+0x26>
	__asm volatile
 8006a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7e:	f383 8811 	msr	BASEPRI, r3
 8006a82:	f3bf 8f6f 	isb	sy
 8006a86:	f3bf 8f4f 	dsb	sy
 8006a8a:	607b      	str	r3, [r7, #4]
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	e7fd      	b.n	8006a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a92:	4b0a      	ldr	r3, [pc, #40]	@ (8006abc <vPortExitCritical+0x50>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	3b01      	subs	r3, #1
 8006a98:	4a08      	ldr	r2, [pc, #32]	@ (8006abc <vPortExitCritical+0x50>)
 8006a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a9c:	4b07      	ldr	r3, [pc, #28]	@ (8006abc <vPortExitCritical+0x50>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <vPortExitCritical+0x44>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	f383 8811 	msr	BASEPRI, r3
}
 8006aae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr
 8006abc:	20000108 	.word	0x20000108

08006ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ac0:	f3ef 8009 	mrs	r0, PSP
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	4b15      	ldr	r3, [pc, #84]	@ (8006b20 <pxCurrentTCBConst>)
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	f01e 0f10 	tst.w	lr, #16
 8006ad0:	bf08      	it	eq
 8006ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	6010      	str	r0, [r2, #0]
 8006adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006ae4:	f380 8811 	msr	BASEPRI, r0
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f7ff fa7a 	bl	8005fe8 <vTaskSwitchContext>
 8006af4:	f04f 0000 	mov.w	r0, #0
 8006af8:	f380 8811 	msr	BASEPRI, r0
 8006afc:	bc09      	pop	{r0, r3}
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	6808      	ldr	r0, [r1, #0]
 8006b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b06:	f01e 0f10 	tst.w	lr, #16
 8006b0a:	bf08      	it	eq
 8006b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006b10:	f380 8809 	msr	PSP, r0
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	f3af 8000 	nop.w

08006b20 <pxCurrentTCBConst>:
 8006b20:	20000594 	.word	0x20000594
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop

08006b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	607b      	str	r3, [r7, #4]
}
 8006b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b42:	f7ff f997 	bl	8005e74 <xTaskIncrementTick>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	@ (8006b68 <xPortSysTickHandler+0x40>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <vPortSetupTimerInterrupt+0x34>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba4 <vPortSetupTimerInterrupt+0x38>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba8 <vPortSetupTimerInterrupt+0x3c>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a0a      	ldr	r2, [pc, #40]	@ (8006bac <vPortSetupTimerInterrupt+0x40>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	099b      	lsrs	r3, r3, #6
 8006b88:	4a09      	ldr	r2, [pc, #36]	@ (8006bb0 <vPortSetupTimerInterrupt+0x44>)
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b8e:	4b04      	ldr	r3, [pc, #16]	@ (8006ba0 <vPortSetupTimerInterrupt+0x34>)
 8006b90:	2207      	movs	r2, #7
 8006b92:	601a      	str	r2, [r3, #0]
}
 8006b94:	bf00      	nop
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	e000e010 	.word	0xe000e010
 8006ba4:	e000e018 	.word	0xe000e018
 8006ba8:	200000fc 	.word	0x200000fc
 8006bac:	10624dd3 	.word	0x10624dd3
 8006bb0:	e000e014 	.word	0xe000e014

08006bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006bc4 <vPortEnableVFP+0x10>
 8006bb8:	6801      	ldr	r1, [r0, #0]
 8006bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006bbe:	6001      	str	r1, [r0, #0]
 8006bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006bc2:	bf00      	nop
 8006bc4:	e000ed88 	.word	0xe000ed88

08006bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006bce:	f3ef 8305 	mrs	r3, IPSR
 8006bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b0f      	cmp	r3, #15
 8006bd8:	d915      	bls.n	8006c06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006bda:	4a18      	ldr	r2, [pc, #96]	@ (8006c3c <vPortValidateInterruptPriority+0x74>)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4413      	add	r3, r2
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006be4:	4b16      	ldr	r3, [pc, #88]	@ (8006c40 <vPortValidateInterruptPriority+0x78>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	7afa      	ldrb	r2, [r7, #11]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d20b      	bcs.n	8006c06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	607b      	str	r3, [r7, #4]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006c06:	4b0f      	ldr	r3, [pc, #60]	@ (8006c44 <vPortValidateInterruptPriority+0x7c>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c48 <vPortValidateInterruptPriority+0x80>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d90b      	bls.n	8006c2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1a:	f383 8811 	msr	BASEPRI, r3
 8006c1e:	f3bf 8f6f 	isb	sy
 8006c22:	f3bf 8f4f 	dsb	sy
 8006c26:	603b      	str	r3, [r7, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	bf00      	nop
 8006c2c:	e7fd      	b.n	8006c2a <vPortValidateInterruptPriority+0x62>
	}
 8006c2e:	bf00      	nop
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	e000e3f0 	.word	0xe000e3f0
 8006c40:	200006c0 	.word	0x200006c0
 8006c44:	e000ed0c 	.word	0xe000ed0c
 8006c48:	200006c4 	.word	0x200006c4

08006c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	@ 0x28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006c58:	f7ff f860 	bl	8005d1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8006dd0 <pvPortMalloc+0x184>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d101      	bne.n	8006c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c64:	f000 f924 	bl	8006eb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c68:	4b5a      	ldr	r3, [pc, #360]	@ (8006dd4 <pvPortMalloc+0x188>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f040 8095 	bne.w	8006da0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01e      	beq.n	8006cba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4413      	add	r3, r2
 8006c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f003 0307 	and.w	r3, r3, #7
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d015      	beq.n	8006cba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f023 0307 	bic.w	r3, r3, #7
 8006c94:	3308      	adds	r3, #8
 8006c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f003 0307 	and.w	r3, r3, #7
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <pvPortMalloc+0x6e>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	617b      	str	r3, [r7, #20]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d06f      	beq.n	8006da0 <pvPortMalloc+0x154>
 8006cc0:	4b45      	ldr	r3, [pc, #276]	@ (8006dd8 <pvPortMalloc+0x18c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d86a      	bhi.n	8006da0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006cca:	4b44      	ldr	r3, [pc, #272]	@ (8006ddc <pvPortMalloc+0x190>)
 8006ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006cce:	4b43      	ldr	r3, [pc, #268]	@ (8006ddc <pvPortMalloc+0x190>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006cd4:	e004      	b.n	8006ce0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d903      	bls.n	8006cf2 <pvPortMalloc+0xa6>
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d1f1      	bne.n	8006cd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006cf2:	4b37      	ldr	r3, [pc, #220]	@ (8006dd0 <pvPortMalloc+0x184>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d051      	beq.n	8006da0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006cfc:	6a3b      	ldr	r3, [r7, #32]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2208      	movs	r2, #8
 8006d02:	4413      	add	r3, r2
 8006d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	1ad2      	subs	r2, r2, r3
 8006d16:	2308      	movs	r3, #8
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d920      	bls.n	8006d60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4413      	add	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d26:	69bb      	ldr	r3, [r7, #24]
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00b      	beq.n	8006d48 <pvPortMalloc+0xfc>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	613b      	str	r3, [r7, #16]
}
 8006d42:	bf00      	nop
 8006d44:	bf00      	nop
 8006d46:	e7fd      	b.n	8006d44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	1ad2      	subs	r2, r2, r3
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006d5a:	69b8      	ldr	r0, [r7, #24]
 8006d5c:	f000 f90a 	bl	8006f74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006d60:	4b1d      	ldr	r3, [pc, #116]	@ (8006dd8 <pvPortMalloc+0x18c>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8006dd8 <pvPortMalloc+0x18c>)
 8006d6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8006dd8 <pvPortMalloc+0x18c>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	4b1b      	ldr	r3, [pc, #108]	@ (8006de0 <pvPortMalloc+0x194>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d203      	bcs.n	8006d82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d7a:	4b17      	ldr	r3, [pc, #92]	@ (8006dd8 <pvPortMalloc+0x18c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a18      	ldr	r2, [pc, #96]	@ (8006de0 <pvPortMalloc+0x194>)
 8006d80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	4b13      	ldr	r3, [pc, #76]	@ (8006dd4 <pvPortMalloc+0x188>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d96:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <pvPortMalloc+0x198>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	3301      	adds	r3, #1
 8006d9c:	4a11      	ldr	r2, [pc, #68]	@ (8006de4 <pvPortMalloc+0x198>)
 8006d9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006da0:	f7fe ffca 	bl	8005d38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f003 0307 	and.w	r3, r3, #7
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00b      	beq.n	8006dc6 <pvPortMalloc+0x17a>
	__asm volatile
 8006dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60fb      	str	r3, [r7, #12]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <pvPortMalloc+0x176>
	return pvReturn;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3728      	adds	r7, #40	@ 0x28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20002de0 	.word	0x20002de0
 8006dd4:	20002df4 	.word	0x20002df4
 8006dd8:	20002de4 	.word	0x20002de4
 8006ddc:	20002dd8 	.word	0x20002dd8
 8006de0:	20002de8 	.word	0x20002de8
 8006de4:	20002dec 	.word	0x20002dec

08006de8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b086      	sub	sp, #24
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d04f      	beq.n	8006e9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006dfa:	2308      	movs	r3, #8
 8006dfc:	425b      	negs	r3, r3
 8006dfe:	697a      	ldr	r2, [r7, #20]
 8006e00:	4413      	add	r3, r2
 8006e02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	685a      	ldr	r2, [r3, #4]
 8006e0c:	4b25      	ldr	r3, [pc, #148]	@ (8006ea4 <vPortFree+0xbc>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10b      	bne.n	8006e2e <vPortFree+0x46>
	__asm volatile
 8006e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e1a:	f383 8811 	msr	BASEPRI, r3
 8006e1e:	f3bf 8f6f 	isb	sy
 8006e22:	f3bf 8f4f 	dsb	sy
 8006e26:	60fb      	str	r3, [r7, #12]
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	e7fd      	b.n	8006e2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00b      	beq.n	8006e4e <vPortFree+0x66>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60bb      	str	r3, [r7, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	685a      	ldr	r2, [r3, #4]
 8006e52:	4b14      	ldr	r3, [pc, #80]	@ (8006ea4 <vPortFree+0xbc>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01e      	beq.n	8006e9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11a      	bne.n	8006e9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	4b0e      	ldr	r3, [pc, #56]	@ (8006ea4 <vPortFree+0xbc>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	43db      	mvns	r3, r3
 8006e6e:	401a      	ands	r2, r3
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006e74:	f7fe ff52 	bl	8005d1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8006ea8 <vPortFree+0xc0>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4413      	add	r3, r2
 8006e82:	4a09      	ldr	r2, [pc, #36]	@ (8006ea8 <vPortFree+0xc0>)
 8006e84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e86:	6938      	ldr	r0, [r7, #16]
 8006e88:	f000 f874 	bl	8006f74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e8c:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <vPortFree+0xc4>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	4a06      	ldr	r2, [pc, #24]	@ (8006eac <vPortFree+0xc4>)
 8006e94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e96:	f7fe ff4f 	bl	8005d38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e9a:	bf00      	nop
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	20002df4 	.word	0x20002df4
 8006ea8:	20002de4 	.word	0x20002de4
 8006eac:	20002df0 	.word	0x20002df0

08006eb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006eb6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006eba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006ebc:	4b27      	ldr	r3, [pc, #156]	@ (8006f5c <prvHeapInit+0xac>)
 8006ebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f003 0307 	and.w	r3, r3, #7
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00c      	beq.n	8006ee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3307      	adds	r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0307 	bic.w	r3, r3, #7
 8006ed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006ed8:	68ba      	ldr	r2, [r7, #8]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	4a1f      	ldr	r2, [pc, #124]	@ (8006f5c <prvHeapInit+0xac>)
 8006ee0:	4413      	add	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8006f60 <prvHeapInit+0xb0>)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006eee:	4b1c      	ldr	r3, [pc, #112]	@ (8006f60 <prvHeapInit+0xb0>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68ba      	ldr	r2, [r7, #8]
 8006ef8:	4413      	add	r3, r2
 8006efa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006efc:	2208      	movs	r2, #8
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	1a9b      	subs	r3, r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4a15      	ldr	r2, [pc, #84]	@ (8006f64 <prvHeapInit+0xb4>)
 8006f10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f12:	4b14      	ldr	r3, [pc, #80]	@ (8006f64 <prvHeapInit+0xb4>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	2200      	movs	r2, #0
 8006f18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f1a:	4b12      	ldr	r3, [pc, #72]	@ (8006f64 <prvHeapInit+0xb4>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	1ad2      	subs	r2, r2, r3
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f30:	4b0c      	ldr	r3, [pc, #48]	@ (8006f64 <prvHeapInit+0xb4>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8006f68 <prvHeapInit+0xb8>)
 8006f3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	4a09      	ldr	r2, [pc, #36]	@ (8006f6c <prvHeapInit+0xbc>)
 8006f46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006f48:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <prvHeapInit+0xc0>)
 8006f4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006f4e:	601a      	str	r2, [r3, #0]
}
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	200006c8 	.word	0x200006c8
 8006f60:	20002dd8 	.word	0x20002dd8
 8006f64:	20002de0 	.word	0x20002de0
 8006f68:	20002de8 	.word	0x20002de8
 8006f6c:	20002de4 	.word	0x20002de4
 8006f70:	20002df4 	.word	0x20002df4

08006f74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006f7c:	4b28      	ldr	r3, [pc, #160]	@ (8007020 <prvInsertBlockIntoFreeList+0xac>)
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	e002      	b.n	8006f88 <prvInsertBlockIntoFreeList+0x14>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d8f7      	bhi.n	8006f82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d108      	bne.n	8006fb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	685a      	ldr	r2, [r3, #4]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	441a      	add	r2, r3
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	441a      	add	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d118      	bne.n	8006ffc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	4b15      	ldr	r3, [pc, #84]	@ (8007024 <prvInsertBlockIntoFreeList+0xb0>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d00d      	beq.n	8006ff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	441a      	add	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	e008      	b.n	8007004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8007024 <prvInsertBlockIntoFreeList+0xb0>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e003      	b.n	8007004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	429a      	cmp	r2, r3
 800700a:	d002      	beq.n	8007012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007012:	bf00      	nop
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	20002dd8 	.word	0x20002dd8
 8007024:	20002de0 	.word	0x20002de0

08007028 <std>:
 8007028:	2300      	movs	r3, #0
 800702a:	b510      	push	{r4, lr}
 800702c:	4604      	mov	r4, r0
 800702e:	e9c0 3300 	strd	r3, r3, [r0]
 8007032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007036:	6083      	str	r3, [r0, #8]
 8007038:	8181      	strh	r1, [r0, #12]
 800703a:	6643      	str	r3, [r0, #100]	@ 0x64
 800703c:	81c2      	strh	r2, [r0, #14]
 800703e:	6183      	str	r3, [r0, #24]
 8007040:	4619      	mov	r1, r3
 8007042:	2208      	movs	r2, #8
 8007044:	305c      	adds	r0, #92	@ 0x5c
 8007046:	f000 f97d 	bl	8007344 <memset>
 800704a:	4b0d      	ldr	r3, [pc, #52]	@ (8007080 <std+0x58>)
 800704c:	6263      	str	r3, [r4, #36]	@ 0x24
 800704e:	4b0d      	ldr	r3, [pc, #52]	@ (8007084 <std+0x5c>)
 8007050:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007052:	4b0d      	ldr	r3, [pc, #52]	@ (8007088 <std+0x60>)
 8007054:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007056:	4b0d      	ldr	r3, [pc, #52]	@ (800708c <std+0x64>)
 8007058:	6323      	str	r3, [r4, #48]	@ 0x30
 800705a:	4b0d      	ldr	r3, [pc, #52]	@ (8007090 <std+0x68>)
 800705c:	6224      	str	r4, [r4, #32]
 800705e:	429c      	cmp	r4, r3
 8007060:	d006      	beq.n	8007070 <std+0x48>
 8007062:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007066:	4294      	cmp	r4, r2
 8007068:	d002      	beq.n	8007070 <std+0x48>
 800706a:	33d0      	adds	r3, #208	@ 0xd0
 800706c:	429c      	cmp	r4, r3
 800706e:	d105      	bne.n	800707c <std+0x54>
 8007070:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007078:	f000 b996 	b.w	80073a8 <__retarget_lock_init_recursive>
 800707c:	bd10      	pop	{r4, pc}
 800707e:	bf00      	nop
 8007080:	08007c51 	.word	0x08007c51
 8007084:	08007c73 	.word	0x08007c73
 8007088:	08007cab 	.word	0x08007cab
 800708c:	08007ccf 	.word	0x08007ccf
 8007090:	20002df8 	.word	0x20002df8

08007094 <stdio_exit_handler>:
 8007094:	4a02      	ldr	r2, [pc, #8]	@ (80070a0 <stdio_exit_handler+0xc>)
 8007096:	4903      	ldr	r1, [pc, #12]	@ (80070a4 <stdio_exit_handler+0x10>)
 8007098:	4803      	ldr	r0, [pc, #12]	@ (80070a8 <stdio_exit_handler+0x14>)
 800709a:	f000 b869 	b.w	8007170 <_fwalk_sglue>
 800709e:	bf00      	nop
 80070a0:	2000010c 	.word	0x2000010c
 80070a4:	08007be9 	.word	0x08007be9
 80070a8:	2000011c 	.word	0x2000011c

080070ac <cleanup_stdio>:
 80070ac:	6841      	ldr	r1, [r0, #4]
 80070ae:	4b0c      	ldr	r3, [pc, #48]	@ (80070e0 <cleanup_stdio+0x34>)
 80070b0:	4299      	cmp	r1, r3
 80070b2:	b510      	push	{r4, lr}
 80070b4:	4604      	mov	r4, r0
 80070b6:	d001      	beq.n	80070bc <cleanup_stdio+0x10>
 80070b8:	f000 fd96 	bl	8007be8 <_fflush_r>
 80070bc:	68a1      	ldr	r1, [r4, #8]
 80070be:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <cleanup_stdio+0x38>)
 80070c0:	4299      	cmp	r1, r3
 80070c2:	d002      	beq.n	80070ca <cleanup_stdio+0x1e>
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fd8f 	bl	8007be8 <_fflush_r>
 80070ca:	68e1      	ldr	r1, [r4, #12]
 80070cc:	4b06      	ldr	r3, [pc, #24]	@ (80070e8 <cleanup_stdio+0x3c>)
 80070ce:	4299      	cmp	r1, r3
 80070d0:	d004      	beq.n	80070dc <cleanup_stdio+0x30>
 80070d2:	4620      	mov	r0, r4
 80070d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070d8:	f000 bd86 	b.w	8007be8 <_fflush_r>
 80070dc:	bd10      	pop	{r4, pc}
 80070de:	bf00      	nop
 80070e0:	20002df8 	.word	0x20002df8
 80070e4:	20002e60 	.word	0x20002e60
 80070e8:	20002ec8 	.word	0x20002ec8

080070ec <global_stdio_init.part.0>:
 80070ec:	b510      	push	{r4, lr}
 80070ee:	4b0b      	ldr	r3, [pc, #44]	@ (800711c <global_stdio_init.part.0+0x30>)
 80070f0:	4c0b      	ldr	r4, [pc, #44]	@ (8007120 <global_stdio_init.part.0+0x34>)
 80070f2:	4a0c      	ldr	r2, [pc, #48]	@ (8007124 <global_stdio_init.part.0+0x38>)
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	4620      	mov	r0, r4
 80070f8:	2200      	movs	r2, #0
 80070fa:	2104      	movs	r1, #4
 80070fc:	f7ff ff94 	bl	8007028 <std>
 8007100:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007104:	2201      	movs	r2, #1
 8007106:	2109      	movs	r1, #9
 8007108:	f7ff ff8e 	bl	8007028 <std>
 800710c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007110:	2202      	movs	r2, #2
 8007112:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007116:	2112      	movs	r1, #18
 8007118:	f7ff bf86 	b.w	8007028 <std>
 800711c:	20002f30 	.word	0x20002f30
 8007120:	20002df8 	.word	0x20002df8
 8007124:	08007095 	.word	0x08007095

08007128 <__sfp_lock_acquire>:
 8007128:	4801      	ldr	r0, [pc, #4]	@ (8007130 <__sfp_lock_acquire+0x8>)
 800712a:	f000 b93e 	b.w	80073aa <__retarget_lock_acquire_recursive>
 800712e:	bf00      	nop
 8007130:	20002f35 	.word	0x20002f35

08007134 <__sfp_lock_release>:
 8007134:	4801      	ldr	r0, [pc, #4]	@ (800713c <__sfp_lock_release+0x8>)
 8007136:	f000 b939 	b.w	80073ac <__retarget_lock_release_recursive>
 800713a:	bf00      	nop
 800713c:	20002f35 	.word	0x20002f35

08007140 <__sinit>:
 8007140:	b510      	push	{r4, lr}
 8007142:	4604      	mov	r4, r0
 8007144:	f7ff fff0 	bl	8007128 <__sfp_lock_acquire>
 8007148:	6a23      	ldr	r3, [r4, #32]
 800714a:	b11b      	cbz	r3, 8007154 <__sinit+0x14>
 800714c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007150:	f7ff bff0 	b.w	8007134 <__sfp_lock_release>
 8007154:	4b04      	ldr	r3, [pc, #16]	@ (8007168 <__sinit+0x28>)
 8007156:	6223      	str	r3, [r4, #32]
 8007158:	4b04      	ldr	r3, [pc, #16]	@ (800716c <__sinit+0x2c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f5      	bne.n	800714c <__sinit+0xc>
 8007160:	f7ff ffc4 	bl	80070ec <global_stdio_init.part.0>
 8007164:	e7f2      	b.n	800714c <__sinit+0xc>
 8007166:	bf00      	nop
 8007168:	080070ad 	.word	0x080070ad
 800716c:	20002f30 	.word	0x20002f30

08007170 <_fwalk_sglue>:
 8007170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007174:	4607      	mov	r7, r0
 8007176:	4688      	mov	r8, r1
 8007178:	4614      	mov	r4, r2
 800717a:	2600      	movs	r6, #0
 800717c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007180:	f1b9 0901 	subs.w	r9, r9, #1
 8007184:	d505      	bpl.n	8007192 <_fwalk_sglue+0x22>
 8007186:	6824      	ldr	r4, [r4, #0]
 8007188:	2c00      	cmp	r4, #0
 800718a:	d1f7      	bne.n	800717c <_fwalk_sglue+0xc>
 800718c:	4630      	mov	r0, r6
 800718e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007192:	89ab      	ldrh	r3, [r5, #12]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d907      	bls.n	80071a8 <_fwalk_sglue+0x38>
 8007198:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800719c:	3301      	adds	r3, #1
 800719e:	d003      	beq.n	80071a8 <_fwalk_sglue+0x38>
 80071a0:	4629      	mov	r1, r5
 80071a2:	4638      	mov	r0, r7
 80071a4:	47c0      	blx	r8
 80071a6:	4306      	orrs	r6, r0
 80071a8:	3568      	adds	r5, #104	@ 0x68
 80071aa:	e7e9      	b.n	8007180 <_fwalk_sglue+0x10>

080071ac <iprintf>:
 80071ac:	b40f      	push	{r0, r1, r2, r3}
 80071ae:	b507      	push	{r0, r1, r2, lr}
 80071b0:	4906      	ldr	r1, [pc, #24]	@ (80071cc <iprintf+0x20>)
 80071b2:	ab04      	add	r3, sp, #16
 80071b4:	6808      	ldr	r0, [r1, #0]
 80071b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80071ba:	6881      	ldr	r1, [r0, #8]
 80071bc:	9301      	str	r3, [sp, #4]
 80071be:	f000 f93f 	bl	8007440 <_vfiprintf_r>
 80071c2:	b003      	add	sp, #12
 80071c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80071c8:	b004      	add	sp, #16
 80071ca:	4770      	bx	lr
 80071cc:	20000118 	.word	0x20000118

080071d0 <_puts_r>:
 80071d0:	6a03      	ldr	r3, [r0, #32]
 80071d2:	b570      	push	{r4, r5, r6, lr}
 80071d4:	6884      	ldr	r4, [r0, #8]
 80071d6:	4605      	mov	r5, r0
 80071d8:	460e      	mov	r6, r1
 80071da:	b90b      	cbnz	r3, 80071e0 <_puts_r+0x10>
 80071dc:	f7ff ffb0 	bl	8007140 <__sinit>
 80071e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071e2:	07db      	lsls	r3, r3, #31
 80071e4:	d405      	bmi.n	80071f2 <_puts_r+0x22>
 80071e6:	89a3      	ldrh	r3, [r4, #12]
 80071e8:	0598      	lsls	r0, r3, #22
 80071ea:	d402      	bmi.n	80071f2 <_puts_r+0x22>
 80071ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ee:	f000 f8dc 	bl	80073aa <__retarget_lock_acquire_recursive>
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	0719      	lsls	r1, r3, #28
 80071f6:	d502      	bpl.n	80071fe <_puts_r+0x2e>
 80071f8:	6923      	ldr	r3, [r4, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d135      	bne.n	800726a <_puts_r+0x9a>
 80071fe:	4621      	mov	r1, r4
 8007200:	4628      	mov	r0, r5
 8007202:	f000 fdb9 	bl	8007d78 <__swsetup_r>
 8007206:	b380      	cbz	r0, 800726a <_puts_r+0x9a>
 8007208:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800720c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800720e:	07da      	lsls	r2, r3, #31
 8007210:	d405      	bmi.n	800721e <_puts_r+0x4e>
 8007212:	89a3      	ldrh	r3, [r4, #12]
 8007214:	059b      	lsls	r3, r3, #22
 8007216:	d402      	bmi.n	800721e <_puts_r+0x4e>
 8007218:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800721a:	f000 f8c7 	bl	80073ac <__retarget_lock_release_recursive>
 800721e:	4628      	mov	r0, r5
 8007220:	bd70      	pop	{r4, r5, r6, pc}
 8007222:	2b00      	cmp	r3, #0
 8007224:	da04      	bge.n	8007230 <_puts_r+0x60>
 8007226:	69a2      	ldr	r2, [r4, #24]
 8007228:	429a      	cmp	r2, r3
 800722a:	dc17      	bgt.n	800725c <_puts_r+0x8c>
 800722c:	290a      	cmp	r1, #10
 800722e:	d015      	beq.n	800725c <_puts_r+0x8c>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	1c5a      	adds	r2, r3, #1
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	7019      	strb	r1, [r3, #0]
 8007238:	68a3      	ldr	r3, [r4, #8]
 800723a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800723e:	3b01      	subs	r3, #1
 8007240:	60a3      	str	r3, [r4, #8]
 8007242:	2900      	cmp	r1, #0
 8007244:	d1ed      	bne.n	8007222 <_puts_r+0x52>
 8007246:	2b00      	cmp	r3, #0
 8007248:	da11      	bge.n	800726e <_puts_r+0x9e>
 800724a:	4622      	mov	r2, r4
 800724c:	210a      	movs	r1, #10
 800724e:	4628      	mov	r0, r5
 8007250:	f000 fd54 	bl	8007cfc <__swbuf_r>
 8007254:	3001      	adds	r0, #1
 8007256:	d0d7      	beq.n	8007208 <_puts_r+0x38>
 8007258:	250a      	movs	r5, #10
 800725a:	e7d7      	b.n	800720c <_puts_r+0x3c>
 800725c:	4622      	mov	r2, r4
 800725e:	4628      	mov	r0, r5
 8007260:	f000 fd4c 	bl	8007cfc <__swbuf_r>
 8007264:	3001      	adds	r0, #1
 8007266:	d1e7      	bne.n	8007238 <_puts_r+0x68>
 8007268:	e7ce      	b.n	8007208 <_puts_r+0x38>
 800726a:	3e01      	subs	r6, #1
 800726c:	e7e4      	b.n	8007238 <_puts_r+0x68>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	220a      	movs	r2, #10
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e7ee      	b.n	8007258 <_puts_r+0x88>
	...

0800727c <puts>:
 800727c:	4b02      	ldr	r3, [pc, #8]	@ (8007288 <puts+0xc>)
 800727e:	4601      	mov	r1, r0
 8007280:	6818      	ldr	r0, [r3, #0]
 8007282:	f7ff bfa5 	b.w	80071d0 <_puts_r>
 8007286:	bf00      	nop
 8007288:	20000118 	.word	0x20000118

0800728c <strtok>:
 800728c:	4b16      	ldr	r3, [pc, #88]	@ (80072e8 <strtok+0x5c>)
 800728e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007292:	681f      	ldr	r7, [r3, #0]
 8007294:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007296:	4605      	mov	r5, r0
 8007298:	460e      	mov	r6, r1
 800729a:	b9ec      	cbnz	r4, 80072d8 <strtok+0x4c>
 800729c:	2050      	movs	r0, #80	@ 0x50
 800729e:	f000 f9e7 	bl	8007670 <malloc>
 80072a2:	4602      	mov	r2, r0
 80072a4:	6478      	str	r0, [r7, #68]	@ 0x44
 80072a6:	b920      	cbnz	r0, 80072b2 <strtok+0x26>
 80072a8:	4b10      	ldr	r3, [pc, #64]	@ (80072ec <strtok+0x60>)
 80072aa:	4811      	ldr	r0, [pc, #68]	@ (80072f0 <strtok+0x64>)
 80072ac:	215b      	movs	r1, #91	@ 0x5b
 80072ae:	f000 f87f 	bl	80073b0 <__assert_func>
 80072b2:	e9c0 4400 	strd	r4, r4, [r0]
 80072b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80072ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80072be:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80072c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80072c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80072ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80072ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80072d2:	6184      	str	r4, [r0, #24]
 80072d4:	7704      	strb	r4, [r0, #28]
 80072d6:	6244      	str	r4, [r0, #36]	@ 0x24
 80072d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80072da:	4631      	mov	r1, r6
 80072dc:	4628      	mov	r0, r5
 80072de:	2301      	movs	r3, #1
 80072e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072e4:	f000 b806 	b.w	80072f4 <__strtok_r>
 80072e8:	20000118 	.word	0x20000118
 80072ec:	08008354 	.word	0x08008354
 80072f0:	0800836b 	.word	0x0800836b

080072f4 <__strtok_r>:
 80072f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f6:	4604      	mov	r4, r0
 80072f8:	b908      	cbnz	r0, 80072fe <__strtok_r+0xa>
 80072fa:	6814      	ldr	r4, [r2, #0]
 80072fc:	b144      	cbz	r4, 8007310 <__strtok_r+0x1c>
 80072fe:	4620      	mov	r0, r4
 8007300:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007304:	460f      	mov	r7, r1
 8007306:	f817 6b01 	ldrb.w	r6, [r7], #1
 800730a:	b91e      	cbnz	r6, 8007314 <__strtok_r+0x20>
 800730c:	b965      	cbnz	r5, 8007328 <__strtok_r+0x34>
 800730e:	6015      	str	r5, [r2, #0]
 8007310:	2000      	movs	r0, #0
 8007312:	e005      	b.n	8007320 <__strtok_r+0x2c>
 8007314:	42b5      	cmp	r5, r6
 8007316:	d1f6      	bne.n	8007306 <__strtok_r+0x12>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f0      	bne.n	80072fe <__strtok_r+0xa>
 800731c:	6014      	str	r4, [r2, #0]
 800731e:	7003      	strb	r3, [r0, #0]
 8007320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007322:	461c      	mov	r4, r3
 8007324:	e00c      	b.n	8007340 <__strtok_r+0x4c>
 8007326:	b915      	cbnz	r5, 800732e <__strtok_r+0x3a>
 8007328:	f814 3b01 	ldrb.w	r3, [r4], #1
 800732c:	460e      	mov	r6, r1
 800732e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007332:	42ab      	cmp	r3, r5
 8007334:	d1f7      	bne.n	8007326 <__strtok_r+0x32>
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0f3      	beq.n	8007322 <__strtok_r+0x2e>
 800733a:	2300      	movs	r3, #0
 800733c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007340:	6014      	str	r4, [r2, #0]
 8007342:	e7ed      	b.n	8007320 <__strtok_r+0x2c>

08007344 <memset>:
 8007344:	4402      	add	r2, r0
 8007346:	4603      	mov	r3, r0
 8007348:	4293      	cmp	r3, r2
 800734a:	d100      	bne.n	800734e <memset+0xa>
 800734c:	4770      	bx	lr
 800734e:	f803 1b01 	strb.w	r1, [r3], #1
 8007352:	e7f9      	b.n	8007348 <memset+0x4>

08007354 <__errno>:
 8007354:	4b01      	ldr	r3, [pc, #4]	@ (800735c <__errno+0x8>)
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	20000118 	.word	0x20000118

08007360 <__libc_init_array>:
 8007360:	b570      	push	{r4, r5, r6, lr}
 8007362:	4d0d      	ldr	r5, [pc, #52]	@ (8007398 <__libc_init_array+0x38>)
 8007364:	4c0d      	ldr	r4, [pc, #52]	@ (800739c <__libc_init_array+0x3c>)
 8007366:	1b64      	subs	r4, r4, r5
 8007368:	10a4      	asrs	r4, r4, #2
 800736a:	2600      	movs	r6, #0
 800736c:	42a6      	cmp	r6, r4
 800736e:	d109      	bne.n	8007384 <__libc_init_array+0x24>
 8007370:	4d0b      	ldr	r5, [pc, #44]	@ (80073a0 <__libc_init_array+0x40>)
 8007372:	4c0c      	ldr	r4, [pc, #48]	@ (80073a4 <__libc_init_array+0x44>)
 8007374:	f000 fec6 	bl	8008104 <_init>
 8007378:	1b64      	subs	r4, r4, r5
 800737a:	10a4      	asrs	r4, r4, #2
 800737c:	2600      	movs	r6, #0
 800737e:	42a6      	cmp	r6, r4
 8007380:	d105      	bne.n	800738e <__libc_init_array+0x2e>
 8007382:	bd70      	pop	{r4, r5, r6, pc}
 8007384:	f855 3b04 	ldr.w	r3, [r5], #4
 8007388:	4798      	blx	r3
 800738a:	3601      	adds	r6, #1
 800738c:	e7ee      	b.n	800736c <__libc_init_array+0xc>
 800738e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007392:	4798      	blx	r3
 8007394:	3601      	adds	r6, #1
 8007396:	e7f2      	b.n	800737e <__libc_init_array+0x1e>
 8007398:	0800843c 	.word	0x0800843c
 800739c:	0800843c 	.word	0x0800843c
 80073a0:	0800843c 	.word	0x0800843c
 80073a4:	08008440 	.word	0x08008440

080073a8 <__retarget_lock_init_recursive>:
 80073a8:	4770      	bx	lr

080073aa <__retarget_lock_acquire_recursive>:
 80073aa:	4770      	bx	lr

080073ac <__retarget_lock_release_recursive>:
 80073ac:	4770      	bx	lr
	...

080073b0 <__assert_func>:
 80073b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073b2:	4614      	mov	r4, r2
 80073b4:	461a      	mov	r2, r3
 80073b6:	4b09      	ldr	r3, [pc, #36]	@ (80073dc <__assert_func+0x2c>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4605      	mov	r5, r0
 80073bc:	68d8      	ldr	r0, [r3, #12]
 80073be:	b954      	cbnz	r4, 80073d6 <__assert_func+0x26>
 80073c0:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <__assert_func+0x30>)
 80073c2:	461c      	mov	r4, r3
 80073c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073c8:	9100      	str	r1, [sp, #0]
 80073ca:	462b      	mov	r3, r5
 80073cc:	4905      	ldr	r1, [pc, #20]	@ (80073e4 <__assert_func+0x34>)
 80073ce:	f000 fc83 	bl	8007cd8 <fiprintf>
 80073d2:	f000 fe01 	bl	8007fd8 <abort>
 80073d6:	4b04      	ldr	r3, [pc, #16]	@ (80073e8 <__assert_func+0x38>)
 80073d8:	e7f4      	b.n	80073c4 <__assert_func+0x14>
 80073da:	bf00      	nop
 80073dc:	20000118 	.word	0x20000118
 80073e0:	08008400 	.word	0x08008400
 80073e4:	080083d2 	.word	0x080083d2
 80073e8:	080083c5 	.word	0x080083c5

080073ec <__sfputc_r>:
 80073ec:	6893      	ldr	r3, [r2, #8]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	b410      	push	{r4}
 80073f4:	6093      	str	r3, [r2, #8]
 80073f6:	da08      	bge.n	800740a <__sfputc_r+0x1e>
 80073f8:	6994      	ldr	r4, [r2, #24]
 80073fa:	42a3      	cmp	r3, r4
 80073fc:	db01      	blt.n	8007402 <__sfputc_r+0x16>
 80073fe:	290a      	cmp	r1, #10
 8007400:	d103      	bne.n	800740a <__sfputc_r+0x1e>
 8007402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007406:	f000 bc79 	b.w	8007cfc <__swbuf_r>
 800740a:	6813      	ldr	r3, [r2, #0]
 800740c:	1c58      	adds	r0, r3, #1
 800740e:	6010      	str	r0, [r2, #0]
 8007410:	7019      	strb	r1, [r3, #0]
 8007412:	4608      	mov	r0, r1
 8007414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007418:	4770      	bx	lr

0800741a <__sfputs_r>:
 800741a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741c:	4606      	mov	r6, r0
 800741e:	460f      	mov	r7, r1
 8007420:	4614      	mov	r4, r2
 8007422:	18d5      	adds	r5, r2, r3
 8007424:	42ac      	cmp	r4, r5
 8007426:	d101      	bne.n	800742c <__sfputs_r+0x12>
 8007428:	2000      	movs	r0, #0
 800742a:	e007      	b.n	800743c <__sfputs_r+0x22>
 800742c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007430:	463a      	mov	r2, r7
 8007432:	4630      	mov	r0, r6
 8007434:	f7ff ffda 	bl	80073ec <__sfputc_r>
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	d1f3      	bne.n	8007424 <__sfputs_r+0xa>
 800743c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007440 <_vfiprintf_r>:
 8007440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007444:	460d      	mov	r5, r1
 8007446:	b09d      	sub	sp, #116	@ 0x74
 8007448:	4614      	mov	r4, r2
 800744a:	4698      	mov	r8, r3
 800744c:	4606      	mov	r6, r0
 800744e:	b118      	cbz	r0, 8007458 <_vfiprintf_r+0x18>
 8007450:	6a03      	ldr	r3, [r0, #32]
 8007452:	b90b      	cbnz	r3, 8007458 <_vfiprintf_r+0x18>
 8007454:	f7ff fe74 	bl	8007140 <__sinit>
 8007458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	d405      	bmi.n	800746a <_vfiprintf_r+0x2a>
 800745e:	89ab      	ldrh	r3, [r5, #12]
 8007460:	059a      	lsls	r2, r3, #22
 8007462:	d402      	bmi.n	800746a <_vfiprintf_r+0x2a>
 8007464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007466:	f7ff ffa0 	bl	80073aa <__retarget_lock_acquire_recursive>
 800746a:	89ab      	ldrh	r3, [r5, #12]
 800746c:	071b      	lsls	r3, r3, #28
 800746e:	d501      	bpl.n	8007474 <_vfiprintf_r+0x34>
 8007470:	692b      	ldr	r3, [r5, #16]
 8007472:	b99b      	cbnz	r3, 800749c <_vfiprintf_r+0x5c>
 8007474:	4629      	mov	r1, r5
 8007476:	4630      	mov	r0, r6
 8007478:	f000 fc7e 	bl	8007d78 <__swsetup_r>
 800747c:	b170      	cbz	r0, 800749c <_vfiprintf_r+0x5c>
 800747e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007480:	07dc      	lsls	r4, r3, #31
 8007482:	d504      	bpl.n	800748e <_vfiprintf_r+0x4e>
 8007484:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007488:	b01d      	add	sp, #116	@ 0x74
 800748a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800748e:	89ab      	ldrh	r3, [r5, #12]
 8007490:	0598      	lsls	r0, r3, #22
 8007492:	d4f7      	bmi.n	8007484 <_vfiprintf_r+0x44>
 8007494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007496:	f7ff ff89 	bl	80073ac <__retarget_lock_release_recursive>
 800749a:	e7f3      	b.n	8007484 <_vfiprintf_r+0x44>
 800749c:	2300      	movs	r3, #0
 800749e:	9309      	str	r3, [sp, #36]	@ 0x24
 80074a0:	2320      	movs	r3, #32
 80074a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80074aa:	2330      	movs	r3, #48	@ 0x30
 80074ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800765c <_vfiprintf_r+0x21c>
 80074b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074b4:	f04f 0901 	mov.w	r9, #1
 80074b8:	4623      	mov	r3, r4
 80074ba:	469a      	mov	sl, r3
 80074bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074c0:	b10a      	cbz	r2, 80074c6 <_vfiprintf_r+0x86>
 80074c2:	2a25      	cmp	r2, #37	@ 0x25
 80074c4:	d1f9      	bne.n	80074ba <_vfiprintf_r+0x7a>
 80074c6:	ebba 0b04 	subs.w	fp, sl, r4
 80074ca:	d00b      	beq.n	80074e4 <_vfiprintf_r+0xa4>
 80074cc:	465b      	mov	r3, fp
 80074ce:	4622      	mov	r2, r4
 80074d0:	4629      	mov	r1, r5
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ffa1 	bl	800741a <__sfputs_r>
 80074d8:	3001      	adds	r0, #1
 80074da:	f000 80a7 	beq.w	800762c <_vfiprintf_r+0x1ec>
 80074de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074e0:	445a      	add	r2, fp
 80074e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80074e4:	f89a 3000 	ldrb.w	r3, [sl]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 809f 	beq.w	800762c <_vfiprintf_r+0x1ec>
 80074ee:	2300      	movs	r3, #0
 80074f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f8:	f10a 0a01 	add.w	sl, sl, #1
 80074fc:	9304      	str	r3, [sp, #16]
 80074fe:	9307      	str	r3, [sp, #28]
 8007500:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007504:	931a      	str	r3, [sp, #104]	@ 0x68
 8007506:	4654      	mov	r4, sl
 8007508:	2205      	movs	r2, #5
 800750a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800750e:	4853      	ldr	r0, [pc, #332]	@ (800765c <_vfiprintf_r+0x21c>)
 8007510:	f7f8 fe76 	bl	8000200 <memchr>
 8007514:	9a04      	ldr	r2, [sp, #16]
 8007516:	b9d8      	cbnz	r0, 8007550 <_vfiprintf_r+0x110>
 8007518:	06d1      	lsls	r1, r2, #27
 800751a:	bf44      	itt	mi
 800751c:	2320      	movmi	r3, #32
 800751e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007522:	0713      	lsls	r3, r2, #28
 8007524:	bf44      	itt	mi
 8007526:	232b      	movmi	r3, #43	@ 0x2b
 8007528:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800752c:	f89a 3000 	ldrb.w	r3, [sl]
 8007530:	2b2a      	cmp	r3, #42	@ 0x2a
 8007532:	d015      	beq.n	8007560 <_vfiprintf_r+0x120>
 8007534:	9a07      	ldr	r2, [sp, #28]
 8007536:	4654      	mov	r4, sl
 8007538:	2000      	movs	r0, #0
 800753a:	f04f 0c0a 	mov.w	ip, #10
 800753e:	4621      	mov	r1, r4
 8007540:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007544:	3b30      	subs	r3, #48	@ 0x30
 8007546:	2b09      	cmp	r3, #9
 8007548:	d94b      	bls.n	80075e2 <_vfiprintf_r+0x1a2>
 800754a:	b1b0      	cbz	r0, 800757a <_vfiprintf_r+0x13a>
 800754c:	9207      	str	r2, [sp, #28]
 800754e:	e014      	b.n	800757a <_vfiprintf_r+0x13a>
 8007550:	eba0 0308 	sub.w	r3, r0, r8
 8007554:	fa09 f303 	lsl.w	r3, r9, r3
 8007558:	4313      	orrs	r3, r2
 800755a:	9304      	str	r3, [sp, #16]
 800755c:	46a2      	mov	sl, r4
 800755e:	e7d2      	b.n	8007506 <_vfiprintf_r+0xc6>
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	1d19      	adds	r1, r3, #4
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	9103      	str	r1, [sp, #12]
 8007568:	2b00      	cmp	r3, #0
 800756a:	bfbb      	ittet	lt
 800756c:	425b      	neglt	r3, r3
 800756e:	f042 0202 	orrlt.w	r2, r2, #2
 8007572:	9307      	strge	r3, [sp, #28]
 8007574:	9307      	strlt	r3, [sp, #28]
 8007576:	bfb8      	it	lt
 8007578:	9204      	strlt	r2, [sp, #16]
 800757a:	7823      	ldrb	r3, [r4, #0]
 800757c:	2b2e      	cmp	r3, #46	@ 0x2e
 800757e:	d10a      	bne.n	8007596 <_vfiprintf_r+0x156>
 8007580:	7863      	ldrb	r3, [r4, #1]
 8007582:	2b2a      	cmp	r3, #42	@ 0x2a
 8007584:	d132      	bne.n	80075ec <_vfiprintf_r+0x1ac>
 8007586:	9b03      	ldr	r3, [sp, #12]
 8007588:	1d1a      	adds	r2, r3, #4
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	9203      	str	r2, [sp, #12]
 800758e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007592:	3402      	adds	r4, #2
 8007594:	9305      	str	r3, [sp, #20]
 8007596:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800766c <_vfiprintf_r+0x22c>
 800759a:	7821      	ldrb	r1, [r4, #0]
 800759c:	2203      	movs	r2, #3
 800759e:	4650      	mov	r0, sl
 80075a0:	f7f8 fe2e 	bl	8000200 <memchr>
 80075a4:	b138      	cbz	r0, 80075b6 <_vfiprintf_r+0x176>
 80075a6:	9b04      	ldr	r3, [sp, #16]
 80075a8:	eba0 000a 	sub.w	r0, r0, sl
 80075ac:	2240      	movs	r2, #64	@ 0x40
 80075ae:	4082      	lsls	r2, r0
 80075b0:	4313      	orrs	r3, r2
 80075b2:	3401      	adds	r4, #1
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ba:	4829      	ldr	r0, [pc, #164]	@ (8007660 <_vfiprintf_r+0x220>)
 80075bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075c0:	2206      	movs	r2, #6
 80075c2:	f7f8 fe1d 	bl	8000200 <memchr>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d03f      	beq.n	800764a <_vfiprintf_r+0x20a>
 80075ca:	4b26      	ldr	r3, [pc, #152]	@ (8007664 <_vfiprintf_r+0x224>)
 80075cc:	bb1b      	cbnz	r3, 8007616 <_vfiprintf_r+0x1d6>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	3308      	adds	r3, #8
 80075d8:	9303      	str	r3, [sp, #12]
 80075da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075dc:	443b      	add	r3, r7
 80075de:	9309      	str	r3, [sp, #36]	@ 0x24
 80075e0:	e76a      	b.n	80074b8 <_vfiprintf_r+0x78>
 80075e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e6:	460c      	mov	r4, r1
 80075e8:	2001      	movs	r0, #1
 80075ea:	e7a8      	b.n	800753e <_vfiprintf_r+0xfe>
 80075ec:	2300      	movs	r3, #0
 80075ee:	3401      	adds	r4, #1
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	4619      	mov	r1, r3
 80075f4:	f04f 0c0a 	mov.w	ip, #10
 80075f8:	4620      	mov	r0, r4
 80075fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fe:	3a30      	subs	r2, #48	@ 0x30
 8007600:	2a09      	cmp	r2, #9
 8007602:	d903      	bls.n	800760c <_vfiprintf_r+0x1cc>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0c6      	beq.n	8007596 <_vfiprintf_r+0x156>
 8007608:	9105      	str	r1, [sp, #20]
 800760a:	e7c4      	b.n	8007596 <_vfiprintf_r+0x156>
 800760c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007610:	4604      	mov	r4, r0
 8007612:	2301      	movs	r3, #1
 8007614:	e7f0      	b.n	80075f8 <_vfiprintf_r+0x1b8>
 8007616:	ab03      	add	r3, sp, #12
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	462a      	mov	r2, r5
 800761c:	4b12      	ldr	r3, [pc, #72]	@ (8007668 <_vfiprintf_r+0x228>)
 800761e:	a904      	add	r1, sp, #16
 8007620:	4630      	mov	r0, r6
 8007622:	f3af 8000 	nop.w
 8007626:	4607      	mov	r7, r0
 8007628:	1c78      	adds	r0, r7, #1
 800762a:	d1d6      	bne.n	80075da <_vfiprintf_r+0x19a>
 800762c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800762e:	07d9      	lsls	r1, r3, #31
 8007630:	d405      	bmi.n	800763e <_vfiprintf_r+0x1fe>
 8007632:	89ab      	ldrh	r3, [r5, #12]
 8007634:	059a      	lsls	r2, r3, #22
 8007636:	d402      	bmi.n	800763e <_vfiprintf_r+0x1fe>
 8007638:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800763a:	f7ff feb7 	bl	80073ac <__retarget_lock_release_recursive>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	065b      	lsls	r3, r3, #25
 8007642:	f53f af1f 	bmi.w	8007484 <_vfiprintf_r+0x44>
 8007646:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007648:	e71e      	b.n	8007488 <_vfiprintf_r+0x48>
 800764a:	ab03      	add	r3, sp, #12
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	462a      	mov	r2, r5
 8007650:	4b05      	ldr	r3, [pc, #20]	@ (8007668 <_vfiprintf_r+0x228>)
 8007652:	a904      	add	r1, sp, #16
 8007654:	4630      	mov	r0, r6
 8007656:	f000 f923 	bl	80078a0 <_printf_i>
 800765a:	e7e4      	b.n	8007626 <_vfiprintf_r+0x1e6>
 800765c:	08008401 	.word	0x08008401
 8007660:	0800840b 	.word	0x0800840b
 8007664:	00000000 	.word	0x00000000
 8007668:	0800741b 	.word	0x0800741b
 800766c:	08008407 	.word	0x08008407

08007670 <malloc>:
 8007670:	4b02      	ldr	r3, [pc, #8]	@ (800767c <malloc+0xc>)
 8007672:	4601      	mov	r1, r0
 8007674:	6818      	ldr	r0, [r3, #0]
 8007676:	f000 b825 	b.w	80076c4 <_malloc_r>
 800767a:	bf00      	nop
 800767c:	20000118 	.word	0x20000118

08007680 <sbrk_aligned>:
 8007680:	b570      	push	{r4, r5, r6, lr}
 8007682:	4e0f      	ldr	r6, [pc, #60]	@ (80076c0 <sbrk_aligned+0x40>)
 8007684:	460c      	mov	r4, r1
 8007686:	6831      	ldr	r1, [r6, #0]
 8007688:	4605      	mov	r5, r0
 800768a:	b911      	cbnz	r1, 8007692 <sbrk_aligned+0x12>
 800768c:	f000 fc82 	bl	8007f94 <_sbrk_r>
 8007690:	6030      	str	r0, [r6, #0]
 8007692:	4621      	mov	r1, r4
 8007694:	4628      	mov	r0, r5
 8007696:	f000 fc7d 	bl	8007f94 <_sbrk_r>
 800769a:	1c43      	adds	r3, r0, #1
 800769c:	d103      	bne.n	80076a6 <sbrk_aligned+0x26>
 800769e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80076a2:	4620      	mov	r0, r4
 80076a4:	bd70      	pop	{r4, r5, r6, pc}
 80076a6:	1cc4      	adds	r4, r0, #3
 80076a8:	f024 0403 	bic.w	r4, r4, #3
 80076ac:	42a0      	cmp	r0, r4
 80076ae:	d0f8      	beq.n	80076a2 <sbrk_aligned+0x22>
 80076b0:	1a21      	subs	r1, r4, r0
 80076b2:	4628      	mov	r0, r5
 80076b4:	f000 fc6e 	bl	8007f94 <_sbrk_r>
 80076b8:	3001      	adds	r0, #1
 80076ba:	d1f2      	bne.n	80076a2 <sbrk_aligned+0x22>
 80076bc:	e7ef      	b.n	800769e <sbrk_aligned+0x1e>
 80076be:	bf00      	nop
 80076c0:	20002f38 	.word	0x20002f38

080076c4 <_malloc_r>:
 80076c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076c8:	1ccd      	adds	r5, r1, #3
 80076ca:	f025 0503 	bic.w	r5, r5, #3
 80076ce:	3508      	adds	r5, #8
 80076d0:	2d0c      	cmp	r5, #12
 80076d2:	bf38      	it	cc
 80076d4:	250c      	movcc	r5, #12
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	4606      	mov	r6, r0
 80076da:	db01      	blt.n	80076e0 <_malloc_r+0x1c>
 80076dc:	42a9      	cmp	r1, r5
 80076de:	d904      	bls.n	80076ea <_malloc_r+0x26>
 80076e0:	230c      	movs	r3, #12
 80076e2:	6033      	str	r3, [r6, #0]
 80076e4:	2000      	movs	r0, #0
 80076e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80077c0 <_malloc_r+0xfc>
 80076ee:	f000 faa3 	bl	8007c38 <__malloc_lock>
 80076f2:	f8d8 3000 	ldr.w	r3, [r8]
 80076f6:	461c      	mov	r4, r3
 80076f8:	bb44      	cbnz	r4, 800774c <_malloc_r+0x88>
 80076fa:	4629      	mov	r1, r5
 80076fc:	4630      	mov	r0, r6
 80076fe:	f7ff ffbf 	bl	8007680 <sbrk_aligned>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	4604      	mov	r4, r0
 8007706:	d158      	bne.n	80077ba <_malloc_r+0xf6>
 8007708:	f8d8 4000 	ldr.w	r4, [r8]
 800770c:	4627      	mov	r7, r4
 800770e:	2f00      	cmp	r7, #0
 8007710:	d143      	bne.n	800779a <_malloc_r+0xd6>
 8007712:	2c00      	cmp	r4, #0
 8007714:	d04b      	beq.n	80077ae <_malloc_r+0xea>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	4639      	mov	r1, r7
 800771a:	4630      	mov	r0, r6
 800771c:	eb04 0903 	add.w	r9, r4, r3
 8007720:	f000 fc38 	bl	8007f94 <_sbrk_r>
 8007724:	4581      	cmp	r9, r0
 8007726:	d142      	bne.n	80077ae <_malloc_r+0xea>
 8007728:	6821      	ldr	r1, [r4, #0]
 800772a:	1a6d      	subs	r5, r5, r1
 800772c:	4629      	mov	r1, r5
 800772e:	4630      	mov	r0, r6
 8007730:	f7ff ffa6 	bl	8007680 <sbrk_aligned>
 8007734:	3001      	adds	r0, #1
 8007736:	d03a      	beq.n	80077ae <_malloc_r+0xea>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	442b      	add	r3, r5
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	f8d8 3000 	ldr.w	r3, [r8]
 8007742:	685a      	ldr	r2, [r3, #4]
 8007744:	bb62      	cbnz	r2, 80077a0 <_malloc_r+0xdc>
 8007746:	f8c8 7000 	str.w	r7, [r8]
 800774a:	e00f      	b.n	800776c <_malloc_r+0xa8>
 800774c:	6822      	ldr	r2, [r4, #0]
 800774e:	1b52      	subs	r2, r2, r5
 8007750:	d420      	bmi.n	8007794 <_malloc_r+0xd0>
 8007752:	2a0b      	cmp	r2, #11
 8007754:	d917      	bls.n	8007786 <_malloc_r+0xc2>
 8007756:	1961      	adds	r1, r4, r5
 8007758:	42a3      	cmp	r3, r4
 800775a:	6025      	str	r5, [r4, #0]
 800775c:	bf18      	it	ne
 800775e:	6059      	strne	r1, [r3, #4]
 8007760:	6863      	ldr	r3, [r4, #4]
 8007762:	bf08      	it	eq
 8007764:	f8c8 1000 	streq.w	r1, [r8]
 8007768:	5162      	str	r2, [r4, r5]
 800776a:	604b      	str	r3, [r1, #4]
 800776c:	4630      	mov	r0, r6
 800776e:	f000 fa69 	bl	8007c44 <__malloc_unlock>
 8007772:	f104 000b 	add.w	r0, r4, #11
 8007776:	1d23      	adds	r3, r4, #4
 8007778:	f020 0007 	bic.w	r0, r0, #7
 800777c:	1ac2      	subs	r2, r0, r3
 800777e:	bf1c      	itt	ne
 8007780:	1a1b      	subne	r3, r3, r0
 8007782:	50a3      	strne	r3, [r4, r2]
 8007784:	e7af      	b.n	80076e6 <_malloc_r+0x22>
 8007786:	6862      	ldr	r2, [r4, #4]
 8007788:	42a3      	cmp	r3, r4
 800778a:	bf0c      	ite	eq
 800778c:	f8c8 2000 	streq.w	r2, [r8]
 8007790:	605a      	strne	r2, [r3, #4]
 8007792:	e7eb      	b.n	800776c <_malloc_r+0xa8>
 8007794:	4623      	mov	r3, r4
 8007796:	6864      	ldr	r4, [r4, #4]
 8007798:	e7ae      	b.n	80076f8 <_malloc_r+0x34>
 800779a:	463c      	mov	r4, r7
 800779c:	687f      	ldr	r7, [r7, #4]
 800779e:	e7b6      	b.n	800770e <_malloc_r+0x4a>
 80077a0:	461a      	mov	r2, r3
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	d1fb      	bne.n	80077a0 <_malloc_r+0xdc>
 80077a8:	2300      	movs	r3, #0
 80077aa:	6053      	str	r3, [r2, #4]
 80077ac:	e7de      	b.n	800776c <_malloc_r+0xa8>
 80077ae:	230c      	movs	r3, #12
 80077b0:	6033      	str	r3, [r6, #0]
 80077b2:	4630      	mov	r0, r6
 80077b4:	f000 fa46 	bl	8007c44 <__malloc_unlock>
 80077b8:	e794      	b.n	80076e4 <_malloc_r+0x20>
 80077ba:	6005      	str	r5, [r0, #0]
 80077bc:	e7d6      	b.n	800776c <_malloc_r+0xa8>
 80077be:	bf00      	nop
 80077c0:	20002f3c 	.word	0x20002f3c

080077c4 <_printf_common>:
 80077c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	4616      	mov	r6, r2
 80077ca:	4698      	mov	r8, r3
 80077cc:	688a      	ldr	r2, [r1, #8]
 80077ce:	690b      	ldr	r3, [r1, #16]
 80077d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80077d4:	4293      	cmp	r3, r2
 80077d6:	bfb8      	it	lt
 80077d8:	4613      	movlt	r3, r2
 80077da:	6033      	str	r3, [r6, #0]
 80077dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80077e0:	4607      	mov	r7, r0
 80077e2:	460c      	mov	r4, r1
 80077e4:	b10a      	cbz	r2, 80077ea <_printf_common+0x26>
 80077e6:	3301      	adds	r3, #1
 80077e8:	6033      	str	r3, [r6, #0]
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	0699      	lsls	r1, r3, #26
 80077ee:	bf42      	ittt	mi
 80077f0:	6833      	ldrmi	r3, [r6, #0]
 80077f2:	3302      	addmi	r3, #2
 80077f4:	6033      	strmi	r3, [r6, #0]
 80077f6:	6825      	ldr	r5, [r4, #0]
 80077f8:	f015 0506 	ands.w	r5, r5, #6
 80077fc:	d106      	bne.n	800780c <_printf_common+0x48>
 80077fe:	f104 0a19 	add.w	sl, r4, #25
 8007802:	68e3      	ldr	r3, [r4, #12]
 8007804:	6832      	ldr	r2, [r6, #0]
 8007806:	1a9b      	subs	r3, r3, r2
 8007808:	42ab      	cmp	r3, r5
 800780a:	dc26      	bgt.n	800785a <_printf_common+0x96>
 800780c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007810:	6822      	ldr	r2, [r4, #0]
 8007812:	3b00      	subs	r3, #0
 8007814:	bf18      	it	ne
 8007816:	2301      	movne	r3, #1
 8007818:	0692      	lsls	r2, r2, #26
 800781a:	d42b      	bmi.n	8007874 <_printf_common+0xb0>
 800781c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007820:	4641      	mov	r1, r8
 8007822:	4638      	mov	r0, r7
 8007824:	47c8      	blx	r9
 8007826:	3001      	adds	r0, #1
 8007828:	d01e      	beq.n	8007868 <_printf_common+0xa4>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	6922      	ldr	r2, [r4, #16]
 800782e:	f003 0306 	and.w	r3, r3, #6
 8007832:	2b04      	cmp	r3, #4
 8007834:	bf02      	ittt	eq
 8007836:	68e5      	ldreq	r5, [r4, #12]
 8007838:	6833      	ldreq	r3, [r6, #0]
 800783a:	1aed      	subeq	r5, r5, r3
 800783c:	68a3      	ldr	r3, [r4, #8]
 800783e:	bf0c      	ite	eq
 8007840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007844:	2500      	movne	r5, #0
 8007846:	4293      	cmp	r3, r2
 8007848:	bfc4      	itt	gt
 800784a:	1a9b      	subgt	r3, r3, r2
 800784c:	18ed      	addgt	r5, r5, r3
 800784e:	2600      	movs	r6, #0
 8007850:	341a      	adds	r4, #26
 8007852:	42b5      	cmp	r5, r6
 8007854:	d11a      	bne.n	800788c <_printf_common+0xc8>
 8007856:	2000      	movs	r0, #0
 8007858:	e008      	b.n	800786c <_printf_common+0xa8>
 800785a:	2301      	movs	r3, #1
 800785c:	4652      	mov	r2, sl
 800785e:	4641      	mov	r1, r8
 8007860:	4638      	mov	r0, r7
 8007862:	47c8      	blx	r9
 8007864:	3001      	adds	r0, #1
 8007866:	d103      	bne.n	8007870 <_printf_common+0xac>
 8007868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007870:	3501      	adds	r5, #1
 8007872:	e7c6      	b.n	8007802 <_printf_common+0x3e>
 8007874:	18e1      	adds	r1, r4, r3
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	2030      	movs	r0, #48	@ 0x30
 800787a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800787e:	4422      	add	r2, r4
 8007880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007884:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007888:	3302      	adds	r3, #2
 800788a:	e7c7      	b.n	800781c <_printf_common+0x58>
 800788c:	2301      	movs	r3, #1
 800788e:	4622      	mov	r2, r4
 8007890:	4641      	mov	r1, r8
 8007892:	4638      	mov	r0, r7
 8007894:	47c8      	blx	r9
 8007896:	3001      	adds	r0, #1
 8007898:	d0e6      	beq.n	8007868 <_printf_common+0xa4>
 800789a:	3601      	adds	r6, #1
 800789c:	e7d9      	b.n	8007852 <_printf_common+0x8e>
	...

080078a0 <_printf_i>:
 80078a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078a4:	7e0f      	ldrb	r7, [r1, #24]
 80078a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80078a8:	2f78      	cmp	r7, #120	@ 0x78
 80078aa:	4691      	mov	r9, r2
 80078ac:	4680      	mov	r8, r0
 80078ae:	460c      	mov	r4, r1
 80078b0:	469a      	mov	sl, r3
 80078b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80078b6:	d807      	bhi.n	80078c8 <_printf_i+0x28>
 80078b8:	2f62      	cmp	r7, #98	@ 0x62
 80078ba:	d80a      	bhi.n	80078d2 <_printf_i+0x32>
 80078bc:	2f00      	cmp	r7, #0
 80078be:	f000 80d2 	beq.w	8007a66 <_printf_i+0x1c6>
 80078c2:	2f58      	cmp	r7, #88	@ 0x58
 80078c4:	f000 80b9 	beq.w	8007a3a <_printf_i+0x19a>
 80078c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80078d0:	e03a      	b.n	8007948 <_printf_i+0xa8>
 80078d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80078d6:	2b15      	cmp	r3, #21
 80078d8:	d8f6      	bhi.n	80078c8 <_printf_i+0x28>
 80078da:	a101      	add	r1, pc, #4	@ (adr r1, 80078e0 <_printf_i+0x40>)
 80078dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078e0:	08007939 	.word	0x08007939
 80078e4:	0800794d 	.word	0x0800794d
 80078e8:	080078c9 	.word	0x080078c9
 80078ec:	080078c9 	.word	0x080078c9
 80078f0:	080078c9 	.word	0x080078c9
 80078f4:	080078c9 	.word	0x080078c9
 80078f8:	0800794d 	.word	0x0800794d
 80078fc:	080078c9 	.word	0x080078c9
 8007900:	080078c9 	.word	0x080078c9
 8007904:	080078c9 	.word	0x080078c9
 8007908:	080078c9 	.word	0x080078c9
 800790c:	08007a4d 	.word	0x08007a4d
 8007910:	08007977 	.word	0x08007977
 8007914:	08007a07 	.word	0x08007a07
 8007918:	080078c9 	.word	0x080078c9
 800791c:	080078c9 	.word	0x080078c9
 8007920:	08007a6f 	.word	0x08007a6f
 8007924:	080078c9 	.word	0x080078c9
 8007928:	08007977 	.word	0x08007977
 800792c:	080078c9 	.word	0x080078c9
 8007930:	080078c9 	.word	0x080078c9
 8007934:	08007a0f 	.word	0x08007a0f
 8007938:	6833      	ldr	r3, [r6, #0]
 800793a:	1d1a      	adds	r2, r3, #4
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6032      	str	r2, [r6, #0]
 8007940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007948:	2301      	movs	r3, #1
 800794a:	e09d      	b.n	8007a88 <_printf_i+0x1e8>
 800794c:	6833      	ldr	r3, [r6, #0]
 800794e:	6820      	ldr	r0, [r4, #0]
 8007950:	1d19      	adds	r1, r3, #4
 8007952:	6031      	str	r1, [r6, #0]
 8007954:	0606      	lsls	r6, r0, #24
 8007956:	d501      	bpl.n	800795c <_printf_i+0xbc>
 8007958:	681d      	ldr	r5, [r3, #0]
 800795a:	e003      	b.n	8007964 <_printf_i+0xc4>
 800795c:	0645      	lsls	r5, r0, #25
 800795e:	d5fb      	bpl.n	8007958 <_printf_i+0xb8>
 8007960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007964:	2d00      	cmp	r5, #0
 8007966:	da03      	bge.n	8007970 <_printf_i+0xd0>
 8007968:	232d      	movs	r3, #45	@ 0x2d
 800796a:	426d      	negs	r5, r5
 800796c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007970:	4859      	ldr	r0, [pc, #356]	@ (8007ad8 <_printf_i+0x238>)
 8007972:	230a      	movs	r3, #10
 8007974:	e011      	b.n	800799a <_printf_i+0xfa>
 8007976:	6821      	ldr	r1, [r4, #0]
 8007978:	6833      	ldr	r3, [r6, #0]
 800797a:	0608      	lsls	r0, r1, #24
 800797c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007980:	d402      	bmi.n	8007988 <_printf_i+0xe8>
 8007982:	0649      	lsls	r1, r1, #25
 8007984:	bf48      	it	mi
 8007986:	b2ad      	uxthmi	r5, r5
 8007988:	2f6f      	cmp	r7, #111	@ 0x6f
 800798a:	4853      	ldr	r0, [pc, #332]	@ (8007ad8 <_printf_i+0x238>)
 800798c:	6033      	str	r3, [r6, #0]
 800798e:	bf14      	ite	ne
 8007990:	230a      	movne	r3, #10
 8007992:	2308      	moveq	r3, #8
 8007994:	2100      	movs	r1, #0
 8007996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800799a:	6866      	ldr	r6, [r4, #4]
 800799c:	60a6      	str	r6, [r4, #8]
 800799e:	2e00      	cmp	r6, #0
 80079a0:	bfa2      	ittt	ge
 80079a2:	6821      	ldrge	r1, [r4, #0]
 80079a4:	f021 0104 	bicge.w	r1, r1, #4
 80079a8:	6021      	strge	r1, [r4, #0]
 80079aa:	b90d      	cbnz	r5, 80079b0 <_printf_i+0x110>
 80079ac:	2e00      	cmp	r6, #0
 80079ae:	d04b      	beq.n	8007a48 <_printf_i+0x1a8>
 80079b0:	4616      	mov	r6, r2
 80079b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80079b6:	fb03 5711 	mls	r7, r3, r1, r5
 80079ba:	5dc7      	ldrb	r7, [r0, r7]
 80079bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079c0:	462f      	mov	r7, r5
 80079c2:	42bb      	cmp	r3, r7
 80079c4:	460d      	mov	r5, r1
 80079c6:	d9f4      	bls.n	80079b2 <_printf_i+0x112>
 80079c8:	2b08      	cmp	r3, #8
 80079ca:	d10b      	bne.n	80079e4 <_printf_i+0x144>
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	07df      	lsls	r7, r3, #31
 80079d0:	d508      	bpl.n	80079e4 <_printf_i+0x144>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	6861      	ldr	r1, [r4, #4]
 80079d6:	4299      	cmp	r1, r3
 80079d8:	bfde      	ittt	le
 80079da:	2330      	movle	r3, #48	@ 0x30
 80079dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079e0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80079e4:	1b92      	subs	r2, r2, r6
 80079e6:	6122      	str	r2, [r4, #16]
 80079e8:	f8cd a000 	str.w	sl, [sp]
 80079ec:	464b      	mov	r3, r9
 80079ee:	aa03      	add	r2, sp, #12
 80079f0:	4621      	mov	r1, r4
 80079f2:	4640      	mov	r0, r8
 80079f4:	f7ff fee6 	bl	80077c4 <_printf_common>
 80079f8:	3001      	adds	r0, #1
 80079fa:	d14a      	bne.n	8007a92 <_printf_i+0x1f2>
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a00:	b004      	add	sp, #16
 8007a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	f043 0320 	orr.w	r3, r3, #32
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	4833      	ldr	r0, [pc, #204]	@ (8007adc <_printf_i+0x23c>)
 8007a10:	2778      	movs	r7, #120	@ 0x78
 8007a12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	6831      	ldr	r1, [r6, #0]
 8007a1a:	061f      	lsls	r7, r3, #24
 8007a1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a20:	d402      	bmi.n	8007a28 <_printf_i+0x188>
 8007a22:	065f      	lsls	r7, r3, #25
 8007a24:	bf48      	it	mi
 8007a26:	b2ad      	uxthmi	r5, r5
 8007a28:	6031      	str	r1, [r6, #0]
 8007a2a:	07d9      	lsls	r1, r3, #31
 8007a2c:	bf44      	itt	mi
 8007a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a32:	6023      	strmi	r3, [r4, #0]
 8007a34:	b11d      	cbz	r5, 8007a3e <_printf_i+0x19e>
 8007a36:	2310      	movs	r3, #16
 8007a38:	e7ac      	b.n	8007994 <_printf_i+0xf4>
 8007a3a:	4827      	ldr	r0, [pc, #156]	@ (8007ad8 <_printf_i+0x238>)
 8007a3c:	e7e9      	b.n	8007a12 <_printf_i+0x172>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	f023 0320 	bic.w	r3, r3, #32
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	e7f6      	b.n	8007a36 <_printf_i+0x196>
 8007a48:	4616      	mov	r6, r2
 8007a4a:	e7bd      	b.n	80079c8 <_printf_i+0x128>
 8007a4c:	6833      	ldr	r3, [r6, #0]
 8007a4e:	6825      	ldr	r5, [r4, #0]
 8007a50:	6961      	ldr	r1, [r4, #20]
 8007a52:	1d18      	adds	r0, r3, #4
 8007a54:	6030      	str	r0, [r6, #0]
 8007a56:	062e      	lsls	r6, r5, #24
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	d501      	bpl.n	8007a60 <_printf_i+0x1c0>
 8007a5c:	6019      	str	r1, [r3, #0]
 8007a5e:	e002      	b.n	8007a66 <_printf_i+0x1c6>
 8007a60:	0668      	lsls	r0, r5, #25
 8007a62:	d5fb      	bpl.n	8007a5c <_printf_i+0x1bc>
 8007a64:	8019      	strh	r1, [r3, #0]
 8007a66:	2300      	movs	r3, #0
 8007a68:	6123      	str	r3, [r4, #16]
 8007a6a:	4616      	mov	r6, r2
 8007a6c:	e7bc      	b.n	80079e8 <_printf_i+0x148>
 8007a6e:	6833      	ldr	r3, [r6, #0]
 8007a70:	1d1a      	adds	r2, r3, #4
 8007a72:	6032      	str	r2, [r6, #0]
 8007a74:	681e      	ldr	r6, [r3, #0]
 8007a76:	6862      	ldr	r2, [r4, #4]
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	f7f8 fbc0 	bl	8000200 <memchr>
 8007a80:	b108      	cbz	r0, 8007a86 <_printf_i+0x1e6>
 8007a82:	1b80      	subs	r0, r0, r6
 8007a84:	6060      	str	r0, [r4, #4]
 8007a86:	6863      	ldr	r3, [r4, #4]
 8007a88:	6123      	str	r3, [r4, #16]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a90:	e7aa      	b.n	80079e8 <_printf_i+0x148>
 8007a92:	6923      	ldr	r3, [r4, #16]
 8007a94:	4632      	mov	r2, r6
 8007a96:	4649      	mov	r1, r9
 8007a98:	4640      	mov	r0, r8
 8007a9a:	47d0      	blx	sl
 8007a9c:	3001      	adds	r0, #1
 8007a9e:	d0ad      	beq.n	80079fc <_printf_i+0x15c>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	079b      	lsls	r3, r3, #30
 8007aa4:	d413      	bmi.n	8007ace <_printf_i+0x22e>
 8007aa6:	68e0      	ldr	r0, [r4, #12]
 8007aa8:	9b03      	ldr	r3, [sp, #12]
 8007aaa:	4298      	cmp	r0, r3
 8007aac:	bfb8      	it	lt
 8007aae:	4618      	movlt	r0, r3
 8007ab0:	e7a6      	b.n	8007a00 <_printf_i+0x160>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4632      	mov	r2, r6
 8007ab6:	4649      	mov	r1, r9
 8007ab8:	4640      	mov	r0, r8
 8007aba:	47d0      	blx	sl
 8007abc:	3001      	adds	r0, #1
 8007abe:	d09d      	beq.n	80079fc <_printf_i+0x15c>
 8007ac0:	3501      	adds	r5, #1
 8007ac2:	68e3      	ldr	r3, [r4, #12]
 8007ac4:	9903      	ldr	r1, [sp, #12]
 8007ac6:	1a5b      	subs	r3, r3, r1
 8007ac8:	42ab      	cmp	r3, r5
 8007aca:	dcf2      	bgt.n	8007ab2 <_printf_i+0x212>
 8007acc:	e7eb      	b.n	8007aa6 <_printf_i+0x206>
 8007ace:	2500      	movs	r5, #0
 8007ad0:	f104 0619 	add.w	r6, r4, #25
 8007ad4:	e7f5      	b.n	8007ac2 <_printf_i+0x222>
 8007ad6:	bf00      	nop
 8007ad8:	08008412 	.word	0x08008412
 8007adc:	08008423 	.word	0x08008423

08007ae0 <__sflush_r>:
 8007ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae8:	0716      	lsls	r6, r2, #28
 8007aea:	4605      	mov	r5, r0
 8007aec:	460c      	mov	r4, r1
 8007aee:	d454      	bmi.n	8007b9a <__sflush_r+0xba>
 8007af0:	684b      	ldr	r3, [r1, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dc02      	bgt.n	8007afc <__sflush_r+0x1c>
 8007af6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dd48      	ble.n	8007b8e <__sflush_r+0xae>
 8007afc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007afe:	2e00      	cmp	r6, #0
 8007b00:	d045      	beq.n	8007b8e <__sflush_r+0xae>
 8007b02:	2300      	movs	r3, #0
 8007b04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007b08:	682f      	ldr	r7, [r5, #0]
 8007b0a:	6a21      	ldr	r1, [r4, #32]
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	d030      	beq.n	8007b72 <__sflush_r+0x92>
 8007b10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007b12:	89a3      	ldrh	r3, [r4, #12]
 8007b14:	0759      	lsls	r1, r3, #29
 8007b16:	d505      	bpl.n	8007b24 <__sflush_r+0x44>
 8007b18:	6863      	ldr	r3, [r4, #4]
 8007b1a:	1ad2      	subs	r2, r2, r3
 8007b1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007b1e:	b10b      	cbz	r3, 8007b24 <__sflush_r+0x44>
 8007b20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007b22:	1ad2      	subs	r2, r2, r3
 8007b24:	2300      	movs	r3, #0
 8007b26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007b28:	6a21      	ldr	r1, [r4, #32]
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b0      	blx	r6
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	89a3      	ldrh	r3, [r4, #12]
 8007b32:	d106      	bne.n	8007b42 <__sflush_r+0x62>
 8007b34:	6829      	ldr	r1, [r5, #0]
 8007b36:	291d      	cmp	r1, #29
 8007b38:	d82b      	bhi.n	8007b92 <__sflush_r+0xb2>
 8007b3a:	4a2a      	ldr	r2, [pc, #168]	@ (8007be4 <__sflush_r+0x104>)
 8007b3c:	410a      	asrs	r2, r1
 8007b3e:	07d6      	lsls	r6, r2, #31
 8007b40:	d427      	bmi.n	8007b92 <__sflush_r+0xb2>
 8007b42:	2200      	movs	r2, #0
 8007b44:	6062      	str	r2, [r4, #4]
 8007b46:	04d9      	lsls	r1, r3, #19
 8007b48:	6922      	ldr	r2, [r4, #16]
 8007b4a:	6022      	str	r2, [r4, #0]
 8007b4c:	d504      	bpl.n	8007b58 <__sflush_r+0x78>
 8007b4e:	1c42      	adds	r2, r0, #1
 8007b50:	d101      	bne.n	8007b56 <__sflush_r+0x76>
 8007b52:	682b      	ldr	r3, [r5, #0]
 8007b54:	b903      	cbnz	r3, 8007b58 <__sflush_r+0x78>
 8007b56:	6560      	str	r0, [r4, #84]	@ 0x54
 8007b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b5a:	602f      	str	r7, [r5, #0]
 8007b5c:	b1b9      	cbz	r1, 8007b8e <__sflush_r+0xae>
 8007b5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b62:	4299      	cmp	r1, r3
 8007b64:	d002      	beq.n	8007b6c <__sflush_r+0x8c>
 8007b66:	4628      	mov	r0, r5
 8007b68:	f000 fa3e 	bl	8007fe8 <_free_r>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b70:	e00d      	b.n	8007b8e <__sflush_r+0xae>
 8007b72:	2301      	movs	r3, #1
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b0      	blx	r6
 8007b78:	4602      	mov	r2, r0
 8007b7a:	1c50      	adds	r0, r2, #1
 8007b7c:	d1c9      	bne.n	8007b12 <__sflush_r+0x32>
 8007b7e:	682b      	ldr	r3, [r5, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d0c6      	beq.n	8007b12 <__sflush_r+0x32>
 8007b84:	2b1d      	cmp	r3, #29
 8007b86:	d001      	beq.n	8007b8c <__sflush_r+0xac>
 8007b88:	2b16      	cmp	r3, #22
 8007b8a:	d11e      	bne.n	8007bca <__sflush_r+0xea>
 8007b8c:	602f      	str	r7, [r5, #0]
 8007b8e:	2000      	movs	r0, #0
 8007b90:	e022      	b.n	8007bd8 <__sflush_r+0xf8>
 8007b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b96:	b21b      	sxth	r3, r3
 8007b98:	e01b      	b.n	8007bd2 <__sflush_r+0xf2>
 8007b9a:	690f      	ldr	r7, [r1, #16]
 8007b9c:	2f00      	cmp	r7, #0
 8007b9e:	d0f6      	beq.n	8007b8e <__sflush_r+0xae>
 8007ba0:	0793      	lsls	r3, r2, #30
 8007ba2:	680e      	ldr	r6, [r1, #0]
 8007ba4:	bf08      	it	eq
 8007ba6:	694b      	ldreq	r3, [r1, #20]
 8007ba8:	600f      	str	r7, [r1, #0]
 8007baa:	bf18      	it	ne
 8007bac:	2300      	movne	r3, #0
 8007bae:	eba6 0807 	sub.w	r8, r6, r7
 8007bb2:	608b      	str	r3, [r1, #8]
 8007bb4:	f1b8 0f00 	cmp.w	r8, #0
 8007bb8:	dde9      	ble.n	8007b8e <__sflush_r+0xae>
 8007bba:	6a21      	ldr	r1, [r4, #32]
 8007bbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007bbe:	4643      	mov	r3, r8
 8007bc0:	463a      	mov	r2, r7
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b0      	blx	r6
 8007bc6:	2800      	cmp	r0, #0
 8007bc8:	dc08      	bgt.n	8007bdc <__sflush_r+0xfc>
 8007bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bd2:	81a3      	strh	r3, [r4, #12]
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bdc:	4407      	add	r7, r0
 8007bde:	eba8 0800 	sub.w	r8, r8, r0
 8007be2:	e7e7      	b.n	8007bb4 <__sflush_r+0xd4>
 8007be4:	dfbffffe 	.word	0xdfbffffe

08007be8 <_fflush_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	690b      	ldr	r3, [r1, #16]
 8007bec:	4605      	mov	r5, r0
 8007bee:	460c      	mov	r4, r1
 8007bf0:	b913      	cbnz	r3, 8007bf8 <_fflush_r+0x10>
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	bd38      	pop	{r3, r4, r5, pc}
 8007bf8:	b118      	cbz	r0, 8007c02 <_fflush_r+0x1a>
 8007bfa:	6a03      	ldr	r3, [r0, #32]
 8007bfc:	b90b      	cbnz	r3, 8007c02 <_fflush_r+0x1a>
 8007bfe:	f7ff fa9f 	bl	8007140 <__sinit>
 8007c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d0f3      	beq.n	8007bf2 <_fflush_r+0xa>
 8007c0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007c0c:	07d0      	lsls	r0, r2, #31
 8007c0e:	d404      	bmi.n	8007c1a <_fflush_r+0x32>
 8007c10:	0599      	lsls	r1, r3, #22
 8007c12:	d402      	bmi.n	8007c1a <_fflush_r+0x32>
 8007c14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c16:	f7ff fbc8 	bl	80073aa <__retarget_lock_acquire_recursive>
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	4621      	mov	r1, r4
 8007c1e:	f7ff ff5f 	bl	8007ae0 <__sflush_r>
 8007c22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c24:	07da      	lsls	r2, r3, #31
 8007c26:	4605      	mov	r5, r0
 8007c28:	d4e4      	bmi.n	8007bf4 <_fflush_r+0xc>
 8007c2a:	89a3      	ldrh	r3, [r4, #12]
 8007c2c:	059b      	lsls	r3, r3, #22
 8007c2e:	d4e1      	bmi.n	8007bf4 <_fflush_r+0xc>
 8007c30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c32:	f7ff fbbb 	bl	80073ac <__retarget_lock_release_recursive>
 8007c36:	e7dd      	b.n	8007bf4 <_fflush_r+0xc>

08007c38 <__malloc_lock>:
 8007c38:	4801      	ldr	r0, [pc, #4]	@ (8007c40 <__malloc_lock+0x8>)
 8007c3a:	f7ff bbb6 	b.w	80073aa <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	20002f34 	.word	0x20002f34

08007c44 <__malloc_unlock>:
 8007c44:	4801      	ldr	r0, [pc, #4]	@ (8007c4c <__malloc_unlock+0x8>)
 8007c46:	f7ff bbb1 	b.w	80073ac <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	20002f34 	.word	0x20002f34

08007c50 <__sread>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	460c      	mov	r4, r1
 8007c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c58:	f000 f98a 	bl	8007f70 <_read_r>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	bfab      	itete	ge
 8007c60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c62:	89a3      	ldrhlt	r3, [r4, #12]
 8007c64:	181b      	addge	r3, r3, r0
 8007c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c6a:	bfac      	ite	ge
 8007c6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c6e:	81a3      	strhlt	r3, [r4, #12]
 8007c70:	bd10      	pop	{r4, pc}

08007c72 <__swrite>:
 8007c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c76:	461f      	mov	r7, r3
 8007c78:	898b      	ldrh	r3, [r1, #12]
 8007c7a:	05db      	lsls	r3, r3, #23
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	460c      	mov	r4, r1
 8007c80:	4616      	mov	r6, r2
 8007c82:	d505      	bpl.n	8007c90 <__swrite+0x1e>
 8007c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c88:	2302      	movs	r3, #2
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f000 f95e 	bl	8007f4c <_lseek_r>
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c9a:	81a3      	strh	r3, [r4, #12]
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	463b      	mov	r3, r7
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca6:	f000 b985 	b.w	8007fb4 <_write_r>

08007caa <__sseek>:
 8007caa:	b510      	push	{r4, lr}
 8007cac:	460c      	mov	r4, r1
 8007cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cb2:	f000 f94b 	bl	8007f4c <_lseek_r>
 8007cb6:	1c43      	adds	r3, r0, #1
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	bf15      	itete	ne
 8007cbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007cc6:	81a3      	strheq	r3, [r4, #12]
 8007cc8:	bf18      	it	ne
 8007cca:	81a3      	strhne	r3, [r4, #12]
 8007ccc:	bd10      	pop	{r4, pc}

08007cce <__sclose>:
 8007cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd2:	f000 b909 	b.w	8007ee8 <_close_r>
	...

08007cd8 <fiprintf>:
 8007cd8:	b40e      	push	{r1, r2, r3}
 8007cda:	b503      	push	{r0, r1, lr}
 8007cdc:	4601      	mov	r1, r0
 8007cde:	ab03      	add	r3, sp, #12
 8007ce0:	4805      	ldr	r0, [pc, #20]	@ (8007cf8 <fiprintf+0x20>)
 8007ce2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce6:	6800      	ldr	r0, [r0, #0]
 8007ce8:	9301      	str	r3, [sp, #4]
 8007cea:	f7ff fba9 	bl	8007440 <_vfiprintf_r>
 8007cee:	b002      	add	sp, #8
 8007cf0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cf4:	b003      	add	sp, #12
 8007cf6:	4770      	bx	lr
 8007cf8:	20000118 	.word	0x20000118

08007cfc <__swbuf_r>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	460e      	mov	r6, r1
 8007d00:	4614      	mov	r4, r2
 8007d02:	4605      	mov	r5, r0
 8007d04:	b118      	cbz	r0, 8007d0e <__swbuf_r+0x12>
 8007d06:	6a03      	ldr	r3, [r0, #32]
 8007d08:	b90b      	cbnz	r3, 8007d0e <__swbuf_r+0x12>
 8007d0a:	f7ff fa19 	bl	8007140 <__sinit>
 8007d0e:	69a3      	ldr	r3, [r4, #24]
 8007d10:	60a3      	str	r3, [r4, #8]
 8007d12:	89a3      	ldrh	r3, [r4, #12]
 8007d14:	071a      	lsls	r2, r3, #28
 8007d16:	d501      	bpl.n	8007d1c <__swbuf_r+0x20>
 8007d18:	6923      	ldr	r3, [r4, #16]
 8007d1a:	b943      	cbnz	r3, 8007d2e <__swbuf_r+0x32>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 f82a 	bl	8007d78 <__swsetup_r>
 8007d24:	b118      	cbz	r0, 8007d2e <__swbuf_r+0x32>
 8007d26:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2e:	6823      	ldr	r3, [r4, #0]
 8007d30:	6922      	ldr	r2, [r4, #16]
 8007d32:	1a98      	subs	r0, r3, r2
 8007d34:	6963      	ldr	r3, [r4, #20]
 8007d36:	b2f6      	uxtb	r6, r6
 8007d38:	4283      	cmp	r3, r0
 8007d3a:	4637      	mov	r7, r6
 8007d3c:	dc05      	bgt.n	8007d4a <__swbuf_r+0x4e>
 8007d3e:	4621      	mov	r1, r4
 8007d40:	4628      	mov	r0, r5
 8007d42:	f7ff ff51 	bl	8007be8 <_fflush_r>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d1ed      	bne.n	8007d26 <__swbuf_r+0x2a>
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	3b01      	subs	r3, #1
 8007d4e:	60a3      	str	r3, [r4, #8]
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	1c5a      	adds	r2, r3, #1
 8007d54:	6022      	str	r2, [r4, #0]
 8007d56:	701e      	strb	r6, [r3, #0]
 8007d58:	6962      	ldr	r2, [r4, #20]
 8007d5a:	1c43      	adds	r3, r0, #1
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d004      	beq.n	8007d6a <__swbuf_r+0x6e>
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	07db      	lsls	r3, r3, #31
 8007d64:	d5e1      	bpl.n	8007d2a <__swbuf_r+0x2e>
 8007d66:	2e0a      	cmp	r6, #10
 8007d68:	d1df      	bne.n	8007d2a <__swbuf_r+0x2e>
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	f7ff ff3b 	bl	8007be8 <_fflush_r>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	d0d9      	beq.n	8007d2a <__swbuf_r+0x2e>
 8007d76:	e7d6      	b.n	8007d26 <__swbuf_r+0x2a>

08007d78 <__swsetup_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4b29      	ldr	r3, [pc, #164]	@ (8007e20 <__swsetup_r+0xa8>)
 8007d7c:	4605      	mov	r5, r0
 8007d7e:	6818      	ldr	r0, [r3, #0]
 8007d80:	460c      	mov	r4, r1
 8007d82:	b118      	cbz	r0, 8007d8c <__swsetup_r+0x14>
 8007d84:	6a03      	ldr	r3, [r0, #32]
 8007d86:	b90b      	cbnz	r3, 8007d8c <__swsetup_r+0x14>
 8007d88:	f7ff f9da 	bl	8007140 <__sinit>
 8007d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d90:	0719      	lsls	r1, r3, #28
 8007d92:	d422      	bmi.n	8007dda <__swsetup_r+0x62>
 8007d94:	06da      	lsls	r2, r3, #27
 8007d96:	d407      	bmi.n	8007da8 <__swsetup_r+0x30>
 8007d98:	2209      	movs	r2, #9
 8007d9a:	602a      	str	r2, [r5, #0]
 8007d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007da0:	81a3      	strh	r3, [r4, #12]
 8007da2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007da6:	e033      	b.n	8007e10 <__swsetup_r+0x98>
 8007da8:	0758      	lsls	r0, r3, #29
 8007daa:	d512      	bpl.n	8007dd2 <__swsetup_r+0x5a>
 8007dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dae:	b141      	cbz	r1, 8007dc2 <__swsetup_r+0x4a>
 8007db0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007db4:	4299      	cmp	r1, r3
 8007db6:	d002      	beq.n	8007dbe <__swsetup_r+0x46>
 8007db8:	4628      	mov	r0, r5
 8007dba:	f000 f915 	bl	8007fe8 <_free_r>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	2300      	movs	r3, #0
 8007dcc:	6063      	str	r3, [r4, #4]
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	f043 0308 	orr.w	r3, r3, #8
 8007dd8:	81a3      	strh	r3, [r4, #12]
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	b94b      	cbnz	r3, 8007df2 <__swsetup_r+0x7a>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de8:	d003      	beq.n	8007df2 <__swsetup_r+0x7a>
 8007dea:	4621      	mov	r1, r4
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 f83f 	bl	8007e70 <__smakebuf_r>
 8007df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007df6:	f013 0201 	ands.w	r2, r3, #1
 8007dfa:	d00a      	beq.n	8007e12 <__swsetup_r+0x9a>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	60a2      	str	r2, [r4, #8]
 8007e00:	6962      	ldr	r2, [r4, #20]
 8007e02:	4252      	negs	r2, r2
 8007e04:	61a2      	str	r2, [r4, #24]
 8007e06:	6922      	ldr	r2, [r4, #16]
 8007e08:	b942      	cbnz	r2, 8007e1c <__swsetup_r+0xa4>
 8007e0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e0e:	d1c5      	bne.n	8007d9c <__swsetup_r+0x24>
 8007e10:	bd38      	pop	{r3, r4, r5, pc}
 8007e12:	0799      	lsls	r1, r3, #30
 8007e14:	bf58      	it	pl
 8007e16:	6962      	ldrpl	r2, [r4, #20]
 8007e18:	60a2      	str	r2, [r4, #8]
 8007e1a:	e7f4      	b.n	8007e06 <__swsetup_r+0x8e>
 8007e1c:	2000      	movs	r0, #0
 8007e1e:	e7f7      	b.n	8007e10 <__swsetup_r+0x98>
 8007e20:	20000118 	.word	0x20000118

08007e24 <__swhatbuf_r>:
 8007e24:	b570      	push	{r4, r5, r6, lr}
 8007e26:	460c      	mov	r4, r1
 8007e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e2c:	2900      	cmp	r1, #0
 8007e2e:	b096      	sub	sp, #88	@ 0x58
 8007e30:	4615      	mov	r5, r2
 8007e32:	461e      	mov	r6, r3
 8007e34:	da0d      	bge.n	8007e52 <__swhatbuf_r+0x2e>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007e3c:	f04f 0100 	mov.w	r1, #0
 8007e40:	bf14      	ite	ne
 8007e42:	2340      	movne	r3, #64	@ 0x40
 8007e44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007e48:	2000      	movs	r0, #0
 8007e4a:	6031      	str	r1, [r6, #0]
 8007e4c:	602b      	str	r3, [r5, #0]
 8007e4e:	b016      	add	sp, #88	@ 0x58
 8007e50:	bd70      	pop	{r4, r5, r6, pc}
 8007e52:	466a      	mov	r2, sp
 8007e54:	f000 f858 	bl	8007f08 <_fstat_r>
 8007e58:	2800      	cmp	r0, #0
 8007e5a:	dbec      	blt.n	8007e36 <__swhatbuf_r+0x12>
 8007e5c:	9901      	ldr	r1, [sp, #4]
 8007e5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007e62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007e66:	4259      	negs	r1, r3
 8007e68:	4159      	adcs	r1, r3
 8007e6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007e6e:	e7eb      	b.n	8007e48 <__swhatbuf_r+0x24>

08007e70 <__smakebuf_r>:
 8007e70:	898b      	ldrh	r3, [r1, #12]
 8007e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e74:	079d      	lsls	r5, r3, #30
 8007e76:	4606      	mov	r6, r0
 8007e78:	460c      	mov	r4, r1
 8007e7a:	d507      	bpl.n	8007e8c <__smakebuf_r+0x1c>
 8007e7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007e80:	6023      	str	r3, [r4, #0]
 8007e82:	6123      	str	r3, [r4, #16]
 8007e84:	2301      	movs	r3, #1
 8007e86:	6163      	str	r3, [r4, #20]
 8007e88:	b003      	add	sp, #12
 8007e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e8c:	ab01      	add	r3, sp, #4
 8007e8e:	466a      	mov	r2, sp
 8007e90:	f7ff ffc8 	bl	8007e24 <__swhatbuf_r>
 8007e94:	9f00      	ldr	r7, [sp, #0]
 8007e96:	4605      	mov	r5, r0
 8007e98:	4639      	mov	r1, r7
 8007e9a:	4630      	mov	r0, r6
 8007e9c:	f7ff fc12 	bl	80076c4 <_malloc_r>
 8007ea0:	b948      	cbnz	r0, 8007eb6 <__smakebuf_r+0x46>
 8007ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea6:	059a      	lsls	r2, r3, #22
 8007ea8:	d4ee      	bmi.n	8007e88 <__smakebuf_r+0x18>
 8007eaa:	f023 0303 	bic.w	r3, r3, #3
 8007eae:	f043 0302 	orr.w	r3, r3, #2
 8007eb2:	81a3      	strh	r3, [r4, #12]
 8007eb4:	e7e2      	b.n	8007e7c <__smakebuf_r+0xc>
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	6020      	str	r0, [r4, #0]
 8007eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ebe:	81a3      	strh	r3, [r4, #12]
 8007ec0:	9b01      	ldr	r3, [sp, #4]
 8007ec2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ec6:	b15b      	cbz	r3, 8007ee0 <__smakebuf_r+0x70>
 8007ec8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f000 f82d 	bl	8007f2c <_isatty_r>
 8007ed2:	b128      	cbz	r0, 8007ee0 <__smakebuf_r+0x70>
 8007ed4:	89a3      	ldrh	r3, [r4, #12]
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	f043 0301 	orr.w	r3, r3, #1
 8007ede:	81a3      	strh	r3, [r4, #12]
 8007ee0:	89a3      	ldrh	r3, [r4, #12]
 8007ee2:	431d      	orrs	r5, r3
 8007ee4:	81a5      	strh	r5, [r4, #12]
 8007ee6:	e7cf      	b.n	8007e88 <__smakebuf_r+0x18>

08007ee8 <_close_r>:
 8007ee8:	b538      	push	{r3, r4, r5, lr}
 8007eea:	4d06      	ldr	r5, [pc, #24]	@ (8007f04 <_close_r+0x1c>)
 8007eec:	2300      	movs	r3, #0
 8007eee:	4604      	mov	r4, r0
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	602b      	str	r3, [r5, #0]
 8007ef4:	f7f9 f854 	bl	8000fa0 <_close>
 8007ef8:	1c43      	adds	r3, r0, #1
 8007efa:	d102      	bne.n	8007f02 <_close_r+0x1a>
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	b103      	cbz	r3, 8007f02 <_close_r+0x1a>
 8007f00:	6023      	str	r3, [r4, #0]
 8007f02:	bd38      	pop	{r3, r4, r5, pc}
 8007f04:	20002f40 	.word	0x20002f40

08007f08 <_fstat_r>:
 8007f08:	b538      	push	{r3, r4, r5, lr}
 8007f0a:	4d07      	ldr	r5, [pc, #28]	@ (8007f28 <_fstat_r+0x20>)
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	4604      	mov	r4, r0
 8007f10:	4608      	mov	r0, r1
 8007f12:	4611      	mov	r1, r2
 8007f14:	602b      	str	r3, [r5, #0]
 8007f16:	f7f9 f84f 	bl	8000fb8 <_fstat>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	d102      	bne.n	8007f24 <_fstat_r+0x1c>
 8007f1e:	682b      	ldr	r3, [r5, #0]
 8007f20:	b103      	cbz	r3, 8007f24 <_fstat_r+0x1c>
 8007f22:	6023      	str	r3, [r4, #0]
 8007f24:	bd38      	pop	{r3, r4, r5, pc}
 8007f26:	bf00      	nop
 8007f28:	20002f40 	.word	0x20002f40

08007f2c <_isatty_r>:
 8007f2c:	b538      	push	{r3, r4, r5, lr}
 8007f2e:	4d06      	ldr	r5, [pc, #24]	@ (8007f48 <_isatty_r+0x1c>)
 8007f30:	2300      	movs	r3, #0
 8007f32:	4604      	mov	r4, r0
 8007f34:	4608      	mov	r0, r1
 8007f36:	602b      	str	r3, [r5, #0]
 8007f38:	f7f9 f84e 	bl	8000fd8 <_isatty>
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	d102      	bne.n	8007f46 <_isatty_r+0x1a>
 8007f40:	682b      	ldr	r3, [r5, #0]
 8007f42:	b103      	cbz	r3, 8007f46 <_isatty_r+0x1a>
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	bd38      	pop	{r3, r4, r5, pc}
 8007f48:	20002f40 	.word	0x20002f40

08007f4c <_lseek_r>:
 8007f4c:	b538      	push	{r3, r4, r5, lr}
 8007f4e:	4d07      	ldr	r5, [pc, #28]	@ (8007f6c <_lseek_r+0x20>)
 8007f50:	4604      	mov	r4, r0
 8007f52:	4608      	mov	r0, r1
 8007f54:	4611      	mov	r1, r2
 8007f56:	2200      	movs	r2, #0
 8007f58:	602a      	str	r2, [r5, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	f7f9 f847 	bl	8000fee <_lseek>
 8007f60:	1c43      	adds	r3, r0, #1
 8007f62:	d102      	bne.n	8007f6a <_lseek_r+0x1e>
 8007f64:	682b      	ldr	r3, [r5, #0]
 8007f66:	b103      	cbz	r3, 8007f6a <_lseek_r+0x1e>
 8007f68:	6023      	str	r3, [r4, #0]
 8007f6a:	bd38      	pop	{r3, r4, r5, pc}
 8007f6c:	20002f40 	.word	0x20002f40

08007f70 <_read_r>:
 8007f70:	b538      	push	{r3, r4, r5, lr}
 8007f72:	4d07      	ldr	r5, [pc, #28]	@ (8007f90 <_read_r+0x20>)
 8007f74:	4604      	mov	r4, r0
 8007f76:	4608      	mov	r0, r1
 8007f78:	4611      	mov	r1, r2
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	602a      	str	r2, [r5, #0]
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f7f8 ffd5 	bl	8000f2e <_read>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_read_r+0x1e>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_read_r+0x1e>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	20002f40 	.word	0x20002f40

08007f94 <_sbrk_r>:
 8007f94:	b538      	push	{r3, r4, r5, lr}
 8007f96:	4d06      	ldr	r5, [pc, #24]	@ (8007fb0 <_sbrk_r+0x1c>)
 8007f98:	2300      	movs	r3, #0
 8007f9a:	4604      	mov	r4, r0
 8007f9c:	4608      	mov	r0, r1
 8007f9e:	602b      	str	r3, [r5, #0]
 8007fa0:	f7f9 f832 	bl	8001008 <_sbrk>
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d102      	bne.n	8007fae <_sbrk_r+0x1a>
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	b103      	cbz	r3, 8007fae <_sbrk_r+0x1a>
 8007fac:	6023      	str	r3, [r4, #0]
 8007fae:	bd38      	pop	{r3, r4, r5, pc}
 8007fb0:	20002f40 	.word	0x20002f40

08007fb4 <_write_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4d07      	ldr	r5, [pc, #28]	@ (8007fd4 <_write_r+0x20>)
 8007fb8:	4604      	mov	r4, r0
 8007fba:	4608      	mov	r0, r1
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	602a      	str	r2, [r5, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f7f8 ffd0 	bl	8000f68 <_write>
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	d102      	bne.n	8007fd2 <_write_r+0x1e>
 8007fcc:	682b      	ldr	r3, [r5, #0]
 8007fce:	b103      	cbz	r3, 8007fd2 <_write_r+0x1e>
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	bd38      	pop	{r3, r4, r5, pc}
 8007fd4:	20002f40 	.word	0x20002f40

08007fd8 <abort>:
 8007fd8:	b508      	push	{r3, lr}
 8007fda:	2006      	movs	r0, #6
 8007fdc:	f000 f876 	bl	80080cc <raise>
 8007fe0:	2001      	movs	r0, #1
 8007fe2:	f7f8 ff99 	bl	8000f18 <_exit>
	...

08007fe8 <_free_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4605      	mov	r5, r0
 8007fec:	2900      	cmp	r1, #0
 8007fee:	d041      	beq.n	8008074 <_free_r+0x8c>
 8007ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ff4:	1f0c      	subs	r4, r1, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	bfb8      	it	lt
 8007ffa:	18e4      	addlt	r4, r4, r3
 8007ffc:	f7ff fe1c 	bl	8007c38 <__malloc_lock>
 8008000:	4a1d      	ldr	r2, [pc, #116]	@ (8008078 <_free_r+0x90>)
 8008002:	6813      	ldr	r3, [r2, #0]
 8008004:	b933      	cbnz	r3, 8008014 <_free_r+0x2c>
 8008006:	6063      	str	r3, [r4, #4]
 8008008:	6014      	str	r4, [r2, #0]
 800800a:	4628      	mov	r0, r5
 800800c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008010:	f7ff be18 	b.w	8007c44 <__malloc_unlock>
 8008014:	42a3      	cmp	r3, r4
 8008016:	d908      	bls.n	800802a <_free_r+0x42>
 8008018:	6820      	ldr	r0, [r4, #0]
 800801a:	1821      	adds	r1, r4, r0
 800801c:	428b      	cmp	r3, r1
 800801e:	bf01      	itttt	eq
 8008020:	6819      	ldreq	r1, [r3, #0]
 8008022:	685b      	ldreq	r3, [r3, #4]
 8008024:	1809      	addeq	r1, r1, r0
 8008026:	6021      	streq	r1, [r4, #0]
 8008028:	e7ed      	b.n	8008006 <_free_r+0x1e>
 800802a:	461a      	mov	r2, r3
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	b10b      	cbz	r3, 8008034 <_free_r+0x4c>
 8008030:	42a3      	cmp	r3, r4
 8008032:	d9fa      	bls.n	800802a <_free_r+0x42>
 8008034:	6811      	ldr	r1, [r2, #0]
 8008036:	1850      	adds	r0, r2, r1
 8008038:	42a0      	cmp	r0, r4
 800803a:	d10b      	bne.n	8008054 <_free_r+0x6c>
 800803c:	6820      	ldr	r0, [r4, #0]
 800803e:	4401      	add	r1, r0
 8008040:	1850      	adds	r0, r2, r1
 8008042:	4283      	cmp	r3, r0
 8008044:	6011      	str	r1, [r2, #0]
 8008046:	d1e0      	bne.n	800800a <_free_r+0x22>
 8008048:	6818      	ldr	r0, [r3, #0]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	6053      	str	r3, [r2, #4]
 800804e:	4408      	add	r0, r1
 8008050:	6010      	str	r0, [r2, #0]
 8008052:	e7da      	b.n	800800a <_free_r+0x22>
 8008054:	d902      	bls.n	800805c <_free_r+0x74>
 8008056:	230c      	movs	r3, #12
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	e7d6      	b.n	800800a <_free_r+0x22>
 800805c:	6820      	ldr	r0, [r4, #0]
 800805e:	1821      	adds	r1, r4, r0
 8008060:	428b      	cmp	r3, r1
 8008062:	bf04      	itt	eq
 8008064:	6819      	ldreq	r1, [r3, #0]
 8008066:	685b      	ldreq	r3, [r3, #4]
 8008068:	6063      	str	r3, [r4, #4]
 800806a:	bf04      	itt	eq
 800806c:	1809      	addeq	r1, r1, r0
 800806e:	6021      	streq	r1, [r4, #0]
 8008070:	6054      	str	r4, [r2, #4]
 8008072:	e7ca      	b.n	800800a <_free_r+0x22>
 8008074:	bd38      	pop	{r3, r4, r5, pc}
 8008076:	bf00      	nop
 8008078:	20002f3c 	.word	0x20002f3c

0800807c <_raise_r>:
 800807c:	291f      	cmp	r1, #31
 800807e:	b538      	push	{r3, r4, r5, lr}
 8008080:	4605      	mov	r5, r0
 8008082:	460c      	mov	r4, r1
 8008084:	d904      	bls.n	8008090 <_raise_r+0x14>
 8008086:	2316      	movs	r3, #22
 8008088:	6003      	str	r3, [r0, #0]
 800808a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800808e:	bd38      	pop	{r3, r4, r5, pc}
 8008090:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008092:	b112      	cbz	r2, 800809a <_raise_r+0x1e>
 8008094:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008098:	b94b      	cbnz	r3, 80080ae <_raise_r+0x32>
 800809a:	4628      	mov	r0, r5
 800809c:	f000 f830 	bl	8008100 <_getpid_r>
 80080a0:	4622      	mov	r2, r4
 80080a2:	4601      	mov	r1, r0
 80080a4:	4628      	mov	r0, r5
 80080a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080aa:	f000 b817 	b.w	80080dc <_kill_r>
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d00a      	beq.n	80080c8 <_raise_r+0x4c>
 80080b2:	1c59      	adds	r1, r3, #1
 80080b4:	d103      	bne.n	80080be <_raise_r+0x42>
 80080b6:	2316      	movs	r3, #22
 80080b8:	6003      	str	r3, [r0, #0]
 80080ba:	2001      	movs	r0, #1
 80080bc:	e7e7      	b.n	800808e <_raise_r+0x12>
 80080be:	2100      	movs	r1, #0
 80080c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80080c4:	4620      	mov	r0, r4
 80080c6:	4798      	blx	r3
 80080c8:	2000      	movs	r0, #0
 80080ca:	e7e0      	b.n	800808e <_raise_r+0x12>

080080cc <raise>:
 80080cc:	4b02      	ldr	r3, [pc, #8]	@ (80080d8 <raise+0xc>)
 80080ce:	4601      	mov	r1, r0
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f7ff bfd3 	b.w	800807c <_raise_r>
 80080d6:	bf00      	nop
 80080d8:	20000118 	.word	0x20000118

080080dc <_kill_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4d07      	ldr	r5, [pc, #28]	@ (80080fc <_kill_r+0x20>)
 80080e0:	2300      	movs	r3, #0
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	602b      	str	r3, [r5, #0]
 80080ea:	f7f8 ff05 	bl	8000ef8 <_kill>
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	d102      	bne.n	80080f8 <_kill_r+0x1c>
 80080f2:	682b      	ldr	r3, [r5, #0]
 80080f4:	b103      	cbz	r3, 80080f8 <_kill_r+0x1c>
 80080f6:	6023      	str	r3, [r4, #0]
 80080f8:	bd38      	pop	{r3, r4, r5, pc}
 80080fa:	bf00      	nop
 80080fc:	20002f40 	.word	0x20002f40

08008100 <_getpid_r>:
 8008100:	f7f8 bef2 	b.w	8000ee8 <_getpid>

08008104 <_init>:
 8008104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008106:	bf00      	nop
 8008108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800810a:	bc08      	pop	{r3}
 800810c:	469e      	mov	lr, r3
 800810e:	4770      	bx	lr

08008110 <_fini>:
 8008110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008112:	bf00      	nop
 8008114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008116:	bc08      	pop	{r3}
 8008118:	469e      	mov	lr, r3
 800811a:	4770      	bx	lr
