
Audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800835c  0800835c  0000935c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008818  08008818  0000a17c  2**0
                  CONTENTS
  4 .ARM          00000008  08008818  08008818  00009818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008820  08008820  0000a17c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00009820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008824  08008824  00009824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08008828  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002dd8  2000017c  080089a4  0000a17c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f54  080089a4  0000af54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a17c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000170dc  00000000  00000000  0000a1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e08  00000000  00000000  00021288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001338  00000000  00000000  00025090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e9b  00000000  00000000  000263c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a141  00000000  00000000  00027263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018eb4  00000000  00000000  000513a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4ff8  00000000  00000000  0006a258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f250  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005768  00000000  00000000  0015f294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  001649fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000017c 	.word	0x2000017c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008344 	.word	0x08008344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000180 	.word	0x20000180
 80001cc:	08008344 	.word	0x08008344

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MCP17023_write_register>:
uint8_t Spitxbuffer[3];
uint8_t led_state = 0xFF;
volatile int spi_tx_complete = 0;


void MCP17023_write_register(uint8_t addr, uint8_t value){
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	460a      	mov	r2, r1
 800059a:	71fb      	strb	r3, [r7, #7]
 800059c:	4613      	mov	r3, r2
 800059e:	71bb      	strb	r3, [r7, #6]

		Spitxbuffer[0] = MCP23S17_WRITE_OPCODE;
 80005a0:	4b0e      	ldr	r3, [pc, #56]	@ (80005dc <MCP17023_write_register+0x4c>)
 80005a2:	2240      	movs	r2, #64	@ 0x40
 80005a4:	701a      	strb	r2, [r3, #0]
		Spitxbuffer[1] = addr;
 80005a6:	4a0d      	ldr	r2, [pc, #52]	@ (80005dc <MCP17023_write_register+0x4c>)
 80005a8:	79fb      	ldrb	r3, [r7, #7]
 80005aa:	7053      	strb	r3, [r2, #1]
		Spitxbuffer[2] = value;
 80005ac:	4a0b      	ldr	r2, [pc, #44]	@ (80005dc <MCP17023_write_register+0x4c>)
 80005ae:	79bb      	ldrb	r3, [r7, #6]
 80005b0:	7093      	strb	r3, [r2, #2]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <MCP17023_write_register+0x50>)
 80005b8:	f001 fa4a 	bl	8001a50 <HAL_GPIO_WritePin>

		HAL_SPI_Transmit(&hspi3, Spitxbuffer, 3, HAL_MAX_DELAY);
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295
 80005c0:	2203      	movs	r2, #3
 80005c2:	4906      	ldr	r1, [pc, #24]	@ (80005dc <MCP17023_write_register+0x4c>)
 80005c4:	4807      	ldr	r0, [pc, #28]	@ (80005e4 <MCP17023_write_register+0x54>)
 80005c6:	f002 fe1e 	bl	8003206 <HAL_SPI_Transmit>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	4804      	ldr	r0, [pc, #16]	@ (80005e0 <MCP17023_write_register+0x50>)
 80005d0:	f001 fa3e 	bl	8001a50 <HAL_GPIO_WritePin>

}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000198 	.word	0x20000198
 80005e0:	48000400 	.word	0x48000400
 80005e4:	200004b0 	.word	0x200004b0

080005e8 <MCP17023_init>:

void MCP17023_init(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	MCP17023_write_register(GPIOA_REG, 0xFF);
 80005ec:	21ff      	movs	r1, #255	@ 0xff
 80005ee:	2012      	movs	r0, #18
 80005f0:	f7ff ffce 	bl	8000590 <MCP17023_write_register>
	MCP17023_write_register(GPIOB_REG, 0xFF);
 80005f4:	21ff      	movs	r1, #255	@ 0xff
 80005f6:	2013      	movs	r0, #19
 80005f8:	f7ff ffca 	bl	8000590 <MCP17023_write_register>
	MCP17023_write_register(IODIRA_REG, 0x00);
 80005fc:	2100      	movs	r1, #0
 80005fe:	2000      	movs	r0, #0
 8000600:	f7ff ffc6 	bl	8000590 <MCP17023_write_register>
	MCP17023_write_register(IODIRB_REG, 0x00);
 8000604:	2100      	movs	r1, #0
 8000606:	2001      	movs	r0, #1
 8000608:	f7ff ffc2 	bl	8000590 <MCP17023_write_register>

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}

08000610 <MCP17023_set_led>:

void MCP17023_set_led (uint8_t addrled){
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]

	MCP17023_write_register(GPIOA_REG, addrled);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4619      	mov	r1, r3
 800061e:	2012      	movs	r0, #18
 8000620:	f7ff ffb6 	bl	8000590 <MCP17023_write_register>
	MCP17023_write_register(GPIOB_REG, addrled);
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	4619      	mov	r1, r3
 8000628:	2013      	movs	r0, #19
 800062a:	f7ff ffb1 	bl	8000590 <MCP17023_write_register>

}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <MCP17023_chenillard>:

void MCP17023_chenillard(char **argv){
 8000636:	b580      	push	{r7, lr}
 8000638:	b084      	sub	sp, #16
 800063a:	af00      	add	r7, sp, #0
 800063c:	6078      	str	r0, [r7, #4]

	uint8_t actual_led = 0xFF;
 800063e:	23ff      	movs	r3, #255	@ 0xff
 8000640:	73fb      	strb	r3, [r7, #15]

	for(;;){

		if (actual_led == 0x00){
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <MCP17023_chenillard+0x16>
			actual_led = 0XFF;
 8000648:	23ff      	movs	r3, #255	@ 0xff
 800064a:	73fb      	strb	r3, [r7, #15]
		}

		MCP17023_set_led(actual_led);
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	4618      	mov	r0, r3
 8000650:	f7ff ffde 	bl	8000610 <MCP17023_set_led>
		actual_led <<= 1;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]

		HAL_Delay(500);
 800065a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800065e:	f000 fe99 	bl	8001394 <HAL_Delay>
		if (actual_led == 0x00){
 8000662:	e7ee      	b.n	8000642 <MCP17023_chenillard+0xc>

08000664 <MCP17023_led>:
	}
}

int MCP17023_led(char **argv){
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]

	int nbrLed = atoi(argv[1]);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	3304      	adds	r3, #4
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4618      	mov	r0, r3
 8000674:	f006 fd70 	bl	8007158 <atoi>
 8000678:	60f8      	str	r0, [r7, #12]
	int setReset = atoi(argv[2]);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	3308      	adds	r3, #8
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4618      	mov	r0, r3
 8000682:	f006 fd69 	bl	8007158 <atoi>
 8000686:	60b8      	str	r0, [r7, #8]

	printf("Numero de led %d, set %d \r\n", nbrLed, setReset);
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	68f9      	ldr	r1, [r7, #12]
 800068c:	4821      	ldr	r0, [pc, #132]	@ (8000714 <MCP17023_led+0xb0>)
 800068e:	f006 fead 	bl	80073ec <iprintf>

	if(nbrLed < 0 || nbrLed > 8){
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2b00      	cmp	r3, #0
 8000696:	db02      	blt.n	800069e <MCP17023_led+0x3a>
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b08      	cmp	r3, #8
 800069c:	dd04      	ble.n	80006a8 <MCP17023_led+0x44>
		printf("Le nombre de led est pas valide \r\n");
 800069e:	481e      	ldr	r0, [pc, #120]	@ (8000718 <MCP17023_led+0xb4>)
 80006a0:	f006 ff0c 	bl	80074bc <puts>
		return 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	e030      	b.n	800070a <MCP17023_led+0xa6>
	}

	if(setReset < 0 || setReset > 1){
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	db02      	blt.n	80006b4 <MCP17023_led+0x50>
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	dd04      	ble.n	80006be <MCP17023_led+0x5a>
		printf("Veuillez saisir un deuxième argument correct \r\n");
 80006b4:	4819      	ldr	r0, [pc, #100]	@ (800071c <MCP17023_led+0xb8>)
 80006b6:	f006 ff01 	bl	80074bc <puts>
		return 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	e025      	b.n	800070a <MCP17023_led+0xa6>
	}

    if (setReset == 1) {
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d10f      	bne.n	80006e4 <MCP17023_led+0x80>
        // Action: SET (éteindre la LED correspondante en mettant le bit à 1)
        led_state &= ~(1 << nbrLed);
 80006c4:	2201      	movs	r2, #1
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	43db      	mvns	r3, r3
 80006d0:	b25a      	sxtb	r2, r3
 80006d2:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <MCP17023_led+0xbc>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b25b      	sxtb	r3, r3
 80006d8:	4013      	ands	r3, r2
 80006da:	b25b      	sxtb	r3, r3
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MCP17023_led+0xbc>)
 80006e0:	701a      	strb	r2, [r3, #0]
 80006e2:	e00c      	b.n	80006fe <MCP17023_led+0x9a>
    } else {
        // Action: RESET (allumer la LED correspondante en mettant le bit à 0)
        led_state |= (1 << nbrLed);
 80006e4:	2201      	movs	r2, #1
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	b25a      	sxtb	r2, r3
 80006ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <MCP17023_led+0xbc>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b25b      	sxtb	r3, r3
 80006f4:	4313      	orrs	r3, r2
 80006f6:	b25b      	sxtb	r3, r3
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MCP17023_led+0xbc>)
 80006fc:	701a      	strb	r2, [r3, #0]
    }


    MCP17023_set_led(led_state);
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <MCP17023_led+0xbc>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff84 	bl	8000610 <MCP17023_set_led>

    return 1;
 8000708:	2301      	movs	r3, #1

}
 800070a:	4618      	mov	r0, r3
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	0800835c 	.word	0x0800835c
 8000718:	08008378 	.word	0x08008378
 800071c:	0800839c 	.word	0x0800839c
 8000720:	20000000 	.word	0x20000000

08000724 <HAL_UART_RxCpltCallback>:
 */

/*********** PREEMPTION PRIORITY  ***********/

/*********** PREEMPTION PRIORITY 5 ***********/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	/** SHELL INTERRUPTIONS **/
	if (huart->Instance == USART2) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a0d      	ldr	r2, [pc, #52]	@ (8000768 <HAL_UART_RxCpltCallback+0x44>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d114      	bne.n	8000760 <HAL_UART_RxCpltCallback+0x3c>
		BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
		xSemaphoreGiveFromISR(sem_uart_read, &pxHigherPriorityTaskWoken);
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_UART_RxCpltCallback+0x48>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f107 020c 	add.w	r2, r7, #12
 8000742:	4611      	mov	r1, r2
 8000744:	4618      	mov	r0, r3
 8000746:	f004 ff2f 	bl	80055a8 <xQueueGiveFromISR>
		portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d007      	beq.n	8000760 <HAL_UART_RxCpltCallback+0x3c>
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <HAL_UART_RxCpltCallback+0x4c>)
 8000752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	f3bf 8f4f 	dsb	sy
 800075c:	f3bf 8f6f 	isb	sy
	}
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40004400 	.word	0x40004400
 800076c:	2000019c 	.word	0x2000019c
 8000770:	e000ed04 	.word	0xe000ed04

08000774 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4a07      	ldr	r2, [pc, #28]	@ (80007a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000784:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	4a06      	ldr	r2, [pc, #24]	@ (80007a4 <vApplicationGetIdleTaskMemory+0x30>)
 800078a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2280      	movs	r2, #128	@ 0x80
 8000790:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	200001a4 	.word	0x200001a4
 80007a4:	200001f8 	.word	0x200001f8

080007a8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80007a8:	b5b0      	push	{r4, r5, r7, lr}
 80007aa:	b088      	sub	sp, #32
 80007ac:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007ae:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_FREERTOS_Init+0x30>)
 80007b0:	1d3c      	adds	r4, r7, #4
 80007b2:	461d      	mov	r5, r3
 80007b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2100      	movs	r1, #0
 80007c4:	4618      	mov	r0, r3
 80007c6:	f004 fd16 	bl	80051f6 <osThreadCreate>
 80007ca:	4603      	mov	r3, r0
 80007cc:	4a03      	ldr	r2, [pc, #12]	@ (80007dc <MX_FREERTOS_Init+0x34>)
 80007ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bdb0      	pop	{r4, r5, r7, pc}
 80007d8:	080083d8 	.word	0x080083d8
 80007dc:	200001a0 	.word	0x200001a0

080007e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f004 fd50 	bl	800528e <osDelay>
 80007ee:	e7fb      	b.n	80007e8 <StartDefaultTask+0x8>

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 800080c:	f043 0304 	orr.w	r3, r3, #4
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0304 	and.w	r3, r3, #4
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081e:	4b32      	ldr	r3, [pc, #200]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	4a31      	ldr	r2, [pc, #196]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800082a:	4b2f      	ldr	r3, [pc, #188]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	4b2c      	ldr	r3, [pc, #176]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	4a2b      	ldr	r2, [pc, #172]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000842:	4b29      	ldr	r3, [pc, #164]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	4b26      	ldr	r3, [pc, #152]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000852:	4a25      	ldr	r2, [pc, #148]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800085a:	4b23      	ldr	r3, [pc, #140]	@ (80008e8 <MX_GPIO_Init+0xf8>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000866:	2201      	movs	r2, #1
 8000868:	2101      	movs	r1, #1
 800086a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086e:	f001 f8ef 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2120      	movs	r1, #32
 8000876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800087a:	f001 f8e9 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2180      	movs	r1, #128	@ 0x80
 8000882:	481a      	ldr	r0, [pc, #104]	@ (80008ec <MX_GPIO_Init+0xfc>)
 8000884:	f001 f8e4 	bl	8001a50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	4814      	ldr	r0, [pc, #80]	@ (80008f0 <MX_GPIO_Init+0x100>)
 80008a0:	f000 ff2c 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80008a4:	2321      	movs	r3, #33	@ 0x21
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008be:	f000 ff1d 	bl	80016fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4804      	ldr	r0, [pc, #16]	@ (80008ec <MX_GPIO_Init+0xfc>)
 80008da:	f000 ff0f 	bl	80016fc <HAL_GPIO_Init>

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	@ 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000400 	.word	0x48000400
 80008f0:	48000800 	.word	0x48000800

080008f4 <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

int __io_putchar(int chr){
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&chr, 1, HAL_MAX_DELAY);
 80008fc:	1d39      	adds	r1, r7, #4
 80008fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000902:	2201      	movs	r2, #1
 8000904:	4803      	ldr	r0, [pc, #12]	@ (8000914 <__io_putchar+0x20>)
 8000906:	f003 f8bb 	bl	8003a80 <HAL_UART_Transmit>
	return chr;
 800090a:	687b      	ldr	r3, [r7, #4]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000518 	.word	0x20000518

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
	BaseType_t xReturned;
	TaskHandle_t xHandle1 = NULL;
 800091e:	2300      	movs	r3, #0
 8000920:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fcbb 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f82d 	bl	8000984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f7ff ff61 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800092e:	f000 fbf7 	bl	8001120 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000932:	f000 fa11 	bl	8000d58 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  MCP17023_init();
 8000936:	f7ff fe57 	bl	80005e8 <MCP17023_init>
  shell_init();
 800093a:	f000 f87b 	bl	8000a34 <shell_init>

  xReturned = xTaskCreate(
 800093e:	463b      	mov	r3, r7
 8000940:	9301      	str	r3, [sp, #4]
 8000942:	2300      	movs	r3, #0
 8000944:	9300      	str	r3, [sp, #0]
 8000946:	2300      	movs	r3, #0
 8000948:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800094c:	490a      	ldr	r1, [pc, #40]	@ (8000978 <main+0x60>)
 800094e:	480b      	ldr	r0, [pc, #44]	@ (800097c <main+0x64>)
 8000950:	f005 f8aa 	bl	8005aa8 <xTaskCreate>
 8000954:	6078      	str	r0, [r7, #4]
		  STACK_SIZE,
		  (void*) NULL,
		  tskIDLE_PRIORITY,
		  &xHandle1);

  if(xReturned != pdPASS){
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2b01      	cmp	r3, #1
 800095a:	d004      	beq.n	8000966 <main+0x4e>
	  printf("Le shell fonctionne pas mon reuf. \r\n");
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <main+0x68>)
 800095e:	f006 fdad 	bl	80074bc <puts>
	  Error_Handler();
 8000962:	f000 f860 	bl	8000a26 <Error_Handler>
  }

  vTaskStartScheduler();
 8000966:	f005 fa0d 	bl	8005d84 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800096a:	f7ff ff1d 	bl	80007a8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800096e:	f004 fc3b 	bl	80051e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000972:	bf00      	nop
 8000974:	e7fd      	b.n	8000972 <main+0x5a>
 8000976:	bf00      	nop
 8000978:	080083f4 	.word	0x080083f4
 800097c:	08000ac9 	.word	0x08000ac9
 8000980:	080083fc 	.word	0x080083fc

08000984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b096      	sub	sp, #88	@ 0x58
 8000988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2244      	movs	r2, #68	@ 0x44
 8000990:	2100      	movs	r1, #0
 8000992:	4618      	mov	r0, r3
 8000994:	f006 fe72 	bl	800767c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009aa:	f001 f877 	bl	8001a9c <HAL_PWREx_ControlVoltageScaling>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009b4:	f000 f837 	bl	8000a26 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b8:	2302      	movs	r3, #2
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009c0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c2:	2310      	movs	r3, #16
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009ca:	2302      	movs	r3, #2
 80009cc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ce:	2301      	movs	r3, #1
 80009d0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009d2:	230a      	movs	r3, #10
 80009d4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009d6:	2307      	movs	r3, #7
 80009d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009da:	2302      	movs	r3, #2
 80009dc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009de:	2302      	movs	r3, #2
 80009e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4618      	mov	r0, r3
 80009e8:	f001 f8ae 	bl	8001b48 <HAL_RCC_OscConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009f2:	f000 f818 	bl	8000a26 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f6:	230f      	movs	r3, #15
 80009f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2303      	movs	r3, #3
 80009fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a06:	2300      	movs	r3, #0
 8000a08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f001 fc76 	bl	8002300 <HAL_RCC_ClockConfig>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a1a:	f000 f804 	bl	8000a26 <Error_Handler>
  }
}
 8000a1e:	bf00      	nop
 8000a20:	3758      	adds	r7, #88	@ 0x58
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2a:	b672      	cpsid	i
}
 8000a2c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2e:	bf00      	nop
 8000a30:	e7fd      	b.n	8000a2e <Error_Handler+0x8>
	...

08000a34 <shell_init>:
int isStarted = 0;
int isADC_cplt =0;
uint8_t PWMLed = 255;


void shell_init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	memset(argv, 0, MAX_ARGS * sizeof(char*));
 8000a38:	2220      	movs	r2, #32
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <shell_init+0x74>)
 8000a3e:	f006 fe1d 	bl	800767c <memset>
	memset(cmdBuffer, 0, CMD_BUFFER_SIZE * sizeof(char));
 8000a42:	2240      	movs	r2, #64	@ 0x40
 8000a44:	2100      	movs	r1, #0
 8000a46:	4819      	ldr	r0, [pc, #100]	@ (8000aac <shell_init+0x78>)
 8000a48:	f006 fe18 	bl	800767c <memset>
	memset(uartRxBuffer, 0, UART_RX_BUFFER_SIZE * sizeof(char));
 8000a4c:	4b18      	ldr	r3, [pc, #96]	@ (8000ab0 <shell_init+0x7c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]
	memset(uartTxBuffer, 0, UART_TX_BUFFER_SIZE * sizeof(char));
 8000a52:	2240      	movs	r2, #64	@ 0x40
 8000a54:	2100      	movs	r1, #0
 8000a56:	4817      	ldr	r0, [pc, #92]	@ (8000ab4 <shell_init+0x80>)
 8000a58:	f006 fe10 	bl	800767c <memset>
	sem_uart_read = xSemaphoreCreateBinary();
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2001      	movs	r0, #1
 8000a62:	f004 fd47 	bl	80054f4 <xQueueGenericCreate>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a13      	ldr	r2, [pc, #76]	@ (8000ab8 <shell_init+0x84>)
 8000a6a:	6013      	str	r3, [r2, #0]
	sem_uart_read == NULL ? Error_Handler() : (void) 0;
 8000a6c:	4b12      	ldr	r3, [pc, #72]	@ (8000ab8 <shell_init+0x84>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d101      	bne.n	8000a78 <shell_init+0x44>
 8000a74:	f7ff ffd7 	bl	8000a26 <Error_Handler>

	HAL_UART_Transmit(&UART_DEVICE, started, strlen((char*) started),
 8000a78:	4810      	ldr	r0, [pc, #64]	@ (8000abc <shell_init+0x88>)
 8000a7a:	f7ff fbb3 	bl	80001e4 <strlen>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	490d      	ldr	r1, [pc, #52]	@ (8000abc <shell_init+0x88>)
 8000a88:	480d      	ldr	r0, [pc, #52]	@ (8000ac0 <shell_init+0x8c>)
 8000a8a:	f002 fff9 	bl	8003a80 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
	HAL_UART_Transmit(&UART_DEVICE, prompt, strlen((char*) prompt),
 8000a8e:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <shell_init+0x90>)
 8000a90:	f7ff fba8 	bl	80001e4 <strlen>
 8000a94:	4603      	mov	r3, r0
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	4909      	ldr	r1, [pc, #36]	@ (8000ac4 <shell_init+0x90>)
 8000a9e:	4808      	ldr	r0, [pc, #32]	@ (8000ac0 <shell_init+0x8c>)
 8000aa0:	f002 ffee 	bl	8003a80 <HAL_UART_Transmit>
			HAL_MAX_DELAY);
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000480 	.word	0x20000480
 8000aac:	2000043c 	.word	0x2000043c
 8000ab0:	200003f8 	.word	0x200003f8
 8000ab4:	200003fc 	.word	0x200003fc
 8000ab8:	2000019c 	.word	0x2000019c
 8000abc:	20000044 	.word	0x20000044
 8000ac0:	20000518 	.word	0x20000518
 8000ac4:	200000f4 	.word	0x200000f4

08000ac8 <shell_run>:

void shell_run(void*) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	int reading = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
	for (;;) {
		reading = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
		idx_cmd = 0;
 8000ad8:	4b5d      	ldr	r3, [pc, #372]	@ (8000c50 <shell_run+0x188>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
		while (reading) {
 8000ade:	e070      	b.n	8000bc2 <shell_run+0xfa>
			HAL_UART_Receive_IT(&UART_DEVICE, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	495c      	ldr	r1, [pc, #368]	@ (8000c54 <shell_run+0x18c>)
 8000ae4:	485c      	ldr	r0, [pc, #368]	@ (8000c58 <shell_run+0x190>)
 8000ae6:	f003 f855 	bl	8003b94 <HAL_UART_Receive_IT>
			xSemaphoreTake(sem_uart_read, portMAX_DELAY)!=pdPASS ? Error_Handler():(void)0;
 8000aea:	4b5c      	ldr	r3, [pc, #368]	@ (8000c5c <shell_run+0x194>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f04f 31ff 	mov.w	r1, #4294967295
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 fde8 	bl	80056c8 <xQueueSemaphoreTake>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d001      	beq.n	8000b02 <shell_run+0x3a>
 8000afe:	f7ff ff92 	bl	8000a26 <Error_Handler>

			switch (uartRxBuffer[0]) {
 8000b02:	4b54      	ldr	r3, [pc, #336]	@ (8000c54 <shell_run+0x18c>)
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b08:	d035      	beq.n	8000b76 <shell_run+0xae>
 8000b0a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b0c:	dc47      	bgt.n	8000b9e <shell_run+0xd6>
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d031      	beq.n	8000b76 <shell_run+0xae>
 8000b12:	2b0d      	cmp	r3, #13
 8000b14:	d143      	bne.n	8000b9e <shell_run+0xd6>
			case ASCII_CR: // Nouvelle ligne, instruction à traiter
				HAL_UART_Transmit(&UART_DEVICE, newline, sizeof(newline),
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	4950      	ldr	r1, [pc, #320]	@ (8000c60 <shell_run+0x198>)
 8000b1e:	484e      	ldr	r0, [pc, #312]	@ (8000c58 <shell_run+0x190>)
 8000b20:	f002 ffae 	bl	8003a80 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				//cmdBuffer[idx_cmd] = '\0';
				//On copie la commande dans l'historique
				//strcpy(cmdHistory[cmdHistory_index_save % CMD_HISTORY_SIZE], cmdBuffer);
				//cmdHistory_index_save++;
				argc = 0;
 8000b24:	4b4f      	ldr	r3, [pc, #316]	@ (8000c64 <shell_run+0x19c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
				token = strtok(cmdBuffer, " ");
 8000b2a:	494f      	ldr	r1, [pc, #316]	@ (8000c68 <shell_run+0x1a0>)
 8000b2c:	484f      	ldr	r0, [pc, #316]	@ (8000c6c <shell_run+0x1a4>)
 8000b2e:	f006 fdad 	bl	800768c <strtok>
 8000b32:	4603      	mov	r3, r0
 8000b34:	4a4e      	ldr	r2, [pc, #312]	@ (8000c70 <shell_run+0x1a8>)
 8000b36:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 8000b38:	e010      	b.n	8000b5c <shell_run+0x94>
					argv[argc++] = token;
 8000b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c64 <shell_run+0x19c>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	1c5a      	adds	r2, r3, #1
 8000b40:	4948      	ldr	r1, [pc, #288]	@ (8000c64 <shell_run+0x19c>)
 8000b42:	600a      	str	r2, [r1, #0]
 8000b44:	4a4a      	ldr	r2, [pc, #296]	@ (8000c70 <shell_run+0x1a8>)
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	494a      	ldr	r1, [pc, #296]	@ (8000c74 <shell_run+0x1ac>)
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					token = strtok(NULL, " ");
 8000b4e:	4946      	ldr	r1, [pc, #280]	@ (8000c68 <shell_run+0x1a0>)
 8000b50:	2000      	movs	r0, #0
 8000b52:	f006 fd9b 	bl	800768c <strtok>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a45      	ldr	r2, [pc, #276]	@ (8000c70 <shell_run+0x1a8>)
 8000b5a:	6013      	str	r3, [r2, #0]
				while (token != NULL) {
 8000b5c:	4b44      	ldr	r3, [pc, #272]	@ (8000c70 <shell_run+0x1a8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d1ea      	bne.n	8000b3a <shell_run+0x72>
				}
				idx_cmd = 0;
 8000b64:	4b3a      	ldr	r3, [pc, #232]	@ (8000c50 <shell_run+0x188>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
				reading = 0;        //exit read loop
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
				newCmdReady = 1;
 8000b6e:	4b42      	ldr	r3, [pc, #264]	@ (8000c78 <shell_run+0x1b0>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	601a      	str	r2, [r3, #0]
				break;
 8000b74:	e025      	b.n	8000bc2 <shell_run+0xfa>
			case ASCII_BACK:
			case ASCII_BACK_BIS: // Suppression du dernier caractère
				if (idx_cmd == 0) {
 8000b76:	4b36      	ldr	r3, [pc, #216]	@ (8000c50 <shell_run+0x188>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d020      	beq.n	8000bc0 <shell_run+0xf8>
					break;
				}
				cmdBuffer[idx_cmd--] = '\0';
 8000b7e:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <shell_run+0x188>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	1e5a      	subs	r2, r3, #1
 8000b84:	4932      	ldr	r1, [pc, #200]	@ (8000c50 <shell_run+0x188>)
 8000b86:	600a      	str	r2, [r1, #0]
 8000b88:	4a38      	ldr	r2, [pc, #224]	@ (8000c6c <shell_run+0x1a4>)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, backspace, sizeof(backspace),
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	2204      	movs	r2, #4
 8000b94:	4939      	ldr	r1, [pc, #228]	@ (8000c7c <shell_run+0x1b4>)
 8000b96:	4830      	ldr	r0, [pc, #192]	@ (8000c58 <shell_run+0x190>)
 8000b98:	f002 ff72 	bl	8003a80 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
				break;
 8000b9c:	e011      	b.n	8000bc2 <shell_run+0xfa>
			default:
				cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000b9e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c50 <shell_run+0x188>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	492a      	ldr	r1, [pc, #168]	@ (8000c50 <shell_run+0x188>)
 8000ba6:	600a      	str	r2, [r1, #0]
 8000ba8:	4a2a      	ldr	r2, [pc, #168]	@ (8000c54 <shell_run+0x18c>)
 8000baa:	7811      	ldrb	r1, [r2, #0]
 8000bac:	4a2f      	ldr	r2, [pc, #188]	@ (8000c6c <shell_run+0x1a4>)
 8000bae:	54d1      	strb	r1, [r2, r3]
				HAL_UART_Transmit(&UART_DEVICE, uartRxBuffer,
 8000bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4927      	ldr	r1, [pc, #156]	@ (8000c54 <shell_run+0x18c>)
 8000bb8:	4827      	ldr	r0, [pc, #156]	@ (8000c58 <shell_run+0x190>)
 8000bba:	f002 ff61 	bl	8003a80 <HAL_UART_Transmit>
 8000bbe:	e000      	b.n	8000bc2 <shell_run+0xfa>
					break;
 8000bc0:	bf00      	nop
		while (reading) {
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d18b      	bne.n	8000ae0 <shell_run+0x18>
						UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
			}
		}
		if (newCmdReady) {
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000c78 <shell_run+0x1b0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d081      	beq.n	8000ad4 <shell_run+0xc>
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	e01b      	b.n	8000c0e <shell_run+0x146>
				if (strcmp(argv[0], mapping[i].name) == 0) {
 8000bd6:	4b27      	ldr	r3, [pc, #156]	@ (8000c74 <shell_run+0x1ac>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4929      	ldr	r1, [pc, #164]	@ (8000c80 <shell_run+0x1b8>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	011b      	lsls	r3, r3, #4
 8000be0:	440b      	add	r3, r1
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	4610      	mov	r0, r2
 8000be8:	f7ff faf2 	bl	80001d0 <strcmp>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d10a      	bne.n	8000c08 <shell_run+0x140>
					isFind = 1;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <shell_run+0x1bc>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]
					mapping[i].funct(argv);
 8000bf8:	4a21      	ldr	r2, [pc, #132]	@ (8000c80 <shell_run+0x1b8>)
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	4413      	add	r3, r2
 8000c00:	330c      	adds	r3, #12
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	481b      	ldr	r0, [pc, #108]	@ (8000c74 <shell_run+0x1ac>)
 8000c06:	4798      	blx	r3
			for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	2b03      	cmp	r3, #3
 8000c12:	d9e0      	bls.n	8000bd6 <shell_run+0x10e>
				}
			}
			if (!isFind) {
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <shell_run+0x1bc>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d106      	bne.n	8000c2a <shell_run+0x162>
				HAL_UART_Transmit(&UART_DEVICE, cmdNotFound,
 8000c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c20:	2214      	movs	r2, #20
 8000c22:	4919      	ldr	r1, [pc, #100]	@ (8000c88 <shell_run+0x1c0>)
 8000c24:	480c      	ldr	r0, [pc, #48]	@ (8000c58 <shell_run+0x190>)
 8000c26:	f002 ff2b 	bl	8003a80 <HAL_UART_Transmit>
						sizeof(cmdNotFound), HAL_MAX_DELAY);
			}

			HAL_UART_Transmit(&UART_DEVICE, prompt, sizeof(prompt),
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	2212      	movs	r2, #18
 8000c30:	4916      	ldr	r1, [pc, #88]	@ (8000c8c <shell_run+0x1c4>)
 8000c32:	4809      	ldr	r0, [pc, #36]	@ (8000c58 <shell_run+0x190>)
 8000c34:	f002 ff24 	bl	8003a80 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			newCmdReady = 0;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <shell_run+0x1b0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
			isFind = 0;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <shell_run+0x1bc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
			memset(cmdBuffer, 0, MAX_ARGS * sizeof(char*));
 8000c44:	2220      	movs	r2, #32
 8000c46:	2100      	movs	r1, #0
 8000c48:	4808      	ldr	r0, [pc, #32]	@ (8000c6c <shell_run+0x1a4>)
 8000c4a:	f006 fd17 	bl	800767c <memset>
		reading = 1;
 8000c4e:	e741      	b.n	8000ad4 <shell_run+0xc>
 8000c50:	2000047c 	.word	0x2000047c
 8000c54:	200003f8 	.word	0x200003f8
 8000c58:	20000518 	.word	0x20000518
 8000c5c:	2000019c 	.word	0x2000019c
 8000c60:	200000d8 	.word	0x200000d8
 8000c64:	200004a0 	.word	0x200004a0
 8000c68:	080084c0 	.word	0x080084c0
 8000c6c:	2000043c 	.word	0x2000043c
 8000c70:	200004a4 	.word	0x200004a4
 8000c74:	20000480 	.word	0x20000480
 8000c78:	200004a8 	.word	0x200004a8
 8000c7c:	200000dc 	.word	0x200000dc
 8000c80:	20000004 	.word	0x20000004
 8000c84:	200004ac 	.word	0x200004ac
 8000c88:	200000e0 	.word	0x200000e0
 8000c8c:	200000f4 	.word	0x200000f4

08000c90 <subfunct_help>:

/*
 * ***********************************************************************************************
 * 										SUBFUNCTIONS
 *************************************************************************************************/
void subfunct_help(char **argv) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af04      	add	r7, sp, #16
 8000c96:	6078      	str	r0, [r7, #4]
	printf("%s%-15s | %-30s | %-50s\r\n%s%s", GRAS, "Fonctions", "Params",
 8000c98:	4b1a      	ldr	r3, [pc, #104]	@ (8000d04 <subfunct_help+0x74>)
 8000c9a:	9302      	str	r3, [sp, #8]
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <subfunct_help+0x78>)
 8000c9e:	9301      	str	r3, [sp, #4]
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <subfunct_help+0x7c>)
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d10 <subfunct_help+0x80>)
 8000ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <subfunct_help+0x84>)
 8000ca8:	491b      	ldr	r1, [pc, #108]	@ (8000d18 <subfunct_help+0x88>)
 8000caa:	481c      	ldr	r0, [pc, #112]	@ (8000d1c <subfunct_help+0x8c>)
 8000cac:	f006 fb9e 	bl	80073ec <iprintf>
			"Description", D_RESET, separator);
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	e01b      	b.n	8000cee <subfunct_help+0x5e>
		printf("%s%-15s%s | %-30s | %-50s\r\n", FUNCTION, mapping[i].name,
 8000cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8000d20 <subfunct_help+0x90>)
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	011b      	lsls	r3, r3, #4
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6819      	ldr	r1, [r3, #0]
 8000cc0:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <subfunct_help+0x90>)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	011b      	lsls	r3, r3, #4
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3308      	adds	r3, #8
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4814      	ldr	r0, [pc, #80]	@ (8000d20 <subfunct_help+0x90>)
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	4402      	add	r2, r0
 8000cd4:	3204      	adds	r2, #4
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	9201      	str	r2, [sp, #4]
 8000cda:	9300      	str	r3, [sp, #0]
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d08 <subfunct_help+0x78>)
 8000cde:	460a      	mov	r2, r1
 8000ce0:	4910      	ldr	r1, [pc, #64]	@ (8000d24 <subfunct_help+0x94>)
 8000ce2:	4811      	ldr	r0, [pc, #68]	@ (8000d28 <subfunct_help+0x98>)
 8000ce4:	f006 fb82 	bl	80073ec <iprintf>
	for (int i = 0; i < sizeof(mapping) / sizeof(mapping[0]); i++) {
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	3301      	adds	r3, #1
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d9e0      	bls.n	8000cb6 <subfunct_help+0x26>
				D_RESET, mapping[i].params, mapping[i].resume);
	}
	printf(separator);
 8000cf4:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <subfunct_help+0x9c>)
 8000cf6:	f006 fbe1 	bl	80074bc <puts>
}
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	08008500 	.word	0x08008500
 8000d08:	08008550 	.word	0x08008550
 8000d0c:	08008558 	.word	0x08008558
 8000d10:	080084c4 	.word	0x080084c4
 8000d14:	080084cc 	.word	0x080084cc
 8000d18:	080084d8 	.word	0x080084d8
 8000d1c:	080084e0 	.word	0x080084e0
 8000d20:	20000004 	.word	0x20000004
 8000d24:	08008564 	.word	0x08008564
 8000d28:	0800856c 	.word	0x0800856c
 8000d2c:	08008588 	.word	0x08008588

08000d30 <subfunct_clear>:

void subfunct_clear(char **argv) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&UART_DEVICE, clear, sizeof(clear), HAL_MAX_DELAY);
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	2208      	movs	r2, #8
 8000d3e:	4904      	ldr	r1, [pc, #16]	@ (8000d50 <subfunct_clear+0x20>)
 8000d40:	4804      	ldr	r0, [pc, #16]	@ (8000d54 <subfunct_clear+0x24>)
 8000d42:	f002 fe9d 	bl	8003a80 <HAL_UART_Transmit>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000108 	.word	0x20000108
 8000d54:	20000518 	.word	0x20000518

08000d58 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd0 <MX_SPI3_Init+0x78>)
 8000d60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6a:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d70:	4b16      	ldr	r3, [pc, #88]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d72:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d78:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d8e:	2238      	movs	r2, #56	@ 0x38
 8000d90:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000da4:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000da6:	2207      	movs	r2, #7
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000db2:	2208      	movs	r2, #8
 8000db4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_SPI3_Init+0x74>)
 8000db8:	f002 f982 	bl	80030c0 <HAL_SPI_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f7ff fe30 	bl	8000a26 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200004b0 	.word	0x200004b0
 8000dd0:	40003c00 	.word	0x40003c00

08000dd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	@ 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a29      	ldr	r2, [pc, #164]	@ (8000e98 <HAL_SPI_MspInit+0xc4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d14c      	bne.n	8000e90 <HAL_SPI_MspInit+0xbc>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000df6:	4b29      	ldr	r3, [pc, #164]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfa:	4a28      	ldr	r2, [pc, #160]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e02:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e12:	4a22      	ldr	r2, [pc, #136]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000e14:	f043 0304 	orr.w	r3, r3, #4
 8000e18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1a:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e26:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000e2c:	f043 0302 	orr.w	r3, r3, #2
 8000e30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <HAL_SPI_MspInit+0xc8>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	60bb      	str	r3, [r7, #8]
 8000e3c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e3e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e50:	2306      	movs	r3, #6
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4811      	ldr	r0, [pc, #68]	@ (8000ea0 <HAL_SPI_MspInit+0xcc>)
 8000e5c:	f000 fc4e 	bl	80016fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e60:	2320      	movs	r3, #32
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e70:	2306      	movs	r3, #6
 8000e72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480a      	ldr	r0, [pc, #40]	@ (8000ea4 <HAL_SPI_MspInit+0xd0>)
 8000e7c:	f000 fc3e 	bl	80016fc <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2105      	movs	r1, #5
 8000e84:	2033      	movs	r0, #51	@ 0x33
 8000e86:	f000 fb84 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000e8a:	2033      	movs	r0, #51	@ 0x33
 8000e8c:	f000 fb9d 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	@ 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40003c00 	.word	0x40003c00
 8000e9c:	40021000 	.word	0x40021000
 8000ea0:	48000800 	.word	0x48000800
 8000ea4:	48000400 	.word	0x48000400

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b11      	ldr	r3, [pc, #68]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb2:	4a10      	ldr	r2, [pc, #64]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed2:	4b08      	ldr	r3, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x4c>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	f06f 0001 	mvn.w	r0, #1
 8000ee6:	f000 fb54 	bl	8001592 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <NMI_Handler+0x4>

08000f00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <MemManage_Handler+0x4>

08000f10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <BusFault_Handler+0x4>

08000f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <UsageFault_Handler+0x4>

08000f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f32:	f000 fa0f 	bl	8001354 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f36:	f005 fb2f 	bl	8006598 <xTaskGetSchedulerState>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d001      	beq.n	8000f44 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f40:	f005 fe8a 	bl	8006c58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	@ (8000f58 <USART2_IRQHandler+0x10>)
 8000f4e:	f002 fe6d 	bl	8003c2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000518 	.word	0x20000518

08000f5c <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000f60:	4802      	ldr	r0, [pc, #8]	@ (8000f6c <SPI3_IRQHandler+0x10>)
 8000f62:	f002 fac7 	bl	80034f4 <HAL_SPI_IRQHandler>

//  spi_tx_complete = 0;
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

  /* USER CODE END SPI3_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200004b0 	.word	0x200004b0

08000f70 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return 1;
 8000f74:	2301      	movs	r3, #1
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_kill>:

int _kill(int pid, int sig)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f8a:	f006 fc21 	bl	80077d0 <__errno>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2216      	movs	r2, #22
 8000f92:	601a      	str	r2, [r3, #0]
  return -1;
 8000f94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_exit>:

void _exit (int status)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ffe7 	bl	8000f80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fb2:	bf00      	nop
 8000fb4:	e7fd      	b.n	8000fb2 <_exit+0x12>

08000fb6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e00a      	b.n	8000fde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc8:	f3af 8000 	nop.w
 8000fcc:	4601      	mov	r1, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	60ba      	str	r2, [r7, #8]
 8000fd4:	b2ca      	uxtb	r2, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dbf0      	blt.n	8000fc8 <_read+0x12>
  }

  return len;
 8000fe6:	687b      	ldr	r3, [r7, #4]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e009      	b.n	8001016 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fc72 	bl	80008f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbf1      	blt.n	8001002 <_write+0x12>
  }
  return len;
 800101e:	687b      	ldr	r3, [r7, #4]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_close>:

int _close(int file)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001050:	605a      	str	r2, [r3, #4]
  return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_isatty>:

int _isatty(int file)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	@ (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	@ (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f006 fb86 	bl	80077d0 <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	@ (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20018000 	.word	0x20018000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	20000514 	.word	0x20000514
 80010f8:	20002f58 	.word	0x20002f58

080010fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <SystemInit+0x20>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001106:	4a05      	ldr	r2, [pc, #20]	@ (800111c <SystemInit+0x20>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001126:	4a15      	ldr	r2, [pc, #84]	@ (800117c <MX_USART2_UART_Init+0x5c>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001164:	f002 fc3e 	bl	80039e4 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800116e:	f7ff fc5a 	bl	8000a26 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000518 	.word	0x20000518
 800117c:	40004400 	.word	0x40004400

08001180 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b0ac      	sub	sp, #176	@ 0xb0
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	2288      	movs	r2, #136	@ 0x88
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f006 fa6b 	bl	800767c <memset>
  if(uartHandle->Instance==USART2)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a25      	ldr	r2, [pc, #148]	@ (8001240 <HAL_UART_MspInit+0xc0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d143      	bne.n	8001238 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4618      	mov	r0, r3
 80011be:	f001 fac3 	bl	8002748 <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011c8:	f7ff fc2d 	bl	8000a26 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <HAL_UART_MspInit+0xc4>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <HAL_UART_MspInit+0xc4>)
 80011d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80011d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <HAL_UART_MspInit+0xc4>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e0:	613b      	str	r3, [r7, #16]
 80011e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <HAL_UART_MspInit+0xc4>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e8:	4a16      	ldr	r2, [pc, #88]	@ (8001244 <HAL_UART_MspInit+0xc4>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011f0:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <HAL_UART_MspInit+0xc4>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011fc:	230c      	movs	r3, #12
 80011fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001214:	2307      	movs	r3, #7
 8001216:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800121e:	4619      	mov	r1, r3
 8001220:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001224:	f000 fa6a 	bl	80016fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001228:	2200      	movs	r2, #0
 800122a:	2105      	movs	r1, #5
 800122c:	2026      	movs	r0, #38	@ 0x26
 800122e:	f000 f9b0 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001232:	2026      	movs	r0, #38	@ 0x26
 8001234:	f000 f9c9 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001238:	bf00      	nop
 800123a:	37b0      	adds	r7, #176	@ 0xb0
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40004400 	.word	0x40004400
 8001244:	40021000 	.word	0x40021000

08001248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800124c:	f7ff ff56 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <LoopForever+0x6>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	@ (8001288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <LoopForever+0xe>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	@ (8001294 <LoopForever+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f006 fab1 	bl	80077dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127a:	f7ff fb4d 	bl	8000918 <main>

0800127e <LoopForever>:

LoopForever:
    b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001280:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 800128c:	08008828 	.word	0x08008828
  ldr r2, =_sbss
 8001290:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001294:	20002f54 	.word	0x20002f54

08001298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_2_IRQHandler>
	...

0800129c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012a6:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <HAL_Init+0x3c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a0b      	ldr	r2, [pc, #44]	@ (80012d8 <HAL_Init+0x3c>)
 80012ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f000 f962 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012b8:	200f      	movs	r0, #15
 80012ba:	f000 f80f 	bl	80012dc <HAL_InitTick>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d002      	beq.n	80012ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	e001      	b.n	80012ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012ca:	f7ff fded 	bl	8000ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40022000 	.word	0x40022000

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012e8:	4b17      	ldr	r3, [pc, #92]	@ (8001348 <HAL_InitTick+0x6c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d023      	beq.n	8001338 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <HAL_InitTick+0x70>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b14      	ldr	r3, [pc, #80]	@ (8001348 <HAL_InitTick+0x6c>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f96d 	bl	80015e6 <HAL_SYSTICK_Config>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d10f      	bne.n	8001332 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d809      	bhi.n	800132c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001318:	2200      	movs	r2, #0
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f000 f937 	bl	8001592 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001324:	4a0a      	ldr	r2, [pc, #40]	@ (8001350 <HAL_InitTick+0x74>)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	e007      	b.n	800133c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	73fb      	strb	r3, [r7, #15]
 8001330:	e004      	b.n	800133c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	73fb      	strb	r3, [r7, #15]
 8001336:	e001      	b.n	800133c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000118 	.word	0x20000118
 800134c:	20000110 	.word	0x20000110
 8001350:	20000114 	.word	0x20000114

08001354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <HAL_IncTick+0x20>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b06      	ldr	r3, [pc, #24]	@ (8001378 <HAL_IncTick+0x24>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a04      	ldr	r2, [pc, #16]	@ (8001378 <HAL_IncTick+0x24>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000118 	.word	0x20000118
 8001378:	200005a0 	.word	0x200005a0

0800137c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return uwTick;
 8001380:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <HAL_GetTick+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200005a0 	.word	0x200005a0

08001394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800139c:	f7ff ffee 	bl	800137c <HAL_GetTick>
 80013a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ac:	d005      	beq.n	80013ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013ae:	4b0a      	ldr	r3, [pc, #40]	@ (80013d8 <HAL_Delay+0x44>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4413      	add	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013ba:	bf00      	nop
 80013bc:	f7ff ffde 	bl	800137c <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d8f7      	bhi.n	80013bc <HAL_Delay+0x28>
  {
  }
}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000118 	.word	0x20000118

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	@ (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	@ (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	@ (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	@ (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	@ (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	@ 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	@ 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295
 800155c:	f7ff ff8e 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	@ (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff29 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff3e 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff8e 	bl	80014d0 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff31 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa2 	bl	8001538 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}

080015fe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015fe:	b480      	push	{r7}
 8001600:	b085      	sub	sp, #20
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d008      	beq.n	8001628 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2204      	movs	r2, #4
 800161a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e022      	b.n	800166e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 020e 	bic.w	r2, r2, #14
 8001636:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164c:	f003 021c 	and.w	r2, r3, #28
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001654:	2101      	movs	r1, #1
 8001656:	fa01 f202 	lsl.w	r2, r1, r2
 800165a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 800166c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800166e:	4618      	mov	r0, r3
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af00      	add	r7, sp, #0
 8001680:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001682:	2300      	movs	r3, #0
 8001684:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d005      	beq.n	800169e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2204      	movs	r2, #4
 8001696:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e029      	b.n	80016f2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 020e 	bic.w	r2, r2, #14
 80016ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 0201 	bic.w	r2, r2, #1
 80016bc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f003 021c 	and.w	r2, r3, #28
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	2101      	movs	r1, #1
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2201      	movs	r2, #1
 80016d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	4798      	blx	r3
    }
  }
  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800170a:	e17f      	b.n	8001a0c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	2101      	movs	r1, #1
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	fa01 f303 	lsl.w	r3, r1, r3
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8171 	beq.w	8001a06 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d005      	beq.n	800173c <HAL_GPIO_Init+0x40>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d130      	bne.n	800179e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68da      	ldr	r2, [r3, #12]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4313      	orrs	r3, r2
 8001764:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001772:	2201      	movs	r2, #1
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	091b      	lsrs	r3, r3, #4
 8001788:	f003 0201 	and.w	r2, r3, #1
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b03      	cmp	r3, #3
 80017a8:	d118      	bne.n	80017dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017b0:	2201      	movs	r2, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	08db      	lsrs	r3, r3, #3
 80017c6:	f003 0201 	and.w	r2, r3, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	d017      	beq.n	8001818 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d123      	bne.n	800186c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	08da      	lsrs	r2, r3, #3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3208      	adds	r2, #8
 800182c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	220f      	movs	r2, #15
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	691a      	ldr	r2, [r3, #16]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	08da      	lsrs	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	3208      	adds	r2, #8
 8001866:	6939      	ldr	r1, [r7, #16]
 8001868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0203 	and.w	r2, r3, #3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 80ac 	beq.w	8001a06 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b5f      	ldr	r3, [pc, #380]	@ (8001a2c <HAL_GPIO_Init+0x330>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018b2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a2c <HAL_GPIO_Init+0x330>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80018ba:	4b5c      	ldr	r3, [pc, #368]	@ (8001a2c <HAL_GPIO_Init+0x330>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c6:	4a5a      	ldr	r2, [pc, #360]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018f0:	d025      	beq.n	800193e <HAL_GPIO_Init+0x242>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001a34 <HAL_GPIO_Init+0x338>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d01f      	beq.n	800193a <HAL_GPIO_Init+0x23e>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001a38 <HAL_GPIO_Init+0x33c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d019      	beq.n	8001936 <HAL_GPIO_Init+0x23a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4d      	ldr	r2, [pc, #308]	@ (8001a3c <HAL_GPIO_Init+0x340>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0x236>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4c      	ldr	r2, [pc, #304]	@ (8001a40 <HAL_GPIO_Init+0x344>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00d      	beq.n	800192e <HAL_GPIO_Init+0x232>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4b      	ldr	r2, [pc, #300]	@ (8001a44 <HAL_GPIO_Init+0x348>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d007      	beq.n	800192a <HAL_GPIO_Init+0x22e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a48 <HAL_GPIO_Init+0x34c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d101      	bne.n	8001926 <HAL_GPIO_Init+0x22a>
 8001922:	2306      	movs	r3, #6
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x244>
 8001926:	2307      	movs	r3, #7
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x244>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x244>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x244>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x244>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x244>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x244>
 800193e:	2300      	movs	r3, #0
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001950:	4937      	ldr	r1, [pc, #220]	@ (8001a30 <HAL_GPIO_Init+0x334>)
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800195e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a4c <HAL_GPIO_Init+0x350>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001982:	4a32      	ldr	r2, [pc, #200]	@ (8001a4c <HAL_GPIO_Init+0x350>)
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001988:	4b30      	ldr	r3, [pc, #192]	@ (8001a4c <HAL_GPIO_Init+0x350>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019ac:	4a27      	ldr	r2, [pc, #156]	@ (8001a4c <HAL_GPIO_Init+0x350>)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019b2:	4b26      	ldr	r3, [pc, #152]	@ (8001a4c <HAL_GPIO_Init+0x350>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019d6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a4c <HAL_GPIO_Init+0x350>)
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019dc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a4c <HAL_GPIO_Init+0x350>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a00:	4a12      	ldr	r2, [pc, #72]	@ (8001a4c <HAL_GPIO_Init+0x350>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f47f ae78 	bne.w	800170c <HAL_GPIO_Init+0x10>
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	371c      	adds	r7, #28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00
 8001a40:	48001000 	.word	0x48001000
 8001a44:	48001400 	.word	0x48001400
 8001a48:	48001800 	.word	0x48001800
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	807b      	strh	r3, [r7, #2]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a60:	787b      	ldrb	r3, [r7, #1]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a6c:	e002      	b.n	8001a74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a84:	4b04      	ldr	r3, [pc, #16]	@ (8001a98 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40007000 	.word	0x40007000

08001a9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001aaa:	d130      	bne.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aac:	4b23      	ldr	r3, [pc, #140]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ab8:	d038      	beq.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aba:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ac2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aca:	4b1d      	ldr	r3, [pc, #116]	@ (8001b40 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2232      	movs	r2, #50	@ 0x32
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0c9b      	lsrs	r3, r3, #18
 8001adc:	3301      	adds	r3, #1
 8001ade:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae0:	e002      	b.n	8001ae8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae8:	4b14      	ldr	r3, [pc, #80]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aea:	695b      	ldr	r3, [r3, #20]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001af0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001af4:	d102      	bne.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f2      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001afc:	4b0f      	ldr	r3, [pc, #60]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001afe:	695b      	ldr	r3, [r3, #20]
 8001b00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b08:	d110      	bne.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e00f      	b.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1a:	d007      	beq.n	8001b2c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b1c:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b24:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b2a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40007000 	.word	0x40007000
 8001b40:	20000110 	.word	0x20000110
 8001b44:	431bde83 	.word	0x431bde83

08001b48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e3ca      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5a:	4b97      	ldr	r3, [pc, #604]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b64:	4b94      	ldr	r3, [pc, #592]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 80e4 	beq.w	8001d44 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_RCC_OscConfig+0x4a>
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	f040 808b 	bne.w	8001ca0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	f040 8087 	bne.w	8001ca0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b92:	4b89      	ldr	r3, [pc, #548]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_RCC_OscConfig+0x62>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e3a2      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1a      	ldr	r2, [r3, #32]
 8001bae:	4b82      	ldr	r3, [pc, #520]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d004      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x7c>
 8001bba:	4b7f      	ldr	r3, [pc, #508]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bc2:	e005      	b.n	8001bd0 <HAL_RCC_OscConfig+0x88>
 8001bc4:	4b7c      	ldr	r3, [pc, #496]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bca:	091b      	lsrs	r3, r3, #4
 8001bcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d223      	bcs.n	8001c1c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fd55 	bl	8002688 <RCC_SetFlashLatencyFromMSIRange>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e383      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be8:	4b73      	ldr	r3, [pc, #460]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a72      	ldr	r2, [pc, #456]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bee:	f043 0308 	orr.w	r3, r3, #8
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	4b70      	ldr	r3, [pc, #448]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	496d      	ldr	r1, [pc, #436]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c06:	4b6c      	ldr	r3, [pc, #432]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	4968      	ldr	r1, [pc, #416]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c16:	4313      	orrs	r3, r2
 8001c18:	604b      	str	r3, [r1, #4]
 8001c1a:	e025      	b.n	8001c68 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c1c:	4b66      	ldr	r3, [pc, #408]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a65      	ldr	r2, [pc, #404]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c22:	f043 0308 	orr.w	r3, r3, #8
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	4b63      	ldr	r3, [pc, #396]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	4960      	ldr	r1, [pc, #384]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3a:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	021b      	lsls	r3, r3, #8
 8001c48:	495b      	ldr	r1, [pc, #364]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fd15 	bl	8002688 <RCC_SetFlashLatencyFromMSIRange>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e343      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c68:	f000 fc4a 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b52      	ldr	r3, [pc, #328]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	091b      	lsrs	r3, r3, #4
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	4950      	ldr	r1, [pc, #320]	@ (8001dbc <HAL_RCC_OscConfig+0x274>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	4a4e      	ldr	r2, [pc, #312]	@ (8001dc0 <HAL_RCC_OscConfig+0x278>)
 8001c86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c88:	4b4e      	ldr	r3, [pc, #312]	@ (8001dc4 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fb25 	bl	80012dc <HAL_InitTick>
 8001c92:	4603      	mov	r3, r0
 8001c94:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d052      	beq.n	8001d42 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	e327      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d032      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ca8:	4b43      	ldr	r3, [pc, #268]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a42      	ldr	r2, [pc, #264]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fb62 	bl	800137c <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cbc:	f7ff fb5e 	bl	800137c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e310      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cce:	4b3a      	ldr	r3, [pc, #232]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cda:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a36      	ldr	r2, [pc, #216]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b34      	ldr	r3, [pc, #208]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4931      	ldr	r1, [pc, #196]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	492c      	ldr	r1, [pc, #176]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
 8001d0c:	e01a      	b.n	8001d44 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a29      	ldr	r2, [pc, #164]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff fb2f 	bl	800137c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d22:	f7ff fb2b 	bl	800137c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e2dd      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d34:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f0      	bne.n	8001d22 <HAL_RCC_OscConfig+0x1da>
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d42:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d074      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d005      	beq.n	8001d62 <HAL_RCC_OscConfig+0x21a>
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d10e      	bne.n	8001d7a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2b03      	cmp	r3, #3
 8001d60:	d10b      	bne.n	8001d7a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d62:	4b15      	ldr	r3, [pc, #84]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d064      	beq.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d160      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e2ba      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d82:	d106      	bne.n	8001d92 <HAL_RCC_OscConfig+0x24a>
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0b      	ldr	r2, [pc, #44]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8e:	6013      	str	r3, [r2, #0]
 8001d90:	e026      	b.n	8001de0 <HAL_RCC_OscConfig+0x298>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d9a:	d115      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x280>
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a05      	ldr	r2, [pc, #20]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001da2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da6:	6013      	str	r3, [r2, #0]
 8001da8:	4b03      	ldr	r3, [pc, #12]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a02      	ldr	r2, [pc, #8]	@ (8001db8 <HAL_RCC_OscConfig+0x270>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e014      	b.n	8001de0 <HAL_RCC_OscConfig+0x298>
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	080085ec 	.word	0x080085ec
 8001dc0:	20000110 	.word	0x20000110
 8001dc4:	20000114 	.word	0x20000114
 8001dc8:	4ba0      	ldr	r3, [pc, #640]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a9f      	ldr	r2, [pc, #636]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b9d      	ldr	r3, [pc, #628]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a9c      	ldr	r2, [pc, #624]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7ff fac8 	bl	800137c <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7ff fac4 	bl	800137c <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e276      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e02:	4b92      	ldr	r3, [pc, #584]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2a8>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7ff fab4 	bl	800137c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fab0 	bl	800137c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e262      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2a:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2d0>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d060      	beq.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_OscConfig+0x310>
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	2b0c      	cmp	r3, #12
 8001e50:	d119      	bne.n	8001e86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d116      	bne.n	8001e86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e58:	4b7c      	ldr	r3, [pc, #496]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x328>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e23f      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	061b      	lsls	r3, r3, #24
 8001e7e:	4973      	ldr	r1, [pc, #460]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e84:	e040      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d023      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e8e:	4b6f      	ldr	r3, [pc, #444]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6e      	ldr	r2, [pc, #440]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fa6f 	bl	800137c <HAL_GetTick>
 8001e9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff fa6b 	bl	800137c <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e21d      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	4b65      	ldr	r3, [pc, #404]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0f0      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec0:	4b62      	ldr	r3, [pc, #392]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	061b      	lsls	r3, r3, #24
 8001ece:	495f      	ldr	r1, [pc, #380]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
 8001ed4:	e018      	b.n	8001f08 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a5c      	ldr	r2, [pc, #368]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee2:	f7ff fa4b 	bl	800137c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eea:	f7ff fa47 	bl	800137c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1f9      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001efc:	4b53      	ldr	r3, [pc, #332]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1f0      	bne.n	8001eea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	695b      	ldr	r3, [r3, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f22:	4a4a      	ldr	r2, [pc, #296]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fa26 	bl	800137c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f34:	f7ff fa22 	bl	800137c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1d4      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ef      	beq.n	8001f34 <HAL_RCC_OscConfig+0x3ec>
 8001f54:	e01b      	b.n	8001f8e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f56:	4b3d      	ldr	r3, [pc, #244]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f5c:	4a3b      	ldr	r2, [pc, #236]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff fa09 	bl	800137c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fa05 	bl	800137c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e1b7      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f80:	4b32      	ldr	r3, [pc, #200]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ef      	bne.n	8001f6e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 80a6 	beq.w	80020e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10d      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b27      	ldr	r3, [pc, #156]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb0:	4a26      	ldr	r2, [pc, #152]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fb8:	4b24      	ldr	r3, [pc, #144]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc8:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <HAL_RCC_OscConfig+0x508>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d118      	bne.n	8002006 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <HAL_RCC_OscConfig+0x508>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002050 <HAL_RCC_OscConfig+0x508>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fde:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe0:	f7ff f9cc 	bl	800137c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe8:	f7ff f9c8 	bl	800137c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e17a      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffa:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <HAL_RCC_OscConfig+0x508>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d0f0      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d108      	bne.n	8002020 <HAL_RCC_OscConfig+0x4d8>
 800200e:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002014:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800201e:	e029      	b.n	8002074 <HAL_RCC_OscConfig+0x52c>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b05      	cmp	r3, #5
 8002026:	d115      	bne.n	8002054 <HAL_RCC_OscConfig+0x50c>
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 800202a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800202e:	4a07      	ldr	r2, [pc, #28]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8002030:	f043 0304 	orr.w	r3, r3, #4
 8002034:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 800203a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203e:	4a03      	ldr	r2, [pc, #12]	@ (800204c <HAL_RCC_OscConfig+0x504>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002048:	e014      	b.n	8002074 <HAL_RCC_OscConfig+0x52c>
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	40007000 	.word	0x40007000
 8002054:	4b9c      	ldr	r3, [pc, #624]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	4a9b      	ldr	r2, [pc, #620]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002064:	4b98      	ldr	r3, [pc, #608]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002066:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800206a:	4a97      	ldr	r2, [pc, #604]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d016      	beq.n	80020aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207c:	f7ff f97e 	bl	800137c <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002082:	e00a      	b.n	800209a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7ff f97a 	bl	800137c <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002092:	4293      	cmp	r3, r2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e12a      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209a:	4b8b      	ldr	r3, [pc, #556]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ed      	beq.n	8002084 <HAL_RCC_OscConfig+0x53c>
 80020a8:	e015      	b.n	80020d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7ff f967 	bl	800137c <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b2:	f7ff f963 	bl	800137c <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e113      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c8:	4b7f      	ldr	r3, [pc, #508]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 80020ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1ed      	bne.n	80020b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020d6:	7ffb      	ldrb	r3, [r7, #31]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d105      	bne.n	80020e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020dc:	4b7a      	ldr	r3, [pc, #488]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e0:	4a79      	ldr	r2, [pc, #484]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 80020e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 80fe 	beq.w	80022ee <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	f040 80d0 	bne.w	800229c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020fc:	4b72      	ldr	r3, [pc, #456]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800210c:	429a      	cmp	r2, r3
 800210e:	d130      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	3b01      	subs	r3, #1
 800211c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	429a      	cmp	r2, r3
 8002120:	d127      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212e:	429a      	cmp	r2, r3
 8002130:	d11f      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800213c:	2a07      	cmp	r2, #7
 800213e:	bf14      	ite	ne
 8002140:	2201      	movne	r2, #1
 8002142:	2200      	moveq	r2, #0
 8002144:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002146:	4293      	cmp	r3, r2
 8002148:	d113      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002154:	085b      	lsrs	r3, r3, #1
 8002156:	3b01      	subs	r3, #1
 8002158:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800215a:	429a      	cmp	r2, r3
 800215c:	d109      	bne.n	8002172 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216e:	429a      	cmp	r2, r3
 8002170:	d06e      	beq.n	8002250 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	2b0c      	cmp	r3, #12
 8002176:	d069      	beq.n	800224c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002178:	4b53      	ldr	r3, [pc, #332]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d105      	bne.n	8002190 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002184:	4b50      	ldr	r3, [pc, #320]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0ad      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002194:	4b4c      	ldr	r3, [pc, #304]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4b      	ldr	r2, [pc, #300]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800219a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800219e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021a0:	f7ff f8ec 	bl	800137c <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f8e8 	bl	800137c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e09a      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ba:	4b43      	ldr	r3, [pc, #268]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c6:	4b40      	ldr	r3, [pc, #256]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <HAL_RCC_OscConfig+0x784>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021d6:	3a01      	subs	r2, #1
 80021d8:	0112      	lsls	r2, r2, #4
 80021da:	4311      	orrs	r1, r2
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021e0:	0212      	lsls	r2, r2, #8
 80021e2:	4311      	orrs	r1, r2
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021e8:	0852      	lsrs	r2, r2, #1
 80021ea:	3a01      	subs	r2, #1
 80021ec:	0552      	lsls	r2, r2, #21
 80021ee:	4311      	orrs	r1, r2
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80021f4:	0852      	lsrs	r2, r2, #1
 80021f6:	3a01      	subs	r2, #1
 80021f8:	0652      	lsls	r2, r2, #25
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002200:	0912      	lsrs	r2, r2, #4
 8002202:	0452      	lsls	r2, r2, #17
 8002204:	430a      	orrs	r2, r1
 8002206:	4930      	ldr	r1, [pc, #192]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002208:	4313      	orrs	r3, r2
 800220a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800220c:	4b2e      	ldr	r3, [pc, #184]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a2d      	ldr	r2, [pc, #180]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002212:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002216:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002218:	4b2b      	ldr	r3, [pc, #172]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a2a      	ldr	r2, [pc, #168]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800221e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002222:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002224:	f7ff f8aa 	bl	800137c <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7ff f8a6 	bl	800137c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e058      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223e:	4b22      	ldr	r3, [pc, #136]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800224a:	e050      	b.n	80022ee <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e04f      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d148      	bne.n	80022ee <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002266:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002268:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	4a16      	ldr	r2, [pc, #88]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 800226e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002272:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002274:	f7ff f882 	bl	800137c <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f87e 	bl	800137c <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e030      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x734>
 800229a:	e028      	b.n	80022ee <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b0c      	cmp	r3, #12
 80022a0:	d023      	beq.n	80022ea <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a2:	4b09      	ldr	r3, [pc, #36]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a08      	ldr	r2, [pc, #32]	@ (80022c8 <HAL_RCC_OscConfig+0x780>)
 80022a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ae:	f7ff f865 	bl	800137c <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b4:	e00c      	b.n	80022d0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b6:	f7ff f861 	bl	800137c <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d905      	bls.n	80022d0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e013      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
 80022c8:	40021000 	.word	0x40021000
 80022cc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d0:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_RCC_OscConfig+0x7b0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ec      	bne.n	80022b6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022dc:	4b06      	ldr	r3, [pc, #24]	@ (80022f8 <HAL_RCC_OscConfig+0x7b0>)
 80022de:	68da      	ldr	r2, [r3, #12]
 80022e0:	4905      	ldr	r1, [pc, #20]	@ (80022f8 <HAL_RCC_OscConfig+0x7b0>)
 80022e2:	4b06      	ldr	r3, [pc, #24]	@ (80022fc <HAL_RCC_OscConfig+0x7b4>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	60cb      	str	r3, [r1, #12]
 80022e8:	e001      	b.n	80022ee <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3720      	adds	r7, #32
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	feeefffc 	.word	0xfeeefffc

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0e7      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b75      	ldr	r3, [pc, #468]	@ (80024ec <HAL_RCC_ClockConfig+0x1ec>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d910      	bls.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b72      	ldr	r3, [pc, #456]	@ (80024ec <HAL_RCC_ClockConfig+0x1ec>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4970      	ldr	r1, [pc, #448]	@ (80024ec <HAL_RCC_ClockConfig+0x1ec>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b6e      	ldr	r3, [pc, #440]	@ (80024ec <HAL_RCC_ClockConfig+0x1ec>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0cf      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4b66      	ldr	r3, [pc, #408]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800235c:	429a      	cmp	r2, r3
 800235e:	d908      	bls.n	8002372 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b63      	ldr	r3, [pc, #396]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	4960      	ldr	r1, [pc, #384]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d04c      	beq.n	8002418 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	2b03      	cmp	r3, #3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002386:	4b5a      	ldr	r3, [pc, #360]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0a6      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239e:	4b54      	ldr	r3, [pc, #336]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d115      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e09a      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b6:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e08e      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c6:	4b4a      	ldr	r3, [pc, #296]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e086      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b46      	ldr	r3, [pc, #280]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4943      	ldr	r1, [pc, #268]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023e8:	f7fe ffc8 	bl	800137c <HAL_GetTick>
 80023ec:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ee:	e00a      	b.n	8002406 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7fe ffc4 	bl	800137c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fe:	4293      	cmp	r3, r2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e06e      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 020c 	and.w	r2, r3, #12
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	429a      	cmp	r2, r3
 8002416:	d1eb      	bne.n	80023f0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d010      	beq.n	8002446 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	4b31      	ldr	r3, [pc, #196]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002430:	429a      	cmp	r2, r3
 8002432:	d208      	bcs.n	8002446 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b2e      	ldr	r3, [pc, #184]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	492b      	ldr	r1, [pc, #172]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002446:	4b29      	ldr	r3, [pc, #164]	@ (80024ec <HAL_RCC_ClockConfig+0x1ec>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d210      	bcs.n	8002476 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002454:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <HAL_RCC_ClockConfig+0x1ec>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 0207 	bic.w	r2, r3, #7
 800245c:	4923      	ldr	r1, [pc, #140]	@ (80024ec <HAL_RCC_ClockConfig+0x1ec>)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002464:	4b21      	ldr	r3, [pc, #132]	@ (80024ec <HAL_RCC_ClockConfig+0x1ec>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d001      	beq.n	8002476 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e036      	b.n	80024e4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	4918      	ldr	r1, [pc, #96]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d009      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024a0:	4b13      	ldr	r3, [pc, #76]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4910      	ldr	r1, [pc, #64]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b4:	f000 f824 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b0d      	ldr	r3, [pc, #52]	@ (80024f0 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	490b      	ldr	r1, [pc, #44]	@ (80024f4 <HAL_RCC_ClockConfig+0x1f4>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a09      	ldr	r2, [pc, #36]	@ (80024f8 <HAL_RCC_ClockConfig+0x1f8>)
 80024d2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_ClockConfig+0x1fc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe feff 	bl	80012dc <HAL_InitTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	72fb      	strb	r3, [r7, #11]

  return status;
 80024e2:	7afb      	ldrb	r3, [r7, #11]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3710      	adds	r7, #16
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40022000 	.word	0x40022000
 80024f0:	40021000 	.word	0x40021000
 80024f4:	080085ec 	.word	0x080085ec
 80024f8:	20000110 	.word	0x20000110
 80024fc:	20000114 	.word	0x20000114

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	@ 0x24
 8002504:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	61fb      	str	r3, [r7, #28]
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250e:	4b3e      	ldr	r3, [pc, #248]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002518:	4b3b      	ldr	r3, [pc, #236]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x34>
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b0c      	cmp	r3, #12
 800252c:	d121      	bne.n	8002572 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b01      	cmp	r3, #1
 8002532:	d11e      	bne.n	8002572 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002534:	4b34      	ldr	r3, [pc, #208]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d107      	bne.n	8002550 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002540:	4b31      	ldr	r3, [pc, #196]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	61fb      	str	r3, [r7, #28]
 800254e:	e005      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002550:	4b2d      	ldr	r3, [pc, #180]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800255c:	4a2b      	ldr	r2, [pc, #172]	@ (800260c <HAL_RCC_GetSysClockFreq+0x10c>)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b04      	cmp	r3, #4
 8002576:	d102      	bne.n	800257e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002578:	4b25      	ldr	r3, [pc, #148]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x110>)
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e004      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d101      	bne.n	8002588 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002584:	4b23      	ldr	r3, [pc, #140]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x114>)
 8002586:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b0c      	cmp	r3, #12
 800258c:	d134      	bne.n	80025f8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800258e:	4b1e      	ldr	r3, [pc, #120]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d003      	beq.n	80025a6 <HAL_RCC_GetSysClockFreq+0xa6>
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d003      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0xac>
 80025a4:	e005      	b.n	80025b2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002610 <HAL_RCC_GetSysClockFreq+0x110>)
 80025a8:	617b      	str	r3, [r7, #20]
      break;
 80025aa:	e005      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025ac:	4b19      	ldr	r3, [pc, #100]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ae:	617b      	str	r3, [r7, #20]
      break;
 80025b0:	e002      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	617b      	str	r3, [r7, #20]
      break;
 80025b6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	3301      	adds	r3, #1
 80025c4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	fb03 f202 	mul.w	r2, r3, r2
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	0e5b      	lsrs	r3, r3, #25
 80025e4:	f003 0303 	and.w	r3, r3, #3
 80025e8:	3301      	adds	r3, #1
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025f8:	69bb      	ldr	r3, [r7, #24]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3724      	adds	r7, #36	@ 0x24
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40021000 	.word	0x40021000
 800260c:	08008604 	.word	0x08008604
 8002610:	00f42400 	.word	0x00f42400
 8002614:	007a1200 	.word	0x007a1200

08002618 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800261c:	4b03      	ldr	r3, [pc, #12]	@ (800262c <HAL_RCC_GetHCLKFreq+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000110 	.word	0x20000110

08002630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002634:	f7ff fff0 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4904      	ldr	r1, [pc, #16]	@ (8002658 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	080085fc 	.word	0x080085fc

0800265c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002660:	f7ff ffda 	bl	8002618 <HAL_RCC_GetHCLKFreq>
 8002664:	4602      	mov	r2, r0
 8002666:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	0adb      	lsrs	r3, r3, #11
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	4904      	ldr	r1, [pc, #16]	@ (8002684 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002672:	5ccb      	ldrb	r3, [r1, r3]
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40021000 	.word	0x40021000
 8002684:	080085fc 	.word	0x080085fc

08002688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002690:	2300      	movs	r3, #0
 8002692:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002694:	4b2a      	ldr	r3, [pc, #168]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002698:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026a0:	f7ff f9ee 	bl	8001a80 <HAL_PWREx_GetVoltageRange>
 80026a4:	6178      	str	r0, [r7, #20]
 80026a6:	e014      	b.n	80026d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026a8:	4b25      	ldr	r3, [pc, #148]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ac:	4a24      	ldr	r2, [pc, #144]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80026b4:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80026c0:	f7ff f9de 	bl	8001a80 <HAL_PWREx_GetVoltageRange>
 80026c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80026c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026d0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026d8:	d10b      	bne.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b80      	cmp	r3, #128	@ 0x80
 80026de:	d919      	bls.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2ba0      	cmp	r3, #160	@ 0xa0
 80026e4:	d902      	bls.n	80026ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026e6:	2302      	movs	r3, #2
 80026e8:	613b      	str	r3, [r7, #16]
 80026ea:	e013      	b.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026ec:	2301      	movs	r3, #1
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e010      	b.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b80      	cmp	r3, #128	@ 0x80
 80026f6:	d902      	bls.n	80026fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026f8:	2303      	movs	r3, #3
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	e00a      	b.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b80      	cmp	r3, #128	@ 0x80
 8002702:	d102      	bne.n	800270a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002704:	2302      	movs	r3, #2
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	e004      	b.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b70      	cmp	r3, #112	@ 0x70
 800270e:	d101      	bne.n	8002714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002710:	2301      	movs	r3, #1
 8002712:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002714:	4b0b      	ldr	r3, [pc, #44]	@ (8002744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 0207 	bic.w	r2, r3, #7
 800271c:	4909      	ldr	r1, [pc, #36]	@ (8002744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002724:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	429a      	cmp	r2, r3
 8002730:	d001      	beq.n	8002736 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3718      	adds	r7, #24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	40022000 	.word	0x40022000

08002748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002750:	2300      	movs	r3, #0
 8002752:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002754:	2300      	movs	r3, #0
 8002756:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002760:	2b00      	cmp	r3, #0
 8002762:	d041      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002768:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800276c:	d02a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800276e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002772:	d824      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002774:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002778:	d008      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800277a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800277e:	d81e      	bhi.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00a      	beq.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002784:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002788:	d010      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800278a:	e018      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800278c:	4b86      	ldr	r3, [pc, #536]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4a85      	ldr	r2, [pc, #532]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002796:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002798:	e015      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f000 fabb 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 80027a6:	4603      	mov	r3, r0
 80027a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027aa:	e00c      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3320      	adds	r3, #32
 80027b0:	2100      	movs	r1, #0
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 fba6 	bl	8002f04 <RCCEx_PLLSAI2_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027bc:	e003      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	74fb      	strb	r3, [r7, #19]
      break;
 80027c2:	e000      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027cc:	4b76      	ldr	r3, [pc, #472]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027da:	4973      	ldr	r1, [pc, #460]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027e2:	e001      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e4:	7cfb      	ldrb	r3, [r7, #19]
 80027e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d041      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027fc:	d02a      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80027fe:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002802:	d824      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002808:	d008      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800280a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800280e:	d81e      	bhi.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00a      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002814:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002818:	d010      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800281a:	e018      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800281c:	4b62      	ldr	r3, [pc, #392]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	4a61      	ldr	r2, [pc, #388]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002822:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002826:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002828:	e015      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fa73 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800283a:	e00c      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3320      	adds	r3, #32
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fb5e 	bl	8002f04 <RCCEx_PLLSAI2_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800284c:	e003      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	74fb      	strb	r3, [r7, #19]
      break;
 8002852:	e000      	b.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800285c:	4b52      	ldr	r3, [pc, #328]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002862:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800286a:	494f      	ldr	r1, [pc, #316]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002872:	e001      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80a0 	beq.w	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800288a:	4b47      	ldr	r3, [pc, #284]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800289a:	2300      	movs	r3, #0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b41      	ldr	r3, [pc, #260]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a4:	4a40      	ldr	r2, [pc, #256]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ac:	4b3e      	ldr	r3, [pc, #248]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028bc:	4b3b      	ldr	r3, [pc, #236]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a3a      	ldr	r2, [pc, #232]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028c8:	f7fe fd58 	bl	800137c <HAL_GetTick>
 80028cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028ce:	e009      	b.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d0:	f7fe fd54 	bl	800137c <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d902      	bls.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	74fb      	strb	r3, [r7, #19]
        break;
 80028e2:	e005      	b.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80028e4:	4b31      	ldr	r3, [pc, #196]	@ (80029ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0ef      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80028f0:	7cfb      	ldrb	r3, [r7, #19]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d15c      	bne.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80028f6:	4b2c      	ldr	r3, [pc, #176]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002900:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01f      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	429a      	cmp	r2, r3
 8002912:	d019      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002914:	4b24      	ldr	r3, [pc, #144]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800291e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002920:	4b21      	ldr	r3, [pc, #132]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	4a20      	ldr	r2, [pc, #128]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002930:	4b1d      	ldr	r3, [pc, #116]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	4a1c      	ldr	r2, [pc, #112]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002938:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002940:	4a19      	ldr	r2, [pc, #100]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d016      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7fe fd13 	bl	800137c <HAL_GetTick>
 8002956:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002958:	e00b      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800295a:	f7fe fd0f 	bl	800137c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002968:	4293      	cmp	r3, r2
 800296a:	d902      	bls.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	74fb      	strb	r3, [r7, #19]
            break;
 8002970:	e006      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002972:	4b0d      	ldr	r3, [pc, #52]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0ec      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10c      	bne.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002986:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800298c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002996:	4904      	ldr	r1, [pc, #16]	@ (80029a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800299e:	e009      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029a0:	7cfb      	ldrb	r3, [r7, #19]
 80029a2:	74bb      	strb	r3, [r7, #18]
 80029a4:	e006      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029b0:	7cfb      	ldrb	r3, [r7, #19]
 80029b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029b4:	7c7b      	ldrb	r3, [r7, #17]
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d105      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029be:	4a9d      	ldr	r2, [pc, #628]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00a      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029d2:	4b98      	ldr	r3, [pc, #608]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d8:	f023 0203 	bic.w	r2, r3, #3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	4994      	ldr	r1, [pc, #592]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029f4:	4b8f      	ldr	r3, [pc, #572]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fa:	f023 020c 	bic.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a02:	498c      	ldr	r1, [pc, #560]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a16:	4b87      	ldr	r3, [pc, #540]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a1c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a24:	4983      	ldr	r1, [pc, #524]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00a      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a38:	4b7e      	ldr	r3, [pc, #504]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	497b      	ldr	r1, [pc, #492]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a5a:	4b76      	ldr	r3, [pc, #472]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a68:	4972      	ldr	r1, [pc, #456]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a7c:	4b6d      	ldr	r3, [pc, #436]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a82:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a8a:	496a      	ldr	r1, [pc, #424]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a9e:	4b65      	ldr	r3, [pc, #404]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aa4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aac:	4961      	ldr	r1, [pc, #388]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ac0:	4b5c      	ldr	r3, [pc, #368]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ace:	4959      	ldr	r1, [pc, #356]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae2:	4b54      	ldr	r3, [pc, #336]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002af0:	4950      	ldr	r1, [pc, #320]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b04:	4b4b      	ldr	r3, [pc, #300]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b12:	4948      	ldr	r1, [pc, #288]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b26:	4b43      	ldr	r3, [pc, #268]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b34:	493f      	ldr	r1, [pc, #252]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d028      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b48:	4b3a      	ldr	r3, [pc, #232]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b56:	4937      	ldr	r1, [pc, #220]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b62:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b66:	d106      	bne.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b68:	4b32      	ldr	r3, [pc, #200]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	4a31      	ldr	r2, [pc, #196]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b72:	60d3      	str	r3, [r2, #12]
 8002b74:	e011      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b7e:	d10c      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3304      	adds	r3, #4
 8002b84:	2101      	movs	r1, #1
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f8c8 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b90:	7cfb      	ldrb	r3, [r7, #19]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d028      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ba6:	4b23      	ldr	r3, [pc, #140]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bb4:	491f      	ldr	r1, [pc, #124]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bc4:	d106      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a1a      	ldr	r2, [pc, #104]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bd0:	60d3      	str	r3, [r2, #12]
 8002bd2:	e011      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3304      	adds	r3, #4
 8002be2:	2101      	movs	r1, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f000 f899 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002bea:	4603      	mov	r3, r0
 8002bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d02b      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c04:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c12:	4908      	ldr	r1, [pc, #32]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002c22:	d109      	bne.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c24:	4b03      	ldr	r3, [pc, #12]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a02      	ldr	r2, [pc, #8]	@ (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c2e:	60d3      	str	r3, [r2, #12]
 8002c30:	e014      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002c32:	bf00      	nop
 8002c34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3304      	adds	r3, #4
 8002c46:	2101      	movs	r1, #1
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f000 f867 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c52:	7cfb      	ldrb	r3, [r7, #19]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002c58:	7cfb      	ldrb	r3, [r7, #19]
 8002c5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d02f      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c68:	4b2b      	ldr	r3, [pc, #172]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c76:	4928      	ldr	r1, [pc, #160]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c86:	d10d      	bne.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f000 f844 	bl	8002d1c <RCCEx_PLLSAI1_Config>
 8002c94:	4603      	mov	r3, r0
 8002c96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c98:	7cfb      	ldrb	r3, [r7, #19]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d014      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	74bb      	strb	r3, [r7, #18]
 8002ca2:	e011      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ca8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002cac:	d10c      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3320      	adds	r3, #32
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f000 f925 	bl	8002f04 <RCCEx_PLLSAI2_Config>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002cc4:	7cfb      	ldrb	r3, [r7, #19]
 8002cc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002cd4:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cda:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ce2:	490d      	ldr	r1, [pc, #52]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cf6:	4b08      	ldr	r3, [pc, #32]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d06:	4904      	ldr	r1, [pc, #16]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d2a:	4b75      	ldr	r3, [pc, #468]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d018      	beq.n	8002d68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002d36:	4b72      	ldr	r3, [pc, #456]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0203 	and.w	r2, r3, #3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d10d      	bne.n	8002d62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
       ||
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002d4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	091b      	lsrs	r3, r3, #4
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
       ||
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d047      	beq.n	8002df2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
 8002d66:	e044      	b.n	8002df2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d018      	beq.n	8002da2 <RCCEx_PLLSAI1_Config+0x86>
 8002d70:	2b03      	cmp	r3, #3
 8002d72:	d825      	bhi.n	8002dc0 <RCCEx_PLLSAI1_Config+0xa4>
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d002      	beq.n	8002d7e <RCCEx_PLLSAI1_Config+0x62>
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d009      	beq.n	8002d90 <RCCEx_PLLSAI1_Config+0x74>
 8002d7c:	e020      	b.n	8002dc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d7e:	4b60      	ldr	r3, [pc, #384]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d11d      	bne.n	8002dc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8e:	e01a      	b.n	8002dc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d90:	4b5b      	ldr	r3, [pc, #364]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d116      	bne.n	8002dca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002da0:	e013      	b.n	8002dca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002da2:	4b57      	ldr	r3, [pc, #348]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10f      	bne.n	8002dce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dae:	4b54      	ldr	r3, [pc, #336]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002dbe:	e006      	b.n	8002dce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc4:	e004      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dc6:	bf00      	nop
 8002dc8:	e002      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dca:	bf00      	nop
 8002dcc:	e000      	b.n	8002dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002dce:	bf00      	nop
    }

    if(status == HAL_OK)
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10d      	bne.n	8002df2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	430b      	orrs	r3, r1
 8002dec:	4944      	ldr	r1, [pc, #272]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002df2:	7bfb      	ldrb	r3, [r7, #15]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d17d      	bne.n	8002ef4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002df8:	4b41      	ldr	r3, [pc, #260]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a40      	ldr	r2, [pc, #256]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e04:	f7fe faba 	bl	800137c <HAL_GetTick>
 8002e08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e0a:	e009      	b.n	8002e20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e0c:	f7fe fab6 	bl	800137c <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d902      	bls.n	8002e20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8002e1e:	e005      	b.n	8002e2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e20:	4b37      	ldr	r3, [pc, #220]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1ef      	bne.n	8002e0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d160      	bne.n	8002ef4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d111      	bne.n	8002e5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e38:	4b31      	ldr	r3, [pc, #196]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3a:	691b      	ldr	r3, [r3, #16]
 8002e3c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6892      	ldr	r2, [r2, #8]
 8002e48:	0211      	lsls	r1, r2, #8
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	68d2      	ldr	r2, [r2, #12]
 8002e4e:	0912      	lsrs	r2, r2, #4
 8002e50:	0452      	lsls	r2, r2, #17
 8002e52:	430a      	orrs	r2, r1
 8002e54:	492a      	ldr	r1, [pc, #168]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	610b      	str	r3, [r1, #16]
 8002e5a:	e027      	b.n	8002eac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d112      	bne.n	8002e88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e62:	4b27      	ldr	r3, [pc, #156]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002e6a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6892      	ldr	r2, [r2, #8]
 8002e72:	0211      	lsls	r1, r2, #8
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6912      	ldr	r2, [r2, #16]
 8002e78:	0852      	lsrs	r2, r2, #1
 8002e7a:	3a01      	subs	r2, #1
 8002e7c:	0552      	lsls	r2, r2, #21
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	491f      	ldr	r1, [pc, #124]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	610b      	str	r3, [r1, #16]
 8002e86:	e011      	b.n	8002eac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002e88:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e90:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6892      	ldr	r2, [r2, #8]
 8002e98:	0211      	lsls	r1, r2, #8
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6952      	ldr	r2, [r2, #20]
 8002e9e:	0852      	lsrs	r2, r2, #1
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	0652      	lsls	r2, r2, #25
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	4916      	ldr	r1, [pc, #88]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002eac:	4b14      	ldr	r3, [pc, #80]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a13      	ldr	r2, [pc, #76]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe fa60 	bl	800137c <HAL_GetTick>
 8002ebc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ebe:	e009      	b.n	8002ed4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ec0:	f7fe fa5c 	bl	800137c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d902      	bls.n	8002ed4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ed2:	e005      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ed4:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0ef      	beq.n	8002ec0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ee6:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	4904      	ldr	r1, [pc, #16]	@ (8002f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3710      	adds	r7, #16
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000

08002f04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f12:	4b6a      	ldr	r3, [pc, #424]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d018      	beq.n	8002f50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f1e:	4b67      	ldr	r3, [pc, #412]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0203 	and.w	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d10d      	bne.n	8002f4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
       ||
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d009      	beq.n	8002f4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002f36:	4b61      	ldr	r3, [pc, #388]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
       ||
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d047      	beq.n	8002fda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	73fb      	strb	r3, [r7, #15]
 8002f4e:	e044      	b.n	8002fda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d018      	beq.n	8002f8a <RCCEx_PLLSAI2_Config+0x86>
 8002f58:	2b03      	cmp	r3, #3
 8002f5a:	d825      	bhi.n	8002fa8 <RCCEx_PLLSAI2_Config+0xa4>
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d002      	beq.n	8002f66 <RCCEx_PLLSAI2_Config+0x62>
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d009      	beq.n	8002f78 <RCCEx_PLLSAI2_Config+0x74>
 8002f64:	e020      	b.n	8002fa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002f66:	4b55      	ldr	r3, [pc, #340]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d11d      	bne.n	8002fae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f76:	e01a      	b.n	8002fae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f78:	4b50      	ldr	r3, [pc, #320]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d116      	bne.n	8002fb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f88:	e013      	b.n	8002fb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f8a:	4b4c      	ldr	r3, [pc, #304]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10f      	bne.n	8002fb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f96:	4b49      	ldr	r3, [pc, #292]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d109      	bne.n	8002fb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fa6:	e006      	b.n	8002fb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      break;
 8002fac:	e004      	b.n	8002fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e002      	b.n	8002fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e000      	b.n	8002fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002fb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002fb8:	7bfb      	ldrb	r3, [r7, #15]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10d      	bne.n	8002fda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6819      	ldr	r1, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	430b      	orrs	r3, r1
 8002fd4:	4939      	ldr	r1, [pc, #228]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002fda:	7bfb      	ldrb	r3, [r7, #15]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d167      	bne.n	80030b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002fe0:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a35      	ldr	r2, [pc, #212]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fec:	f7fe f9c6 	bl	800137c <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ff2:	e009      	b.n	8003008 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ff4:	f7fe f9c2 	bl	800137c <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d902      	bls.n	8003008 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	73fb      	strb	r3, [r7, #15]
        break;
 8003006:	e005      	b.n	8003014 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003008:	4b2c      	ldr	r3, [pc, #176]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1ef      	bne.n	8002ff4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d14a      	bne.n	80030b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d111      	bne.n	8003044 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003020:	4b26      	ldr	r3, [pc, #152]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6892      	ldr	r2, [r2, #8]
 8003030:	0211      	lsls	r1, r2, #8
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	68d2      	ldr	r2, [r2, #12]
 8003036:	0912      	lsrs	r2, r2, #4
 8003038:	0452      	lsls	r2, r2, #17
 800303a:	430a      	orrs	r2, r1
 800303c:	491f      	ldr	r1, [pc, #124]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800303e:	4313      	orrs	r3, r2
 8003040:	614b      	str	r3, [r1, #20]
 8003042:	e011      	b.n	8003068 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003044:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800304c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6892      	ldr	r2, [r2, #8]
 8003054:	0211      	lsls	r1, r2, #8
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6912      	ldr	r2, [r2, #16]
 800305a:	0852      	lsrs	r2, r2, #1
 800305c:	3a01      	subs	r2, #1
 800305e:	0652      	lsls	r2, r2, #25
 8003060:	430a      	orrs	r2, r1
 8003062:	4916      	ldr	r1, [pc, #88]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003064:	4313      	orrs	r3, r2
 8003066:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003068:	4b14      	ldr	r3, [pc, #80]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a13      	ldr	r2, [pc, #76]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800306e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003072:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe f982 	bl	800137c <HAL_GetTick>
 8003078:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800307a:	e009      	b.n	8003090 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800307c:	f7fe f97e 	bl	800137c <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d902      	bls.n	8003090 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	73fb      	strb	r3, [r7, #15]
          break;
 800308e:	e005      	b.n	800309c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003090:	4b0a      	ldr	r3, [pc, #40]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d0ef      	beq.n	800307c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800309c:	7bfb      	ldrb	r3, [r7, #15]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80030a2:	4b06      	ldr	r3, [pc, #24]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	4904      	ldr	r1, [pc, #16]	@ (80030bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40021000 	.word	0x40021000

080030c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e095      	b.n	80031fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030e2:	d009      	beq.n	80030f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
 80030ea:	e005      	b.n	80030f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d106      	bne.n	8003118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7fd fe5e 	bl	8000dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800312e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003138:	d902      	bls.n	8003140 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e002      	b.n	8003146 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003144:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800314e:	d007      	beq.n	8003160 <HAL_SPI_Init+0xa0>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003158:	d002      	beq.n	8003160 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	431a      	orrs	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031a2:	ea42 0103 	orr.w	r1, r2, r3
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	f003 0204 	and.w	r2, r3, #4
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	431a      	orrs	r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031dc:	ea42 0103 	orr.w	r1, r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}

08003206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b088      	sub	sp, #32
 800320a:	af00      	add	r7, sp, #0
 800320c:	60f8      	str	r0, [r7, #12]
 800320e:	60b9      	str	r1, [r7, #8]
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4613      	mov	r3, r2
 8003214:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003216:	f7fe f8b1 	bl	800137c <HAL_GetTick>
 800321a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800321c:	88fb      	ldrh	r3, [r7, #6]
 800321e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b01      	cmp	r3, #1
 800322a:	d001      	beq.n	8003230 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
 800322e:	e15c      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <HAL_SPI_Transmit+0x36>
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e154      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003246:	2b01      	cmp	r3, #1
 8003248:	d101      	bne.n	800324e <HAL_SPI_Transmit+0x48>
 800324a:	2302      	movs	r3, #2
 800324c:	e14d      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2203      	movs	r2, #3
 800325a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	88fa      	ldrh	r2, [r7, #6]
 800326e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	88fa      	ldrh	r2, [r7, #6]
 8003274:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032a0:	d10f      	bne.n	80032c2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032cc:	2b40      	cmp	r3, #64	@ 0x40
 80032ce:	d007      	beq.n	80032e0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032e8:	d952      	bls.n	8003390 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <HAL_SPI_Transmit+0xf2>
 80032f2:	8b7b      	ldrh	r3, [r7, #26]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d145      	bne.n	8003384 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	1c9a      	adds	r2, r3, #2
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003312:	b29b      	uxth	r3, r3
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800331c:	e032      	b.n	8003384 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d112      	bne.n	8003352 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	881a      	ldrh	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333c:	1c9a      	adds	r2, r3, #2
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003350:	e018      	b.n	8003384 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003352:	f7fe f813 	bl	800137c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	683a      	ldr	r2, [r7, #0]
 800335e:	429a      	cmp	r2, r3
 8003360:	d803      	bhi.n	800336a <HAL_SPI_Transmit+0x164>
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d102      	bne.n	8003370 <HAL_SPI_Transmit+0x16a>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2201      	movs	r2, #1
 8003374:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e0b2      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003388:	b29b      	uxth	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1c7      	bne.n	800331e <HAL_SPI_Transmit+0x118>
 800338e:	e083      	b.n	8003498 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d002      	beq.n	800339e <HAL_SPI_Transmit+0x198>
 8003398:	8b7b      	ldrh	r3, [r7, #26]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d177      	bne.n	800348e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d912      	bls.n	80033ce <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	881a      	ldrh	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b8:	1c9a      	adds	r2, r3, #2
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b02      	subs	r3, #2
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033cc:	e05f      	b.n	800348e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	330c      	adds	r3, #12
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033f4:	e04b      	b.n	800348e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b02      	cmp	r3, #2
 8003402:	d12b      	bne.n	800345c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b01      	cmp	r3, #1
 800340c:	d912      	bls.n	8003434 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	881a      	ldrh	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b02      	subs	r3, #2
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003432:	e02c      	b.n	800348e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	330c      	adds	r3, #12
 800343e:	7812      	ldrb	r2, [r2, #0]
 8003440:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800345a:	e018      	b.n	800348e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800345c:	f7fd ff8e 	bl	800137c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d803      	bhi.n	8003474 <HAL_SPI_Transmit+0x26e>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d102      	bne.n	800347a <HAL_SPI_Transmit+0x274>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e02d      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003492:	b29b      	uxth	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ae      	bne.n	80033f6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003498:	69fa      	ldr	r2, [r7, #28]
 800349a:	6839      	ldr	r1, [r7, #0]
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 fa5b 	bl	8003958 <SPI_EndRxTxTransaction>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	617b      	str	r3, [r7, #20]
 80034ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
  }
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3720      	adds	r7, #32
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10e      	bne.n	8003534 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800351c:	2b00      	cmp	r3, #0
 800351e:	d009      	beq.n	8003534 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d004      	beq.n	8003534 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	4798      	blx	r3
    return;
 8003532:	e0ce      	b.n	80036d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d009      	beq.n	8003552 <HAL_SPI_IRQHandler+0x5e>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003544:	2b00      	cmp	r3, #0
 8003546:	d004      	beq.n	8003552 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	4798      	blx	r3
    return;
 8003550:	e0bf      	b.n	80036d2 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f003 0320 	and.w	r3, r3, #32
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10a      	bne.n	8003572 <HAL_SPI_IRQHandler+0x7e>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80b0 	beq.w	80036d2 <HAL_SPI_IRQHandler+0x1de>
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80aa 	beq.w	80036d2 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d023      	beq.n	80035d0 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b03      	cmp	r3, #3
 8003592:	d011      	beq.n	80035b8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003598:	f043 0204 	orr.w	r2, r3, #4
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	617b      	str	r3, [r7, #20]
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	e00b      	b.n	80035d0 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	693b      	ldr	r3, [r7, #16]
        return;
 80035ce:	e080      	b.n	80036d2 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d014      	beq.n	8003604 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035de:	f043 0201 	orr.w	r2, r3, #1
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80035e6:	2300      	movs	r3, #0
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00c      	beq.n	8003628 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003612:	f043 0208 	orr.w	r2, r3, #8
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800361a:	2300      	movs	r3, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800362c:	2b00      	cmp	r3, #0
 800362e:	d04f      	beq.n	80036d0 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800363e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <HAL_SPI_IRQHandler+0x168>
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b00      	cmp	r3, #0
 800365a:	d034      	beq.n	80036c6 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f022 0203 	bic.w	r2, r2, #3
 800366a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003670:	2b00      	cmp	r3, #0
 8003672:	d011      	beq.n	8003698 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003678:	4a17      	ldr	r2, [pc, #92]	@ (80036d8 <HAL_SPI_IRQHandler+0x1e4>)
 800367a:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003680:	4618      	mov	r0, r3
 8003682:	f7fd fffa 	bl	800167a <HAL_DMA_Abort_IT>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003690:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800369c:	2b00      	cmp	r3, #0
 800369e:	d016      	beq.n	80036ce <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	4a0c      	ldr	r2, [pc, #48]	@ (80036d8 <HAL_SPI_IRQHandler+0x1e4>)
 80036a6:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ac:	4618      	mov	r0, r3
 80036ae:	f7fd ffe4 	bl	800167a <HAL_DMA_Abort_IT>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036bc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 80036c4:	e003      	b.n	80036ce <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f808 	bl	80036dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80036cc:	e000      	b.n	80036d0 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 80036ce:	bf00      	nop
    return;
 80036d0:	bf00      	nop
  }
}
 80036d2:	3720      	adds	r7, #32
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	080036f1 	.word	0x080036f1

080036dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff ffe5 	bl	80036dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	4613      	mov	r3, r2
 800372a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800372c:	f7fd fe26 	bl	800137c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	683a      	ldr	r2, [r7, #0]
 8003738:	4413      	add	r3, r2
 800373a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800373c:	f7fd fe1e 	bl	800137c <HAL_GetTick>
 8003740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003742:	4b39      	ldr	r3, [pc, #228]	@ (8003828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	015b      	lsls	r3, r3, #5
 8003748:	0d1b      	lsrs	r3, r3, #20
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003752:	e054      	b.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d050      	beq.n	80037fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800375c:	f7fd fe0e 	bl	800137c <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	429a      	cmp	r2, r3
 800376a:	d902      	bls.n	8003772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d13d      	bne.n	80037ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800378a:	d111      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003794:	d004      	beq.n	80037a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800379e:	d107      	bne.n	80037b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b8:	d10f      	bne.n	80037da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e017      	b.n	800381e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	429a      	cmp	r2, r3
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	79fb      	ldrb	r3, [r7, #7]
 8003818:	429a      	cmp	r2, r3
 800381a:	d19b      	bne.n	8003754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000110 	.word	0x20000110

0800382c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08a      	sub	sp, #40	@ 0x28
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800383e:	f7fd fd9d 	bl	800137c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	683a      	ldr	r2, [r7, #0]
 800384a:	4413      	add	r3, r2
 800384c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800384e:	f7fd fd95 	bl	800137c <HAL_GetTick>
 8003852:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800385c:	4b3d      	ldr	r3, [pc, #244]	@ (8003954 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00da      	lsls	r2, r3, #3
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	0d1b      	lsrs	r3, r3, #20
 800386c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003874:	e060      	b.n	8003938 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800387c:	d107      	bne.n	800388e <SPI_WaitFifoStateUntilTimeout+0x62>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b2db      	uxtb	r3, r3
 800388a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800388c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d050      	beq.n	8003938 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003896:	f7fd fd71 	bl	800137c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d902      	bls.n	80038ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d13d      	bne.n	8003928 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80038ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038c4:	d111      	bne.n	80038ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038ce:	d004      	beq.n	80038da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d8:	d107      	bne.n	80038ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f2:	d10f      	bne.n	8003914 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003912:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e010      	b.n	800394a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	3b01      	subs	r3, #1
 8003936:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	429a      	cmp	r2, r3
 8003946:	d196      	bne.n	8003876 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	3728      	adds	r7, #40	@ 0x28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000110 	.word	0x20000110

08003958 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	2200      	movs	r2, #0
 800396c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7ff ff5b 	bl	800382c <SPI_WaitFifoStateUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d007      	beq.n	800398c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e027      	b.n	80039dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2200      	movs	r2, #0
 8003994:	2180      	movs	r1, #128	@ 0x80
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f7ff fec0 	bl	800371c <SPI_WaitFlagStateUntilTimeout>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e014      	b.n	80039dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f7ff ff34 	bl	800382c <SPI_WaitFifoStateUntilTimeout>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d007      	beq.n	80039da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ce:	f043 0220 	orr.w	r2, r3, #32
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e000      	b.n	80039dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e040      	b.n	8003a78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fd fbba 	bl	8001180 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2224      	movs	r2, #36	@ 0x24
 8003a10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fedc 	bl	80047e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fc21 	bl	8004278 <UART_SetConfig>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e01b      	b.n	8003a78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003a4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 ff5b 	bl	800492c <UART_CheckIdleState>
 8003a76:	4603      	mov	r3, r0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	@ 0x28
 8003a84:	af02      	add	r7, sp, #8
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	603b      	str	r3, [r7, #0]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d177      	bne.n	8003b88 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_UART_Transmit+0x24>
 8003a9e:	88fb      	ldrh	r3, [r7, #6]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e070      	b.n	8003b8a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2221      	movs	r2, #33	@ 0x21
 8003ab4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab6:	f7fd fc61 	bl	800137c <HAL_GetTick>
 8003aba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ad4:	d108      	bne.n	8003ae8 <HAL_UART_Transmit+0x68>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d104      	bne.n	8003ae8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003af0:	e02f      	b.n	8003b52 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	2180      	movs	r1, #128	@ 0x80
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 ffbd 	bl	8004a7c <UART_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d004      	beq.n	8003b12 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2220      	movs	r2, #32
 8003b0c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e03b      	b.n	8003b8a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	881a      	ldrh	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b24:	b292      	uxth	r2, r2
 8003b26:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	e007      	b.n	8003b40 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	781a      	ldrb	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1c9      	bne.n	8003af2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	2140      	movs	r1, #64	@ 0x40
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 ff87 	bl	8004a7c <UART_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d004      	beq.n	8003b7e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2220      	movs	r2, #32
 8003b78:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e005      	b.n	8003b8a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2220      	movs	r2, #32
 8003b82:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	e000      	b.n	8003b8a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b88:	2302      	movs	r3, #2
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	@ 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ba8:	2b20      	cmp	r3, #32
 8003baa:	d137      	bne.n	8003c1c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_UART_Receive_IT+0x24>
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d101      	bne.n	8003bbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e030      	b.n	8003c1e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a18      	ldr	r2, [pc, #96]	@ (8003c28 <HAL_UART_Receive_IT+0x94>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d01f      	beq.n	8003c0c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d018      	beq.n	8003c0c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	613b      	str	r3, [r7, #16]
   return(result);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	69f9      	ldr	r1, [r7, #28]
 8003bfe:	6a3a      	ldr	r2, [r7, #32]
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e6      	bne.n	8003bda <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c0c:	88fb      	ldrh	r3, [r7, #6]
 8003c0e:	461a      	mov	r2, r3
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 ffa0 	bl	8004b58 <UART_Start_Receive_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	e000      	b.n	8003c1e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c1c:	2302      	movs	r3, #2
  }
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3728      	adds	r7, #40	@ 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40008000 	.word	0x40008000

08003c2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b0ba      	sub	sp, #232	@ 0xe8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003c56:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003c60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d115      	bne.n	8003c94 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00f      	beq.n	8003c94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d009      	beq.n	8003c94 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 82ca 	beq.w	800421e <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
      }
      return;
 8003c92:	e2c4      	b.n	800421e <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f000 8117 	beq.w	8003ecc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ca2:	f003 0301 	and.w	r3, r3, #1
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d106      	bne.n	8003cb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003caa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003cae:	4b85      	ldr	r3, [pc, #532]	@ (8003ec4 <HAL_UART_IRQHandler+0x298>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	f000 810a 	beq.w	8003ecc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d011      	beq.n	8003ce8 <HAL_UART_IRQHandler+0xbc>
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00b      	beq.n	8003ce8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d011      	beq.n	8003d18 <HAL_UART_IRQHandler+0xec>
 8003cf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d00b      	beq.n	8003d18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2202      	movs	r2, #2
 8003d06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d0e:	f043 0204 	orr.w	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d1c:	f003 0304 	and.w	r3, r3, #4
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d011      	beq.n	8003d48 <HAL_UART_IRQHandler+0x11c>
 8003d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00b      	beq.n	8003d48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2204      	movs	r2, #4
 8003d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d3e:	f043 0202 	orr.w	r2, r3, #2
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d017      	beq.n	8003d84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d105      	bne.n	8003d6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2208      	movs	r2, #8
 8003d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d7a:	f043 0208 	orr.w	r2, r3, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <HAL_UART_IRQHandler+0x18a>
 8003d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d94:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00c      	beq.n	8003db6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003da4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8230 	beq.w	8004222 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003dc6:	f003 0320 	and.w	r3, r3, #32
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00d      	beq.n	8003dea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003df0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfe:	2b40      	cmp	r3, #64	@ 0x40
 8003e00:	d005      	beq.n	8003e0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003e06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d04f      	beq.n	8003eae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 ff68 	bl	8004ce4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e1e:	2b40      	cmp	r3, #64	@ 0x40
 8003e20:	d141      	bne.n	8003ea6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3308      	adds	r3, #8
 8003e28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003e38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3308      	adds	r3, #8
 8003e4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003e4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1d9      	bne.n	8003e22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d013      	beq.n	8003e9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e7a:	4a13      	ldr	r2, [pc, #76]	@ (8003ec8 <HAL_UART_IRQHandler+0x29c>)
 8003e7c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fd fbf9 	bl	800167a <HAL_DMA_Abort_IT>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d017      	beq.n	8003ebe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e98:	4610      	mov	r0, r2
 8003e9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e9c:	e00f      	b.n	8003ebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f9d4 	bl	800424c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea4:	e00b      	b.n	8003ebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f9d0 	bl	800424c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eac:	e007      	b.n	8003ebe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f9cc 	bl	800424c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003ebc:	e1b1      	b.n	8004222 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebe:	bf00      	nop
    return;
 8003ec0:	e1af      	b.n	8004222 <HAL_UART_IRQHandler+0x5f6>
 8003ec2:	bf00      	nop
 8003ec4:	04000120 	.word	0x04000120
 8003ec8:	08004dad 	.word	0x08004dad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	f040 816a 	bne.w	80041aa <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8163 	beq.w	80041aa <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 815c 	beq.w	80041aa <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f04:	2b40      	cmp	r3, #64	@ 0x40
 8003f06:	f040 80d4 	bne.w	80040b2 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 80ad 	beq.w	800407a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	f080 80a5 	bcs.w	800407a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003f36:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0320 	and.w	r3, r3, #32
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f040 8086 	bne.w	8004058 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f7a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f82:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1da      	bne.n	8003f4c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3308      	adds	r3, #8
 8003f9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fa0:	e853 3f00 	ldrex	r3, [r3]
 8003fa4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa8:	f023 0301 	bic.w	r3, r3, #1
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3308      	adds	r3, #8
 8003fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003fba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003fbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003fc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1e1      	bne.n	8003f96 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003fdc:	e853 3f00 	ldrex	r3, [r3]
 8003fe0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fe4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3308      	adds	r3, #8
 8003ff2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ff6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ff8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ffc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ffe:	e841 2300 	strex	r3, r2, [r1]
 8004002:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004004:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1e3      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2220      	movs	r2, #32
 800400e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004020:	e853 3f00 	ldrex	r3, [r3]
 8004024:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004026:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004028:	f023 0310 	bic.w	r3, r3, #16
 800402c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800403a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800403c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004040:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e4      	bne.n	8004018 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd fad3 	bl	80015fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800406a:	b29b      	uxth	r3, r3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	b29b      	uxth	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f8f4 	bl	8004260 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004078:	e0d5      	b.n	8004226 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004080:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004084:	429a      	cmp	r2, r3
 8004086:	f040 80ce 	bne.w	8004226 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b20      	cmp	r3, #32
 8004098:	f040 80c5 	bne.w	8004226 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2202      	movs	r2, #2
 80040a0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80040a8:	4619      	mov	r1, r3
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f8d8 	bl	8004260 <HAL_UARTEx_RxEventCallback>
      return;
 80040b0:	e0b9      	b.n	8004226 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80ab 	beq.w	800422a <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80040d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80a6 	beq.w	800422a <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80040ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004100:	647b      	str	r3, [r7, #68]	@ 0x44
 8004102:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800410e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e4      	bne.n	80040de <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3308      	adds	r3, #8
 800411a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	623b      	str	r3, [r7, #32]
   return(result);
 8004124:	6a3b      	ldr	r3, [r7, #32]
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3308      	adds	r3, #8
 8004134:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004138:	633a      	str	r2, [r7, #48]	@ 0x30
 800413a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800413e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e3      	bne.n	8004114 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	60fb      	str	r3, [r7, #12]
   return(result);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f023 0310 	bic.w	r3, r3, #16
 8004174:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	461a      	mov	r2, r3
 800417e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004186:	69b9      	ldr	r1, [r7, #24]
 8004188:	69fa      	ldr	r2, [r7, #28]
 800418a:	e841 2300 	strex	r3, r2, [r1]
 800418e:	617b      	str	r3, [r7, #20]
   return(result);
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1e4      	bne.n	8004160 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2202      	movs	r2, #2
 800419a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800419c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80041a0:	4619      	mov	r1, r3
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f85c 	bl	8004260 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041a8:	e03f      	b.n	800422a <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00e      	beq.n	80041d4 <HAL_UART_IRQHandler+0x5a8>
 80041b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80041ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 ffe9 	bl	80051a4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041d2:	e02d      	b.n	8004230 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80041d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00e      	beq.n	80041fe <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80041e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d008      	beq.n	80041fe <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01c      	beq.n	800422e <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
    }
    return;
 80041fc:	e017      	b.n	800422e <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d012      	beq.n	8004230 <HAL_UART_IRQHandler+0x604>
 800420a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800420e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00c      	beq.n	8004230 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 fdde 	bl	8004dd8 <UART_EndTransmit_IT>
    return;
 800421c:	e008      	b.n	8004230 <HAL_UART_IRQHandler+0x604>
      return;
 800421e:	bf00      	nop
 8004220:	e006      	b.n	8004230 <HAL_UART_IRQHandler+0x604>
    return;
 8004222:	bf00      	nop
 8004224:	e004      	b.n	8004230 <HAL_UART_IRQHandler+0x604>
      return;
 8004226:	bf00      	nop
 8004228:	e002      	b.n	8004230 <HAL_UART_IRQHandler+0x604>
      return;
 800422a:	bf00      	nop
 800422c:	e000      	b.n	8004230 <HAL_UART_IRQHandler+0x604>
    return;
 800422e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004230:	37e8      	adds	r7, #232	@ 0xe8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop

08004238 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800427c:	b08a      	sub	sp, #40	@ 0x28
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	431a      	orrs	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	431a      	orrs	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4313      	orrs	r3, r2
 800429e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	4ba4      	ldr	r3, [pc, #656]	@ (8004538 <UART_SetConfig+0x2c0>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	6812      	ldr	r2, [r2, #0]
 80042ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042b0:	430b      	orrs	r3, r1
 80042b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68da      	ldr	r2, [r3, #12]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a99      	ldr	r2, [pc, #612]	@ (800453c <UART_SetConfig+0x2c4>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	6a1b      	ldr	r3, [r3, #32]
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	4313      	orrs	r3, r2
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042f4:	430a      	orrs	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a90      	ldr	r2, [pc, #576]	@ (8004540 <UART_SetConfig+0x2c8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d126      	bne.n	8004350 <UART_SetConfig+0xd8>
 8004302:	4b90      	ldr	r3, [pc, #576]	@ (8004544 <UART_SetConfig+0x2cc>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004308:	f003 0303 	and.w	r3, r3, #3
 800430c:	2b03      	cmp	r3, #3
 800430e:	d81b      	bhi.n	8004348 <UART_SetConfig+0xd0>
 8004310:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <UART_SetConfig+0xa0>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004329 	.word	0x08004329
 800431c:	08004339 	.word	0x08004339
 8004320:	08004331 	.word	0x08004331
 8004324:	08004341 	.word	0x08004341
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800432e:	e116      	b.n	800455e <UART_SetConfig+0x2e6>
 8004330:	2302      	movs	r3, #2
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004336:	e112      	b.n	800455e <UART_SetConfig+0x2e6>
 8004338:	2304      	movs	r3, #4
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800433e:	e10e      	b.n	800455e <UART_SetConfig+0x2e6>
 8004340:	2308      	movs	r3, #8
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004346:	e10a      	b.n	800455e <UART_SetConfig+0x2e6>
 8004348:	2310      	movs	r3, #16
 800434a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800434e:	e106      	b.n	800455e <UART_SetConfig+0x2e6>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a7c      	ldr	r2, [pc, #496]	@ (8004548 <UART_SetConfig+0x2d0>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d138      	bne.n	80043cc <UART_SetConfig+0x154>
 800435a:	4b7a      	ldr	r3, [pc, #488]	@ (8004544 <UART_SetConfig+0x2cc>)
 800435c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004360:	f003 030c 	and.w	r3, r3, #12
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d82d      	bhi.n	80043c4 <UART_SetConfig+0x14c>
 8004368:	a201      	add	r2, pc, #4	@ (adr r2, 8004370 <UART_SetConfig+0xf8>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043c5 	.word	0x080043c5
 8004378:	080043c5 	.word	0x080043c5
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043b5 	.word	0x080043b5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043c5 	.word	0x080043c5
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043ad 	.word	0x080043ad
 8004394:	080043c5 	.word	0x080043c5
 8004398:	080043c5 	.word	0x080043c5
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043bd 	.word	0x080043bd
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043aa:	e0d8      	b.n	800455e <UART_SetConfig+0x2e6>
 80043ac:	2302      	movs	r3, #2
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b2:	e0d4      	b.n	800455e <UART_SetConfig+0x2e6>
 80043b4:	2304      	movs	r3, #4
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ba:	e0d0      	b.n	800455e <UART_SetConfig+0x2e6>
 80043bc:	2308      	movs	r3, #8
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c2:	e0cc      	b.n	800455e <UART_SetConfig+0x2e6>
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ca:	e0c8      	b.n	800455e <UART_SetConfig+0x2e6>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a5e      	ldr	r2, [pc, #376]	@ (800454c <UART_SetConfig+0x2d4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d125      	bne.n	8004422 <UART_SetConfig+0x1aa>
 80043d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004544 <UART_SetConfig+0x2cc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80043e0:	2b30      	cmp	r3, #48	@ 0x30
 80043e2:	d016      	beq.n	8004412 <UART_SetConfig+0x19a>
 80043e4:	2b30      	cmp	r3, #48	@ 0x30
 80043e6:	d818      	bhi.n	800441a <UART_SetConfig+0x1a2>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d00a      	beq.n	8004402 <UART_SetConfig+0x18a>
 80043ec:	2b20      	cmp	r3, #32
 80043ee:	d814      	bhi.n	800441a <UART_SetConfig+0x1a2>
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <UART_SetConfig+0x182>
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d008      	beq.n	800440a <UART_SetConfig+0x192>
 80043f8:	e00f      	b.n	800441a <UART_SetConfig+0x1a2>
 80043fa:	2300      	movs	r3, #0
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004400:	e0ad      	b.n	800455e <UART_SetConfig+0x2e6>
 8004402:	2302      	movs	r3, #2
 8004404:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004408:	e0a9      	b.n	800455e <UART_SetConfig+0x2e6>
 800440a:	2304      	movs	r3, #4
 800440c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004410:	e0a5      	b.n	800455e <UART_SetConfig+0x2e6>
 8004412:	2308      	movs	r3, #8
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004418:	e0a1      	b.n	800455e <UART_SetConfig+0x2e6>
 800441a:	2310      	movs	r3, #16
 800441c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004420:	e09d      	b.n	800455e <UART_SetConfig+0x2e6>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4a      	ldr	r2, [pc, #296]	@ (8004550 <UART_SetConfig+0x2d8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d125      	bne.n	8004478 <UART_SetConfig+0x200>
 800442c:	4b45      	ldr	r3, [pc, #276]	@ (8004544 <UART_SetConfig+0x2cc>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004436:	2bc0      	cmp	r3, #192	@ 0xc0
 8004438:	d016      	beq.n	8004468 <UART_SetConfig+0x1f0>
 800443a:	2bc0      	cmp	r3, #192	@ 0xc0
 800443c:	d818      	bhi.n	8004470 <UART_SetConfig+0x1f8>
 800443e:	2b80      	cmp	r3, #128	@ 0x80
 8004440:	d00a      	beq.n	8004458 <UART_SetConfig+0x1e0>
 8004442:	2b80      	cmp	r3, #128	@ 0x80
 8004444:	d814      	bhi.n	8004470 <UART_SetConfig+0x1f8>
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <UART_SetConfig+0x1d8>
 800444a:	2b40      	cmp	r3, #64	@ 0x40
 800444c:	d008      	beq.n	8004460 <UART_SetConfig+0x1e8>
 800444e:	e00f      	b.n	8004470 <UART_SetConfig+0x1f8>
 8004450:	2300      	movs	r3, #0
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004456:	e082      	b.n	800455e <UART_SetConfig+0x2e6>
 8004458:	2302      	movs	r3, #2
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445e:	e07e      	b.n	800455e <UART_SetConfig+0x2e6>
 8004460:	2304      	movs	r3, #4
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004466:	e07a      	b.n	800455e <UART_SetConfig+0x2e6>
 8004468:	2308      	movs	r3, #8
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446e:	e076      	b.n	800455e <UART_SetConfig+0x2e6>
 8004470:	2310      	movs	r3, #16
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004476:	e072      	b.n	800455e <UART_SetConfig+0x2e6>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a35      	ldr	r2, [pc, #212]	@ (8004554 <UART_SetConfig+0x2dc>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d12a      	bne.n	80044d8 <UART_SetConfig+0x260>
 8004482:	4b30      	ldr	r3, [pc, #192]	@ (8004544 <UART_SetConfig+0x2cc>)
 8004484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004488:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004490:	d01a      	beq.n	80044c8 <UART_SetConfig+0x250>
 8004492:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004496:	d81b      	bhi.n	80044d0 <UART_SetConfig+0x258>
 8004498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800449c:	d00c      	beq.n	80044b8 <UART_SetConfig+0x240>
 800449e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044a2:	d815      	bhi.n	80044d0 <UART_SetConfig+0x258>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d003      	beq.n	80044b0 <UART_SetConfig+0x238>
 80044a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ac:	d008      	beq.n	80044c0 <UART_SetConfig+0x248>
 80044ae:	e00f      	b.n	80044d0 <UART_SetConfig+0x258>
 80044b0:	2300      	movs	r3, #0
 80044b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b6:	e052      	b.n	800455e <UART_SetConfig+0x2e6>
 80044b8:	2302      	movs	r3, #2
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044be:	e04e      	b.n	800455e <UART_SetConfig+0x2e6>
 80044c0:	2304      	movs	r3, #4
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c6:	e04a      	b.n	800455e <UART_SetConfig+0x2e6>
 80044c8:	2308      	movs	r3, #8
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ce:	e046      	b.n	800455e <UART_SetConfig+0x2e6>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d6:	e042      	b.n	800455e <UART_SetConfig+0x2e6>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a17      	ldr	r2, [pc, #92]	@ (800453c <UART_SetConfig+0x2c4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d13a      	bne.n	8004558 <UART_SetConfig+0x2e0>
 80044e2:	4b18      	ldr	r3, [pc, #96]	@ (8004544 <UART_SetConfig+0x2cc>)
 80044e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044f0:	d01a      	beq.n	8004528 <UART_SetConfig+0x2b0>
 80044f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044f6:	d81b      	bhi.n	8004530 <UART_SetConfig+0x2b8>
 80044f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044fc:	d00c      	beq.n	8004518 <UART_SetConfig+0x2a0>
 80044fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004502:	d815      	bhi.n	8004530 <UART_SetConfig+0x2b8>
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <UART_SetConfig+0x298>
 8004508:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800450c:	d008      	beq.n	8004520 <UART_SetConfig+0x2a8>
 800450e:	e00f      	b.n	8004530 <UART_SetConfig+0x2b8>
 8004510:	2300      	movs	r3, #0
 8004512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004516:	e022      	b.n	800455e <UART_SetConfig+0x2e6>
 8004518:	2302      	movs	r3, #2
 800451a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800451e:	e01e      	b.n	800455e <UART_SetConfig+0x2e6>
 8004520:	2304      	movs	r3, #4
 8004522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004526:	e01a      	b.n	800455e <UART_SetConfig+0x2e6>
 8004528:	2308      	movs	r3, #8
 800452a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800452e:	e016      	b.n	800455e <UART_SetConfig+0x2e6>
 8004530:	2310      	movs	r3, #16
 8004532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004536:	e012      	b.n	800455e <UART_SetConfig+0x2e6>
 8004538:	efff69f3 	.word	0xefff69f3
 800453c:	40008000 	.word	0x40008000
 8004540:	40013800 	.word	0x40013800
 8004544:	40021000 	.word	0x40021000
 8004548:	40004400 	.word	0x40004400
 800454c:	40004800 	.word	0x40004800
 8004550:	40004c00 	.word	0x40004c00
 8004554:	40005000 	.word	0x40005000
 8004558:	2310      	movs	r3, #16
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a9f      	ldr	r2, [pc, #636]	@ (80047e0 <UART_SetConfig+0x568>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d17a      	bne.n	800465e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004568:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800456c:	2b08      	cmp	r3, #8
 800456e:	d824      	bhi.n	80045ba <UART_SetConfig+0x342>
 8004570:	a201      	add	r2, pc, #4	@ (adr r2, 8004578 <UART_SetConfig+0x300>)
 8004572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004576:	bf00      	nop
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045bb 	.word	0x080045bb
 8004580:	080045a5 	.word	0x080045a5
 8004584:	080045bb 	.word	0x080045bb
 8004588:	080045ab 	.word	0x080045ab
 800458c:	080045bb 	.word	0x080045bb
 8004590:	080045bb 	.word	0x080045bb
 8004594:	080045bb 	.word	0x080045bb
 8004598:	080045b3 	.word	0x080045b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800459c:	f7fe f848 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 80045a0:	61f8      	str	r0, [r7, #28]
        break;
 80045a2:	e010      	b.n	80045c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a4:	4b8f      	ldr	r3, [pc, #572]	@ (80047e4 <UART_SetConfig+0x56c>)
 80045a6:	61fb      	str	r3, [r7, #28]
        break;
 80045a8:	e00d      	b.n	80045c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045aa:	f7fd ffa9 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80045ae:	61f8      	str	r0, [r7, #28]
        break;
 80045b0:	e009      	b.n	80045c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b6:	61fb      	str	r3, [r7, #28]
        break;
 80045b8:	e005      	b.n	80045c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 80fb 	beq.w	80047c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	4413      	add	r3, r2
 80045d8:	69fa      	ldr	r2, [r7, #28]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d305      	bcc.n	80045ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045e4:	69fa      	ldr	r2, [r7, #28]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d903      	bls.n	80045f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045f0:	e0e8      	b.n	80047c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2200      	movs	r2, #0
 80045f6:	461c      	mov	r4, r3
 80045f8:	4615      	mov	r5, r2
 80045fa:	f04f 0200 	mov.w	r2, #0
 80045fe:	f04f 0300 	mov.w	r3, #0
 8004602:	022b      	lsls	r3, r5, #8
 8004604:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004608:	0222      	lsls	r2, r4, #8
 800460a:	68f9      	ldr	r1, [r7, #12]
 800460c:	6849      	ldr	r1, [r1, #4]
 800460e:	0849      	lsrs	r1, r1, #1
 8004610:	2000      	movs	r0, #0
 8004612:	4688      	mov	r8, r1
 8004614:	4681      	mov	r9, r0
 8004616:	eb12 0a08 	adds.w	sl, r2, r8
 800461a:	eb43 0b09 	adc.w	fp, r3, r9
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	e9d7 2300 	ldrd	r2, r3, [r7]
 800462c:	4650      	mov	r0, sl
 800462e:	4659      	mov	r1, fp
 8004630:	f7fb fe36 	bl	80002a0 <__aeabi_uldivmod>
 8004634:	4602      	mov	r2, r0
 8004636:	460b      	mov	r3, r1
 8004638:	4613      	mov	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004642:	d308      	bcc.n	8004656 <UART_SetConfig+0x3de>
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800464a:	d204      	bcs.n	8004656 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	60da      	str	r2, [r3, #12]
 8004654:	e0b6      	b.n	80047c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800465c:	e0b2      	b.n	80047c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004666:	d15e      	bne.n	8004726 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004668:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800466c:	2b08      	cmp	r3, #8
 800466e:	d828      	bhi.n	80046c2 <UART_SetConfig+0x44a>
 8004670:	a201      	add	r2, pc, #4	@ (adr r2, 8004678 <UART_SetConfig+0x400>)
 8004672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004676:	bf00      	nop
 8004678:	0800469d 	.word	0x0800469d
 800467c:	080046a5 	.word	0x080046a5
 8004680:	080046ad 	.word	0x080046ad
 8004684:	080046c3 	.word	0x080046c3
 8004688:	080046b3 	.word	0x080046b3
 800468c:	080046c3 	.word	0x080046c3
 8004690:	080046c3 	.word	0x080046c3
 8004694:	080046c3 	.word	0x080046c3
 8004698:	080046bb 	.word	0x080046bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800469c:	f7fd ffc8 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 80046a0:	61f8      	str	r0, [r7, #28]
        break;
 80046a2:	e014      	b.n	80046ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046a4:	f7fd ffda 	bl	800265c <HAL_RCC_GetPCLK2Freq>
 80046a8:	61f8      	str	r0, [r7, #28]
        break;
 80046aa:	e010      	b.n	80046ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ac:	4b4d      	ldr	r3, [pc, #308]	@ (80047e4 <UART_SetConfig+0x56c>)
 80046ae:	61fb      	str	r3, [r7, #28]
        break;
 80046b0:	e00d      	b.n	80046ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046b2:	f7fd ff25 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80046b6:	61f8      	str	r0, [r7, #28]
        break;
 80046b8:	e009      	b.n	80046ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046be:	61fb      	str	r3, [r7, #28]
        break;
 80046c0:	e005      	b.n	80046ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d077      	beq.n	80047c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	005a      	lsls	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	441a      	add	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	2b0f      	cmp	r3, #15
 80046ee:	d916      	bls.n	800471e <UART_SetConfig+0x4a6>
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046f6:	d212      	bcs.n	800471e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	f023 030f 	bic.w	r3, r3, #15
 8004700:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	b29b      	uxth	r3, r3
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	b29a      	uxth	r2, r3
 800470e:	8afb      	ldrh	r3, [r7, #22]
 8004710:	4313      	orrs	r3, r2
 8004712:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	8afa      	ldrh	r2, [r7, #22]
 800471a:	60da      	str	r2, [r3, #12]
 800471c:	e052      	b.n	80047c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004724:	e04e      	b.n	80047c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004726:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800472a:	2b08      	cmp	r3, #8
 800472c:	d827      	bhi.n	800477e <UART_SetConfig+0x506>
 800472e:	a201      	add	r2, pc, #4	@ (adr r2, 8004734 <UART_SetConfig+0x4bc>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004759 	.word	0x08004759
 8004738:	08004761 	.word	0x08004761
 800473c:	08004769 	.word	0x08004769
 8004740:	0800477f 	.word	0x0800477f
 8004744:	0800476f 	.word	0x0800476f
 8004748:	0800477f 	.word	0x0800477f
 800474c:	0800477f 	.word	0x0800477f
 8004750:	0800477f 	.word	0x0800477f
 8004754:	08004777 	.word	0x08004777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004758:	f7fd ff6a 	bl	8002630 <HAL_RCC_GetPCLK1Freq>
 800475c:	61f8      	str	r0, [r7, #28]
        break;
 800475e:	e014      	b.n	800478a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004760:	f7fd ff7c 	bl	800265c <HAL_RCC_GetPCLK2Freq>
 8004764:	61f8      	str	r0, [r7, #28]
        break;
 8004766:	e010      	b.n	800478a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004768:	4b1e      	ldr	r3, [pc, #120]	@ (80047e4 <UART_SetConfig+0x56c>)
 800476a:	61fb      	str	r3, [r7, #28]
        break;
 800476c:	e00d      	b.n	800478a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800476e:	f7fd fec7 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8004772:	61f8      	str	r0, [r7, #28]
        break;
 8004774:	e009      	b.n	800478a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800477a:	61fb      	str	r3, [r7, #28]
        break;
 800477c:	e005      	b.n	800478a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004788:	bf00      	nop
    }

    if (pclk != 0U)
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d019      	beq.n	80047c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	085a      	lsrs	r2, r3, #1
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	441a      	add	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b0f      	cmp	r3, #15
 80047a8:	d909      	bls.n	80047be <UART_SetConfig+0x546>
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047b0:	d205      	bcs.n	80047be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e002      	b.n	80047c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3728      	adds	r7, #40	@ 0x28
 80047d8:	46bd      	mov	sp, r7
 80047da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047de:	bf00      	nop
 80047e0:	40008000 	.word	0x40008000
 80047e4:	00f42400 	.word	0x00f42400

080047e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	f003 0310 	and.w	r3, r3, #16
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01a      	beq.n	80048fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	430a      	orrs	r2, r1
 80048dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048e6:	d10a      	bne.n	80048fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	430a      	orrs	r2, r1
 80048fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	605a      	str	r2, [r3, #4]
  }
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b098      	sub	sp, #96	@ 0x60
 8004930:	af02      	add	r7, sp, #8
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800493c:	f7fc fd1e 	bl	800137c <HAL_GetTick>
 8004940:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b08      	cmp	r3, #8
 800494e:	d12e      	bne.n	80049ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004950:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004958:	2200      	movs	r2, #0
 800495a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f88c 	bl	8004a7c <UART_WaitOnFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d021      	beq.n	80049ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004972:	e853 3f00 	ldrex	r3, [r3]
 8004976:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800497e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	461a      	mov	r2, r3
 8004986:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004988:	647b      	str	r3, [r7, #68]	@ 0x44
 800498a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800498c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800498e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004990:	e841 2300 	strex	r3, r2, [r1]
 8004994:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004998:	2b00      	cmp	r3, #0
 800499a:	d1e6      	bne.n	800496a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2220      	movs	r2, #32
 80049a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e062      	b.n	8004a74 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0304 	and.w	r3, r3, #4
 80049b8:	2b04      	cmp	r3, #4
 80049ba:	d149      	bne.n	8004a50 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049c4:	2200      	movs	r2, #0
 80049c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f856 	bl	8004a7c <UART_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d03c      	beq.n	8004a50 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	623b      	str	r3, [r7, #32]
   return(result);
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e6      	bne.n	80049d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	3308      	adds	r3, #8
 8004a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a28:	61fa      	str	r2, [r7, #28]
 8004a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	69b9      	ldr	r1, [r7, #24]
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	617b      	str	r3, [r7, #20]
   return(result);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e5      	bne.n	8004a08 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e011      	b.n	8004a74 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3758      	adds	r7, #88	@ 0x58
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a8c:	e04f      	b.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a94:	d04b      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a96:	f7fc fc71 	bl	800137c <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d302      	bcc.n	8004aac <UART_WaitOnFlagUntilTimeout+0x30>
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e04e      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0304 	and.w	r3, r3, #4
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d037      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b80      	cmp	r3, #128	@ 0x80
 8004ac2:	d034      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b40      	cmp	r3, #64	@ 0x40
 8004ac8:	d031      	beq.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	d110      	bne.n	8004afa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2208      	movs	r2, #8
 8004ade:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 f8ff 	bl	8004ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2208      	movs	r2, #8
 8004aea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e029      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b08:	d111      	bne.n	8004b2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f8e5 	bl	8004ce4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e00f      	b.n	8004b4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	4013      	ands	r3, r2
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	bf0c      	ite	eq
 8004b3e:	2301      	moveq	r3, #1
 8004b40:	2300      	movne	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	461a      	mov	r2, r3
 8004b46:	79fb      	ldrb	r3, [r7, #7]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d0a0      	beq.n	8004a8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b097      	sub	sp, #92	@ 0x5c
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	4613      	mov	r3, r2
 8004b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	88fa      	ldrh	r2, [r7, #6]
 8004b70:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	88fa      	ldrh	r2, [r7, #6]
 8004b78:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b8a:	d10e      	bne.n	8004baa <UART_Start_Receive_IT+0x52>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <UART_Start_Receive_IT+0x48>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004b9a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b9e:	e02d      	b.n	8004bfc <UART_Start_Receive_IT+0xa4>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	22ff      	movs	r2, #255	@ 0xff
 8004ba4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004ba8:	e028      	b.n	8004bfc <UART_Start_Receive_IT+0xa4>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10d      	bne.n	8004bce <UART_Start_Receive_IT+0x76>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d104      	bne.n	8004bc4 <UART_Start_Receive_IT+0x6c>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	22ff      	movs	r2, #255	@ 0xff
 8004bbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004bc2:	e01b      	b.n	8004bfc <UART_Start_Receive_IT+0xa4>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	227f      	movs	r2, #127	@ 0x7f
 8004bc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004bcc:	e016      	b.n	8004bfc <UART_Start_Receive_IT+0xa4>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bd6:	d10d      	bne.n	8004bf4 <UART_Start_Receive_IT+0x9c>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d104      	bne.n	8004bea <UART_Start_Receive_IT+0x92>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	227f      	movs	r2, #127	@ 0x7f
 8004be4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004be8:	e008      	b.n	8004bfc <UART_Start_Receive_IT+0xa4>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	223f      	movs	r2, #63	@ 0x3f
 8004bee:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004bf2:	e003      	b.n	8004bfc <UART_Start_Receive_IT+0xa4>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2222      	movs	r2, #34	@ 0x22
 8004c08:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3308      	adds	r3, #8
 8004c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c16:	e853 3f00 	ldrex	r3, [r3]
 8004c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c1e:	f043 0301 	orr.w	r3, r3, #1
 8004c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	3308      	adds	r3, #8
 8004c2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004c2c:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004c2e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004c32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c34:	e841 2300 	strex	r3, r2, [r1]
 8004c38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d1e5      	bne.n	8004c0c <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c48:	d107      	bne.n	8004c5a <UART_Start_Receive_IT+0x102>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d103      	bne.n	8004c5a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	4a21      	ldr	r2, [pc, #132]	@ (8004cdc <UART_Start_Receive_IT+0x184>)
 8004c56:	669a      	str	r2, [r3, #104]	@ 0x68
 8004c58:	e002      	b.n	8004c60 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4a20      	ldr	r2, [pc, #128]	@ (8004ce0 <UART_Start_Receive_IT+0x188>)
 8004c5e:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d019      	beq.n	8004c9c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	461a      	mov	r2, r3
 8004c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c86:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c88:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e6      	bne.n	8004c68 <UART_Start_Receive_IT+0x110>
 8004c9a:	e018      	b.n	8004cce <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	613b      	str	r3, [r7, #16]
   return(result);
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	f043 0320 	orr.w	r3, r3, #32
 8004cb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cba:	623b      	str	r3, [r7, #32]
 8004cbc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	69f9      	ldr	r1, [r7, #28]
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e6      	bne.n	8004c9c <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	375c      	adds	r7, #92	@ 0x5c
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	08004fe9 	.word	0x08004fe9
 8004ce0:	08004e2d 	.word	0x08004e2d

08004ce4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b095      	sub	sp, #84	@ 0x54
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d12:	e841 2300 	strex	r3, r2, [r1]
 8004d16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1e6      	bne.n	8004cec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	3308      	adds	r3, #8
 8004d24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	e853 3f00 	ldrex	r3, [r3]
 8004d2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	f023 0301 	bic.w	r3, r3, #1
 8004d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3308      	adds	r3, #8
 8004d3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d46:	e841 2300 	strex	r3, r2, [r1]
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1e5      	bne.n	8004d1e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d118      	bne.n	8004d8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f023 0310 	bic.w	r3, r3, #16
 8004d6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6979      	ldr	r1, [r7, #20]
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	613b      	str	r3, [r7, #16]
   return(result);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004da0:	bf00      	nop
 8004da2:	3754      	adds	r7, #84	@ 0x54
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f7ff fa3e 	bl	800424c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd0:	bf00      	nop
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b088      	sub	sp, #32
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df4:	61fb      	str	r3, [r7, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e6      	bne.n	8004de0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fa0a 	bl	8004238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e24:	bf00      	nop
 8004e26:	3720      	adds	r7, #32
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b09c      	sub	sp, #112	@ 0x70
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004e3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e44:	2b22      	cmp	r3, #34	@ 0x22
 8004e46:	f040 80be 	bne.w	8004fc6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004e50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e58:	b2d9      	uxtb	r1, r3
 8004e5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e64:	400a      	ands	r2, r1
 8004e66:	b2d2      	uxtb	r2, r2
 8004e68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f040 80a3 	bne.w	8004fda <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004eb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004eb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ec0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e6      	bne.n	8004e94 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ee6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ee8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a34      	ldr	r2, [pc, #208]	@ (8004fe4 <UART_RxISR_8BIT+0x1b8>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d01f      	beq.n	8004f58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	623b      	str	r3, [r7, #32]
   return(result);
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e6      	bne.n	8004f26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d12e      	bne.n	8004fbe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	e853 3f00 	ldrex	r3, [r3]
 8004f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0310 	bic.w	r3, r3, #16
 8004f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f84:	61fb      	str	r3, [r7, #28]
 8004f86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f88:	69b9      	ldr	r1, [r7, #24]
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	e841 2300 	strex	r3, r2, [r1]
 8004f90:	617b      	str	r3, [r7, #20]
   return(result);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1e6      	bne.n	8004f66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d103      	bne.n	8004fae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	2210      	movs	r2, #16
 8004fac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff f952 	bl	8004260 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fbc:	e00d      	b.n	8004fda <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f7fb fbb0 	bl	8000724 <HAL_UART_RxCpltCallback>
}
 8004fc4:	e009      	b.n	8004fda <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	8b1b      	ldrh	r3, [r3, #24]
 8004fcc:	b29a      	uxth	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0208 	orr.w	r2, r2, #8
 8004fd6:	b292      	uxth	r2, r2
 8004fd8:	831a      	strh	r2, [r3, #24]
}
 8004fda:	bf00      	nop
 8004fdc:	3770      	adds	r7, #112	@ 0x70
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40008000 	.word	0x40008000

08004fe8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b09c      	sub	sp, #112	@ 0x70
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ff6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005000:	2b22      	cmp	r3, #34	@ 0x22
 8005002:	f040 80be 	bne.w	8005182 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800500c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005014:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005016:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800501a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800501e:	4013      	ands	r3, r2
 8005020:	b29a      	uxth	r2, r3
 8005022:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005024:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502a:	1c9a      	adds	r2, r3, #2
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005036:	b29b      	uxth	r3, r3
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	f040 80a3 	bne.w	8005196 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800505e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005064:	667b      	str	r3, [r7, #100]	@ 0x64
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	461a      	mov	r2, r3
 800506c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800506e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005070:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005072:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005074:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005076:	e841 2300 	strex	r3, r2, [r1]
 800507a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800507c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1e6      	bne.n	8005050 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800508c:	e853 3f00 	ldrex	r3, [r3]
 8005090:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	663b      	str	r3, [r7, #96]	@ 0x60
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80050a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80050a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e5      	bne.n	8005082 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a34      	ldr	r2, [pc, #208]	@ (80051a0 <UART_RxISR_16BIT+0x1b8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d01f      	beq.n	8005114 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d018      	beq.n	8005114 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005100:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005102:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005106:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e6      	bne.n	80050e2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005118:	2b01      	cmp	r3, #1
 800511a:	d12e      	bne.n	800517a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	f023 0310 	bic.w	r3, r3, #16
 8005136:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6979      	ldr	r1, [r7, #20]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	613b      	str	r3, [r7, #16]
   return(result);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	69db      	ldr	r3, [r3, #28]
 800515a:	f003 0310 	and.w	r3, r3, #16
 800515e:	2b10      	cmp	r3, #16
 8005160:	d103      	bne.n	800516a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2210      	movs	r2, #16
 8005168:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff f874 	bl	8004260 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005178:	e00d      	b.n	8005196 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb fad2 	bl	8000724 <HAL_UART_RxCpltCallback>
}
 8005180:	e009      	b.n	8005196 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	8b1b      	ldrh	r3, [r3, #24]
 8005188:	b29a      	uxth	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0208 	orr.w	r2, r2, #8
 8005192:	b292      	uxth	r2, r2
 8005194:	831a      	strh	r2, [r3, #24]
}
 8005196:	bf00      	nop
 8005198:	3770      	adds	r7, #112	@ 0x70
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	40008000 	.word	0x40008000

080051a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80051c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ca:	2b84      	cmp	r3, #132	@ 0x84
 80051cc:	d005      	beq.n	80051da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80051ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4413      	add	r3, r2
 80051d6:	3303      	adds	r3, #3
 80051d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80051ec:	f000 fdca 	bl	8005d84 <vTaskStartScheduler>
  
  return osOK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80051f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051f8:	b089      	sub	sp, #36	@ 0x24
 80051fa:	af04      	add	r7, sp, #16
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d020      	beq.n	800524a <osThreadCreate+0x54>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01c      	beq.n	800524a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685c      	ldr	r4, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	691e      	ldr	r6, [r3, #16]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff ffc8 	bl	80051b8 <makeFreeRtosPriority>
 8005228:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005232:	9202      	str	r2, [sp, #8]
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	9100      	str	r1, [sp, #0]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	4632      	mov	r2, r6
 800523c:	4629      	mov	r1, r5
 800523e:	4620      	mov	r0, r4
 8005240:	f000 fbd2 	bl	80059e8 <xTaskCreateStatic>
 8005244:	4603      	mov	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
 8005248:	e01c      	b.n	8005284 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	685c      	ldr	r4, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005256:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800525e:	4618      	mov	r0, r3
 8005260:	f7ff ffaa 	bl	80051b8 <makeFreeRtosPriority>
 8005264:	4602      	mov	r2, r0
 8005266:	f107 030c 	add.w	r3, r7, #12
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	9200      	str	r2, [sp, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	4632      	mov	r2, r6
 8005272:	4629      	mov	r1, r5
 8005274:	4620      	mov	r0, r4
 8005276:	f000 fc17 	bl	8005aa8 <xTaskCreate>
 800527a:	4603      	mov	r3, r0
 800527c:	2b01      	cmp	r3, #1
 800527e:	d001      	beq.n	8005284 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	e000      	b.n	8005286 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005284:	68fb      	ldr	r3, [r7, #12]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800528e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <osDelay+0x16>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	e000      	b.n	80052a6 <osDelay+0x18>
 80052a4:	2301      	movs	r3, #1
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 fd36 	bl	8005d18 <vTaskDelay>
  
  return osOK;
 80052ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f103 0208 	add.w	r2, r3, #8
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295
 80052ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f103 0208 	add.w	r2, r3, #8
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f103 0208 	add.w	r2, r3, #8
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005310:	b480      	push	{r7}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]
}
 800534c:	bf00      	nop
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536e:	d103      	bne.n	8005378 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e00c      	b.n	8005392 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	3308      	adds	r3, #8
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e002      	b.n	8005386 <vListInsert+0x2e>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	d2f6      	bcs.n	8005380 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	601a      	str	r2, [r3, #0]
}
 80053be:	bf00      	nop
 80053c0:	3714      	adds	r7, #20
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr

080053ca <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80053ca:	b480      	push	{r7}
 80053cc:	b085      	sub	sp, #20
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6892      	ldr	r2, [r2, #8]
 80053e0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6852      	ldr	r2, [r2, #4]
 80053ea:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d103      	bne.n	80053fe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	1e5a      	subs	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
	...

08005420 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10b      	bne.n	800544c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800544c:	f001 fb74 	bl	8006b38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005458:	68f9      	ldr	r1, [r7, #12]
 800545a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	441a      	add	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547c:	3b01      	subs	r3, #1
 800547e:	68f9      	ldr	r1, [r7, #12]
 8005480:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005482:	fb01 f303 	mul.w	r3, r1, r3
 8005486:	441a      	add	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	22ff      	movs	r2, #255	@ 0xff
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	22ff      	movs	r2, #255	@ 0xff
 8005498:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d114      	bne.n	80054cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d01a      	beq.n	80054e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3310      	adds	r3, #16
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 feb2 	bl	8006218 <xTaskRemoveFromEventList>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d012      	beq.n	80054e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <xQueueGenericReset+0xd0>)
 80054bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	e009      	b.n	80054e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3310      	adds	r3, #16
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7ff fef0 	bl	80052b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3324      	adds	r3, #36	@ 0x24
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff feeb 	bl	80052b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80054e0:	f001 fb5c 	bl	8006b9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80054e4:	2301      	movs	r3, #1
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	e000ed04 	.word	0xe000ed04

080054f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b08a      	sub	sp, #40	@ 0x28
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	4613      	mov	r3, r2
 8005500:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10b      	bne.n	8005520 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550c:	f383 8811 	msr	BASEPRI, r3
 8005510:	f3bf 8f6f 	isb	sy
 8005514:	f3bf 8f4f 	dsb	sy
 8005518:	613b      	str	r3, [r7, #16]
}
 800551a:	bf00      	nop
 800551c:	bf00      	nop
 800551e:	e7fd      	b.n	800551c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	3348      	adds	r3, #72	@ 0x48
 800552e:	4618      	mov	r0, r3
 8005530:	f001 fc24 	bl	8006d7c <pvPortMalloc>
 8005534:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d011      	beq.n	8005560 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	3348      	adds	r3, #72	@ 0x48
 8005544:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800554e:	79fa      	ldrb	r2, [r7, #7]
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f805 	bl	800556a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005560:	69bb      	ldr	r3, [r7, #24]
	}
 8005562:	4618      	mov	r0, r3
 8005564:	3720      	adds	r7, #32
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e002      	b.n	800558c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005598:	2101      	movs	r1, #1
 800559a:	69b8      	ldr	r0, [r7, #24]
 800559c:	f7ff ff40 	bl	8005420 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08e      	sub	sp, #56	@ 0x38
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80055b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80055bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c0:	f383 8811 	msr	BASEPRI, r3
 80055c4:	f3bf 8f6f 	isb	sy
 80055c8:	f3bf 8f4f 	dsb	sy
 80055cc:	623b      	str	r3, [r7, #32]
}
 80055ce:	bf00      	nop
 80055d0:	bf00      	nop
 80055d2:	e7fd      	b.n	80055d0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00b      	beq.n	80055f4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61fb      	str	r3, [r7, #28]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80055f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d103      	bne.n	8005604 <xQueueGiveFromISR+0x5c>
 80055fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <xQueueGiveFromISR+0x60>
 8005604:	2301      	movs	r3, #1
 8005606:	e000      	b.n	800560a <xQueueGiveFromISR+0x62>
 8005608:	2300      	movs	r3, #0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	61bb      	str	r3, [r7, #24]
}
 8005620:	bf00      	nop
 8005622:	bf00      	nop
 8005624:	e7fd      	b.n	8005622 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005626:	f001 fb67 	bl	8006cf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800562a:	f3ef 8211 	mrs	r2, BASEPRI
 800562e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005632:	f383 8811 	msr	BASEPRI, r3
 8005636:	f3bf 8f6f 	isb	sy
 800563a:	f3bf 8f4f 	dsb	sy
 800563e:	617a      	str	r2, [r7, #20]
 8005640:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005642:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005652:	429a      	cmp	r2, r3
 8005654:	d22b      	bcs.n	80056ae <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800565c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005662:	1c5a      	adds	r2, r3, #1
 8005664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005666:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005668:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800566c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005670:	d112      	bne.n	8005698 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005676:	2b00      	cmp	r3, #0
 8005678:	d016      	beq.n	80056a8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	3324      	adds	r3, #36	@ 0x24
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fdca 	bl	8006218 <xTaskRemoveFromEventList>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00e      	beq.n	80056a8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00b      	beq.n	80056a8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2201      	movs	r2, #1
 8005694:	601a      	str	r2, [r3, #0]
 8005696:	e007      	b.n	80056a8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005698:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800569c:	3301      	adds	r3, #1
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	b25a      	sxtb	r2, r3
 80056a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80056a8:	2301      	movs	r3, #1
 80056aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ac:	e001      	b.n	80056b2 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b4:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3738      	adds	r7, #56	@ 0x38
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	@ 0x38
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80056e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e8:	f383 8811 	msr	BASEPRI, r3
 80056ec:	f3bf 8f6f 	isb	sy
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	623b      	str	r3, [r7, #32]
}
 80056f6:	bf00      	nop
 80056f8:	bf00      	nop
 80056fa:	e7fd      	b.n	80056f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00b      	beq.n	800571c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	61fb      	str	r3, [r7, #28]
}
 8005716:	bf00      	nop
 8005718:	bf00      	nop
 800571a:	e7fd      	b.n	8005718 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800571c:	f000 ff3c 	bl	8006598 <xTaskGetSchedulerState>
 8005720:	4603      	mov	r3, r0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <xQueueSemaphoreTake+0x64>
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <xQueueSemaphoreTake+0x68>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <xQueueSemaphoreTake+0x6a>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10b      	bne.n	800574e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61bb      	str	r3, [r7, #24]
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	e7fd      	b.n	800574a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800574e:	f001 f9f3 	bl	8006b38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	2b00      	cmp	r3, #0
 800575c:	d024      	beq.n	80057a8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800575e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005760:	1e5a      	subs	r2, r3, #1
 8005762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005764:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d104      	bne.n	8005778 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800576e:	f001 f837 	bl	80067e0 <pvTaskIncrementMutexHeldCount>
 8005772:	4602      	mov	r2, r0
 8005774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005776:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577a:	691b      	ldr	r3, [r3, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d00f      	beq.n	80057a0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005782:	3310      	adds	r3, #16
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fd47 	bl	8006218 <xTaskRemoveFromEventList>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d007      	beq.n	80057a0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005790:	4b54      	ldr	r3, [pc, #336]	@ (80058e4 <xQueueSemaphoreTake+0x21c>)
 8005792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005796:	601a      	str	r2, [r3, #0]
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057a0:	f001 f9fc 	bl	8006b9c <vPortExitCritical>
				return pdPASS;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e098      	b.n	80058da <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d112      	bne.n	80057d4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80057ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00b      	beq.n	80057cc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	617b      	str	r3, [r7, #20]
}
 80057c6:	bf00      	nop
 80057c8:	bf00      	nop
 80057ca:	e7fd      	b.n	80057c8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80057cc:	f001 f9e6 	bl	8006b9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057d0:	2300      	movs	r3, #0
 80057d2:	e082      	b.n	80058da <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057da:	f107 030c 	add.w	r3, r7, #12
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fd7e 	bl	80062e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057e8:	f001 f9d8 	bl	8006b9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057ec:	f000 fb2c 	bl	8005e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057f0:	f001 f9a2 	bl	8006b38 <vPortEnterCritical>
 80057f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057fa:	b25b      	sxtb	r3, r3
 80057fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005800:	d103      	bne.n	800580a <xQueueSemaphoreTake+0x142>
 8005802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005804:	2200      	movs	r2, #0
 8005806:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800580a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800580c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005810:	b25b      	sxtb	r3, r3
 8005812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005816:	d103      	bne.n	8005820 <xQueueSemaphoreTake+0x158>
 8005818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005820:	f001 f9bc 	bl	8006b9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005824:	463a      	mov	r2, r7
 8005826:	f107 030c 	add.w	r3, r7, #12
 800582a:	4611      	mov	r1, r2
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fd6d 	bl	800630c <xTaskCheckForTimeOut>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d132      	bne.n	800589e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005838:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800583a:	f000 f8bf 	bl	80059bc <prvIsQueueEmpty>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d026      	beq.n	8005892 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d109      	bne.n	8005860 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800584c:	f001 f974 	bl	8006b38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 febd 	bl	80065d4 <xTaskPriorityInherit>
 800585a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800585c:	f001 f99e 	bl	8006b9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005862:	3324      	adds	r3, #36	@ 0x24
 8005864:	683a      	ldr	r2, [r7, #0]
 8005866:	4611      	mov	r1, r2
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fcaf 	bl	80061cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800586e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005870:	f000 f852 	bl	8005918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005874:	f000 faf6 	bl	8005e64 <xTaskResumeAll>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	f47f af67 	bne.w	800574e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005880:	4b18      	ldr	r3, [pc, #96]	@ (80058e4 <xQueueSemaphoreTake+0x21c>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	e75d      	b.n	800574e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005892:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005894:	f000 f840 	bl	8005918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005898:	f000 fae4 	bl	8005e64 <xTaskResumeAll>
 800589c:	e757      	b.n	800574e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800589e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058a0:	f000 f83a 	bl	8005918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058a4:	f000 fade 	bl	8005e64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058aa:	f000 f887 	bl	80059bc <prvIsQueueEmpty>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	f43f af4c 	beq.w	800574e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80058b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00d      	beq.n	80058d8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80058bc:	f001 f93c 	bl	8006b38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80058c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80058c2:	f000 f811 	bl	80058e8 <prvGetDisinheritPriorityAfterTimeout>
 80058c6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80058c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fef6 	bl	80066c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80058d4:	f001 f962 	bl	8006b9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3738      	adds	r7, #56	@ 0x38
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d006      	beq.n	8005906 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f1c3 0307 	rsb	r3, r3, #7
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	e001      	b.n	800590a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800590a:	68fb      	ldr	r3, [r7, #12]
	}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005920:	f001 f90a 	bl	8006b38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800592a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800592c:	e011      	b.n	8005952 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	d012      	beq.n	800595c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3324      	adds	r3, #36	@ 0x24
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fc6c 	bl	8006218 <xTaskRemoveFromEventList>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005946:	f000 fd45 	bl	80063d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	3b01      	subs	r3, #1
 800594e:	b2db      	uxtb	r3, r3
 8005950:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005956:	2b00      	cmp	r3, #0
 8005958:	dce9      	bgt.n	800592e <prvUnlockQueue+0x16>
 800595a:	e000      	b.n	800595e <prvUnlockQueue+0x46>
					break;
 800595c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	22ff      	movs	r2, #255	@ 0xff
 8005962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005966:	f001 f919 	bl	8006b9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800596a:	f001 f8e5 	bl	8006b38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005974:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005976:	e011      	b.n	800599c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3310      	adds	r3, #16
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fc47 	bl	8006218 <xTaskRemoveFromEventList>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005990:	f000 fd20 	bl	80063d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	3b01      	subs	r3, #1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800599c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	dce9      	bgt.n	8005978 <prvUnlockQueue+0x60>
 80059a4:	e000      	b.n	80059a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	22ff      	movs	r2, #255	@ 0xff
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80059b0:	f001 f8f4 	bl	8006b9c <vPortExitCritical>
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059c4:	f001 f8b8 	bl	8006b38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059d0:	2301      	movs	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e001      	b.n	80059da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059da:	f001 f8df 	bl	8006b9c <vPortExitCritical>

	return xReturn;
 80059de:	68fb      	ldr	r3, [r7, #12]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08e      	sub	sp, #56	@ 0x38
 80059ec:	af04      	add	r7, sp, #16
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
 80059f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10b      	bne.n	8005a14 <xTaskCreateStatic+0x2c>
	__asm volatile
 80059fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	623b      	str	r3, [r7, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	bf00      	nop
 8005a12:	e7fd      	b.n	8005a10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d10b      	bne.n	8005a32 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1e:	f383 8811 	msr	BASEPRI, r3
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	f3bf 8f4f 	dsb	sy
 8005a2a:	61fb      	str	r3, [r7, #28]
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	e7fd      	b.n	8005a2e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a32:	2354      	movs	r3, #84	@ 0x54
 8005a34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b54      	cmp	r3, #84	@ 0x54
 8005a3a:	d00b      	beq.n	8005a54 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	61bb      	str	r3, [r7, #24]
}
 8005a4e:	bf00      	nop
 8005a50:	bf00      	nop
 8005a52:	e7fd      	b.n	8005a50 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a54:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01e      	beq.n	8005a9a <xTaskCreateStatic+0xb2>
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d01b      	beq.n	8005a9a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a6a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	2202      	movs	r2, #2
 8005a70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a74:	2300      	movs	r3, #0
 8005a76:	9303      	str	r3, [sp, #12]
 8005a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7a:	9302      	str	r3, [sp, #8]
 8005a7c:	f107 0314 	add.w	r3, r7, #20
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	f000 f850 	bl	8005b32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a94:	f000 f8d6 	bl	8005c44 <prvAddNewTaskToReadyList>
 8005a98:	e001      	b.n	8005a9e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a9e:	697b      	ldr	r3, [r7, #20]
	}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3728      	adds	r7, #40	@ 0x28
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08c      	sub	sp, #48	@ 0x30
 8005aac:	af04      	add	r7, sp, #16
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	603b      	str	r3, [r7, #0]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4618      	mov	r0, r3
 8005abe:	f001 f95d 	bl	8006d7c <pvPortMalloc>
 8005ac2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00e      	beq.n	8005ae8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005aca:	2054      	movs	r0, #84	@ 0x54
 8005acc:	f001 f956 	bl	8006d7c <pvPortMalloc>
 8005ad0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d003      	beq.n	8005ae0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ade:	e005      	b.n	8005aec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ae0:	6978      	ldr	r0, [r7, #20]
 8005ae2:	f001 fa19 	bl	8006f18 <vPortFree>
 8005ae6:	e001      	b.n	8005aec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d017      	beq.n	8005b22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005afa:	88fa      	ldrh	r2, [r7, #6]
 8005afc:	2300      	movs	r3, #0
 8005afe:	9303      	str	r3, [sp, #12]
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	9302      	str	r3, [sp, #8]
 8005b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	68b9      	ldr	r1, [r7, #8]
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f000 f80e 	bl	8005b32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b16:	69f8      	ldr	r0, [r7, #28]
 8005b18:	f000 f894 	bl	8005c44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	e002      	b.n	8005b28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b22:	f04f 33ff 	mov.w	r3, #4294967295
 8005b26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b28:	69bb      	ldr	r3, [r7, #24]
	}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3720      	adds	r7, #32
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b088      	sub	sp, #32
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	607a      	str	r2, [r7, #4]
 8005b3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	f023 0307 	bic.w	r3, r3, #7
 8005b58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	f003 0307 	and.w	r3, r3, #7
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	617b      	str	r3, [r7, #20]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01f      	beq.n	8005bc2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b82:	2300      	movs	r3, #0
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	e012      	b.n	8005bae <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	7819      	ldrb	r1, [r3, #0]
 8005b90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	4413      	add	r3, r2
 8005b96:	3334      	adds	r3, #52	@ 0x34
 8005b98:	460a      	mov	r2, r1
 8005b9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d006      	beq.n	8005bb6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	3301      	adds	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	2b0f      	cmp	r3, #15
 8005bb2:	d9e9      	bls.n	8005b88 <prvInitialiseNewTask+0x56>
 8005bb4:	e000      	b.n	8005bb8 <prvInitialiseNewTask+0x86>
			{
				break;
 8005bb6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bc0:	e003      	b.n	8005bca <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d901      	bls.n	8005bd4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bd0:	2306      	movs	r3, #6
 8005bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bde:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	2200      	movs	r2, #0
 8005be4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be8:	3304      	adds	r3, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff fb83 	bl	80052f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf2:	3318      	adds	r3, #24
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff fb7e 	bl	80052f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	f1c3 0207 	rsb	r2, r3, #7
 8005c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c0e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c12:	2200      	movs	r2, #0
 8005c14:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	69b8      	ldr	r0, [r7, #24]
 8005c24:	f000 fe56 	bl	80068d4 <pxPortInitialiseStack>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c3a:	bf00      	nop
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c4c:	f000 ff74 	bl	8006b38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c50:	4b2a      	ldr	r3, [pc, #168]	@ (8005cfc <prvAddNewTaskToReadyList+0xb8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4a29      	ldr	r2, [pc, #164]	@ (8005cfc <prvAddNewTaskToReadyList+0xb8>)
 8005c58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c5a:	4b29      	ldr	r3, [pc, #164]	@ (8005d00 <prvAddNewTaskToReadyList+0xbc>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d109      	bne.n	8005c76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c62:	4a27      	ldr	r2, [pc, #156]	@ (8005d00 <prvAddNewTaskToReadyList+0xbc>)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c68:	4b24      	ldr	r3, [pc, #144]	@ (8005cfc <prvAddNewTaskToReadyList+0xb8>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d110      	bne.n	8005c92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c70:	f000 fbd4 	bl	800641c <prvInitialiseTaskLists>
 8005c74:	e00d      	b.n	8005c92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c76:	4b23      	ldr	r3, [pc, #140]	@ (8005d04 <prvAddNewTaskToReadyList+0xc0>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c7e:	4b20      	ldr	r3, [pc, #128]	@ (8005d00 <prvAddNewTaskToReadyList+0xbc>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d802      	bhi.n	8005c92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c8c:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <prvAddNewTaskToReadyList+0xbc>)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c92:	4b1d      	ldr	r3, [pc, #116]	@ (8005d08 <prvAddNewTaskToReadyList+0xc4>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	4a1b      	ldr	r2, [pc, #108]	@ (8005d08 <prvAddNewTaskToReadyList+0xc4>)
 8005c9a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	4b19      	ldr	r3, [pc, #100]	@ (8005d0c <prvAddNewTaskToReadyList+0xc8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	4a18      	ldr	r2, [pc, #96]	@ (8005d0c <prvAddNewTaskToReadyList+0xc8>)
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	4413      	add	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4a15      	ldr	r2, [pc, #84]	@ (8005d10 <prvAddNewTaskToReadyList+0xcc>)
 8005cbc:	441a      	add	r2, r3
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7ff fb23 	bl	8005310 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cca:	f000 ff67 	bl	8006b9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cce:	4b0d      	ldr	r3, [pc, #52]	@ (8005d04 <prvAddNewTaskToReadyList+0xc0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d00e      	beq.n	8005cf4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8005d00 <prvAddNewTaskToReadyList+0xbc>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d207      	bcs.n	8005cf4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8005d14 <prvAddNewTaskToReadyList+0xd0>)
 8005ce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cea:	601a      	str	r2, [r3, #0]
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cf4:	bf00      	nop
 8005cf6:	3708      	adds	r7, #8
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	200006a4 	.word	0x200006a4
 8005d00:	200005a4 	.word	0x200005a4
 8005d04:	200006b0 	.word	0x200006b0
 8005d08:	200006c0 	.word	0x200006c0
 8005d0c:	200006ac 	.word	0x200006ac
 8005d10:	200005a8 	.word	0x200005a8
 8005d14:	e000ed04 	.word	0xe000ed04

08005d18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d20:	2300      	movs	r3, #0
 8005d22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d018      	beq.n	8005d5c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d2a:	4b14      	ldr	r3, [pc, #80]	@ (8005d7c <vTaskDelay+0x64>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00b      	beq.n	8005d4a <vTaskDelay+0x32>
	__asm volatile
 8005d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	60bb      	str	r3, [r7, #8]
}
 8005d44:	bf00      	nop
 8005d46:	bf00      	nop
 8005d48:	e7fd      	b.n	8005d46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d4a:	f000 f87d 	bl	8005e48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d4e:	2100      	movs	r1, #0
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fd59 	bl	8006808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d56:	f000 f885 	bl	8005e64 <xTaskResumeAll>
 8005d5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d107      	bne.n	8005d72 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d62:	4b07      	ldr	r3, [pc, #28]	@ (8005d80 <vTaskDelay+0x68>)
 8005d64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d72:	bf00      	nop
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	200006cc 	.word	0x200006cc
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	@ 0x28
 8005d88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d92:	463a      	mov	r2, r7
 8005d94:	1d39      	adds	r1, r7, #4
 8005d96:	f107 0308 	add.w	r3, r7, #8
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fa fcea 	bl	8000774 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	9202      	str	r2, [sp, #8]
 8005da8:	9301      	str	r3, [sp, #4]
 8005daa:	2300      	movs	r3, #0
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	2300      	movs	r3, #0
 8005db0:	460a      	mov	r2, r1
 8005db2:	491f      	ldr	r1, [pc, #124]	@ (8005e30 <vTaskStartScheduler+0xac>)
 8005db4:	481f      	ldr	r0, [pc, #124]	@ (8005e34 <vTaskStartScheduler+0xb0>)
 8005db6:	f7ff fe17 	bl	80059e8 <xTaskCreateStatic>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	4a1e      	ldr	r2, [pc, #120]	@ (8005e38 <vTaskStartScheduler+0xb4>)
 8005dbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e38 <vTaskStartScheduler+0xb4>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d002      	beq.n	8005dce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e001      	b.n	8005dd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d116      	bne.n	8005e06 <vTaskStartScheduler+0x82>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	613b      	str	r3, [r7, #16]
}
 8005dea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dec:	4b13      	ldr	r3, [pc, #76]	@ (8005e3c <vTaskStartScheduler+0xb8>)
 8005dee:	f04f 32ff 	mov.w	r2, #4294967295
 8005df2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005df4:	4b12      	ldr	r3, [pc, #72]	@ (8005e40 <vTaskStartScheduler+0xbc>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dfa:	4b12      	ldr	r3, [pc, #72]	@ (8005e44 <vTaskStartScheduler+0xc0>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e00:	f000 fdf6 	bl	80069f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e04:	e00f      	b.n	8005e26 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d10b      	bne.n	8005e26 <vTaskStartScheduler+0xa2>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	60fb      	str	r3, [r7, #12]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <vTaskStartScheduler+0x9e>
}
 8005e26:	bf00      	nop
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	080085e4 	.word	0x080085e4
 8005e34:	080063ed 	.word	0x080063ed
 8005e38:	200006c8 	.word	0x200006c8
 8005e3c:	200006c4 	.word	0x200006c4
 8005e40:	200006b0 	.word	0x200006b0
 8005e44:	200006a8 	.word	0x200006a8

08005e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e4c:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <vTaskSuspendAll+0x18>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	4a03      	ldr	r2, [pc, #12]	@ (8005e60 <vTaskSuspendAll+0x18>)
 8005e54:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e56:	bf00      	nop
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr
 8005e60:	200006cc 	.word	0x200006cc

08005e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e72:	4b42      	ldr	r3, [pc, #264]	@ (8005f7c <xTaskResumeAll+0x118>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <xTaskResumeAll+0x2e>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	603b      	str	r3, [r7, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e92:	f000 fe51 	bl	8006b38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e96:	4b39      	ldr	r3, [pc, #228]	@ (8005f7c <xTaskResumeAll+0x118>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	4a37      	ldr	r2, [pc, #220]	@ (8005f7c <xTaskResumeAll+0x118>)
 8005e9e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea0:	4b36      	ldr	r3, [pc, #216]	@ (8005f7c <xTaskResumeAll+0x118>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d161      	bne.n	8005f6c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ea8:	4b35      	ldr	r3, [pc, #212]	@ (8005f80 <xTaskResumeAll+0x11c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d05d      	beq.n	8005f6c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eb0:	e02e      	b.n	8005f10 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb2:	4b34      	ldr	r3, [pc, #208]	@ (8005f84 <xTaskResumeAll+0x120>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	3318      	adds	r3, #24
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fa83 	bl	80053ca <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fa7e 	bl	80053ca <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	409a      	lsls	r2, r3
 8005ed6:	4b2c      	ldr	r3, [pc, #176]	@ (8005f88 <xTaskResumeAll+0x124>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	4a2a      	ldr	r2, [pc, #168]	@ (8005f88 <xTaskResumeAll+0x124>)
 8005ede:	6013      	str	r3, [r2, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4a27      	ldr	r2, [pc, #156]	@ (8005f8c <xTaskResumeAll+0x128>)
 8005eee:	441a      	add	r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	f7ff fa0a 	bl	8005310 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f00:	4b23      	ldr	r3, [pc, #140]	@ (8005f90 <xTaskResumeAll+0x12c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f0a:	4b22      	ldr	r3, [pc, #136]	@ (8005f94 <xTaskResumeAll+0x130>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f10:	4b1c      	ldr	r3, [pc, #112]	@ (8005f84 <xTaskResumeAll+0x120>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d1cc      	bne.n	8005eb2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f1e:	f000 fb1b 	bl	8006558 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f22:	4b1d      	ldr	r3, [pc, #116]	@ (8005f98 <xTaskResumeAll+0x134>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d010      	beq.n	8005f50 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f2e:	f000 f837 	bl	8005fa0 <xTaskIncrementTick>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d002      	beq.n	8005f3e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f38:	4b16      	ldr	r3, [pc, #88]	@ (8005f94 <xTaskResumeAll+0x130>)
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f1      	bne.n	8005f2e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005f4a:	4b13      	ldr	r3, [pc, #76]	@ (8005f98 <xTaskResumeAll+0x134>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f50:	4b10      	ldr	r3, [pc, #64]	@ (8005f94 <xTaskResumeAll+0x130>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d009      	beq.n	8005f6c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	@ (8005f9c <xTaskResumeAll+0x138>)
 8005f5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f6c:	f000 fe16 	bl	8006b9c <vPortExitCritical>

	return xAlreadyYielded;
 8005f70:	68bb      	ldr	r3, [r7, #8]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200006cc 	.word	0x200006cc
 8005f80:	200006a4 	.word	0x200006a4
 8005f84:	20000664 	.word	0x20000664
 8005f88:	200006ac 	.word	0x200006ac
 8005f8c:	200005a8 	.word	0x200005a8
 8005f90:	200005a4 	.word	0x200005a4
 8005f94:	200006b8 	.word	0x200006b8
 8005f98:	200006b4 	.word	0x200006b4
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005faa:	4b4f      	ldr	r3, [pc, #316]	@ (80060e8 <xTaskIncrementTick+0x148>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f040 808f 	bne.w	80060d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fb4:	4b4d      	ldr	r3, [pc, #308]	@ (80060ec <xTaskIncrementTick+0x14c>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80060ec <xTaskIncrementTick+0x14c>)
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d121      	bne.n	800600c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fc8:	4b49      	ldr	r3, [pc, #292]	@ (80060f0 <xTaskIncrementTick+0x150>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <xTaskIncrementTick+0x4a>
	__asm volatile
 8005fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	603b      	str	r3, [r7, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	bf00      	nop
 8005fe8:	e7fd      	b.n	8005fe6 <xTaskIncrementTick+0x46>
 8005fea:	4b41      	ldr	r3, [pc, #260]	@ (80060f0 <xTaskIncrementTick+0x150>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	60fb      	str	r3, [r7, #12]
 8005ff0:	4b40      	ldr	r3, [pc, #256]	@ (80060f4 <xTaskIncrementTick+0x154>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a3e      	ldr	r2, [pc, #248]	@ (80060f0 <xTaskIncrementTick+0x150>)
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	4a3e      	ldr	r2, [pc, #248]	@ (80060f4 <xTaskIncrementTick+0x154>)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80060f8 <xTaskIncrementTick+0x158>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	4a3c      	ldr	r2, [pc, #240]	@ (80060f8 <xTaskIncrementTick+0x158>)
 8006006:	6013      	str	r3, [r2, #0]
 8006008:	f000 faa6 	bl	8006558 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800600c:	4b3b      	ldr	r3, [pc, #236]	@ (80060fc <xTaskIncrementTick+0x15c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	429a      	cmp	r2, r3
 8006014:	d348      	bcc.n	80060a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006016:	4b36      	ldr	r3, [pc, #216]	@ (80060f0 <xTaskIncrementTick+0x150>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d104      	bne.n	800602a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006020:	4b36      	ldr	r3, [pc, #216]	@ (80060fc <xTaskIncrementTick+0x15c>)
 8006022:	f04f 32ff 	mov.w	r2, #4294967295
 8006026:	601a      	str	r2, [r3, #0]
					break;
 8006028:	e03e      	b.n	80060a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800602a:	4b31      	ldr	r3, [pc, #196]	@ (80060f0 <xTaskIncrementTick+0x150>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	429a      	cmp	r2, r3
 8006040:	d203      	bcs.n	800604a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006042:	4a2e      	ldr	r2, [pc, #184]	@ (80060fc <xTaskIncrementTick+0x15c>)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006048:	e02e      	b.n	80060a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	3304      	adds	r3, #4
 800604e:	4618      	mov	r0, r3
 8006050:	f7ff f9bb 	bl	80053ca <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006058:	2b00      	cmp	r3, #0
 800605a:	d004      	beq.n	8006066 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	3318      	adds	r3, #24
 8006060:	4618      	mov	r0, r3
 8006062:	f7ff f9b2 	bl	80053ca <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	2201      	movs	r2, #1
 800606c:	409a      	lsls	r2, r3
 800606e:	4b24      	ldr	r3, [pc, #144]	@ (8006100 <xTaskIncrementTick+0x160>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4313      	orrs	r3, r2
 8006074:	4a22      	ldr	r2, [pc, #136]	@ (8006100 <xTaskIncrementTick+0x160>)
 8006076:	6013      	str	r3, [r2, #0]
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4a1f      	ldr	r2, [pc, #124]	@ (8006104 <xTaskIncrementTick+0x164>)
 8006086:	441a      	add	r2, r3
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	3304      	adds	r3, #4
 800608c:	4619      	mov	r1, r3
 800608e:	4610      	mov	r0, r2
 8006090:	f7ff f93e 	bl	8005310 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006098:	4b1b      	ldr	r3, [pc, #108]	@ (8006108 <xTaskIncrementTick+0x168>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609e:	429a      	cmp	r2, r3
 80060a0:	d3b9      	bcc.n	8006016 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80060a2:	2301      	movs	r3, #1
 80060a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a6:	e7b6      	b.n	8006016 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060a8:	4b17      	ldr	r3, [pc, #92]	@ (8006108 <xTaskIncrementTick+0x168>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060ae:	4915      	ldr	r1, [pc, #84]	@ (8006104 <xTaskIncrementTick+0x164>)
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	440b      	add	r3, r1
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d901      	bls.n	80060c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80060c0:	2301      	movs	r3, #1
 80060c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060c4:	4b11      	ldr	r3, [pc, #68]	@ (800610c <xTaskIncrementTick+0x16c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d007      	beq.n	80060dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	e004      	b.n	80060dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060d2:	4b0f      	ldr	r3, [pc, #60]	@ (8006110 <xTaskIncrementTick+0x170>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3301      	adds	r3, #1
 80060d8:	4a0d      	ldr	r2, [pc, #52]	@ (8006110 <xTaskIncrementTick+0x170>)
 80060da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060dc:	697b      	ldr	r3, [r7, #20]
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	200006cc 	.word	0x200006cc
 80060ec:	200006a8 	.word	0x200006a8
 80060f0:	2000065c 	.word	0x2000065c
 80060f4:	20000660 	.word	0x20000660
 80060f8:	200006bc 	.word	0x200006bc
 80060fc:	200006c4 	.word	0x200006c4
 8006100:	200006ac 	.word	0x200006ac
 8006104:	200005a8 	.word	0x200005a8
 8006108:	200005a4 	.word	0x200005a4
 800610c:	200006b8 	.word	0x200006b8
 8006110:	200006b4 	.word	0x200006b4

08006114 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800611a:	4b27      	ldr	r3, [pc, #156]	@ (80061b8 <vTaskSwitchContext+0xa4>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006122:	4b26      	ldr	r3, [pc, #152]	@ (80061bc <vTaskSwitchContext+0xa8>)
 8006124:	2201      	movs	r2, #1
 8006126:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006128:	e040      	b.n	80061ac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800612a:	4b24      	ldr	r3, [pc, #144]	@ (80061bc <vTaskSwitchContext+0xa8>)
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006130:	4b23      	ldr	r3, [pc, #140]	@ (80061c0 <vTaskSwitchContext+0xac>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	fab3 f383 	clz	r3, r3
 800613c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800613e:	7afb      	ldrb	r3, [r7, #11]
 8006140:	f1c3 031f 	rsb	r3, r3, #31
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	491f      	ldr	r1, [pc, #124]	@ (80061c4 <vTaskSwitchContext+0xb0>)
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	440b      	add	r3, r1
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <vTaskSwitchContext+0x5e>
	__asm volatile
 800615a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	607b      	str	r3, [r7, #4]
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	e7fd      	b.n	800616e <vTaskSwitchContext+0x5a>
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4613      	mov	r3, r2
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4a11      	ldr	r2, [pc, #68]	@ (80061c4 <vTaskSwitchContext+0xb0>)
 800617e:	4413      	add	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	605a      	str	r2, [r3, #4]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	3308      	adds	r3, #8
 8006194:	429a      	cmp	r2, r3
 8006196:	d104      	bne.n	80061a2 <vTaskSwitchContext+0x8e>
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	605a      	str	r2, [r3, #4]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4a07      	ldr	r2, [pc, #28]	@ (80061c8 <vTaskSwitchContext+0xb4>)
 80061aa:	6013      	str	r3, [r2, #0]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	200006cc 	.word	0x200006cc
 80061bc:	200006b8 	.word	0x200006b8
 80061c0:	200006ac 	.word	0x200006ac
 80061c4:	200005a8 	.word	0x200005a8
 80061c8:	200005a4 	.word	0x200005a4

080061cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	60fb      	str	r3, [r7, #12]
}
 80061ee:	bf00      	nop
 80061f0:	bf00      	nop
 80061f2:	e7fd      	b.n	80061f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061f4:	4b07      	ldr	r3, [pc, #28]	@ (8006214 <vTaskPlaceOnEventList+0x48>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3318      	adds	r3, #24
 80061fa:	4619      	mov	r1, r3
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f7ff f8ab 	bl	8005358 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006202:	2101      	movs	r1, #1
 8006204:	6838      	ldr	r0, [r7, #0]
 8006206:	f000 faff 	bl	8006808 <prvAddCurrentTaskToDelayedList>
}
 800620a:	bf00      	nop
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	200005a4 	.word	0x200005a4

08006218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60fb      	str	r3, [r7, #12]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	3318      	adds	r3, #24
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f8bd 	bl	80053ca <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006250:	4b1d      	ldr	r3, [pc, #116]	@ (80062c8 <xTaskRemoveFromEventList+0xb0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11c      	bne.n	8006292 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	3304      	adds	r3, #4
 800625c:	4618      	mov	r0, r3
 800625e:	f7ff f8b4 	bl	80053ca <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006266:	2201      	movs	r2, #1
 8006268:	409a      	lsls	r2, r3
 800626a:	4b18      	ldr	r3, [pc, #96]	@ (80062cc <xTaskRemoveFromEventList+0xb4>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4313      	orrs	r3, r2
 8006270:	4a16      	ldr	r2, [pc, #88]	@ (80062cc <xTaskRemoveFromEventList+0xb4>)
 8006272:	6013      	str	r3, [r2, #0]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006278:	4613      	mov	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4a13      	ldr	r2, [pc, #76]	@ (80062d0 <xTaskRemoveFromEventList+0xb8>)
 8006282:	441a      	add	r2, r3
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	3304      	adds	r3, #4
 8006288:	4619      	mov	r1, r3
 800628a:	4610      	mov	r0, r2
 800628c:	f7ff f840 	bl	8005310 <vListInsertEnd>
 8006290:	e005      	b.n	800629e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	3318      	adds	r3, #24
 8006296:	4619      	mov	r1, r3
 8006298:	480e      	ldr	r0, [pc, #56]	@ (80062d4 <xTaskRemoveFromEventList+0xbc>)
 800629a:	f7ff f839 	bl	8005310 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <xTaskRemoveFromEventList+0xc0>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d905      	bls.n	80062b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062ac:	2301      	movs	r3, #1
 80062ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062b0:	4b0a      	ldr	r3, [pc, #40]	@ (80062dc <xTaskRemoveFromEventList+0xc4>)
 80062b2:	2201      	movs	r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e001      	b.n	80062bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062bc:	697b      	ldr	r3, [r7, #20]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	200006cc 	.word	0x200006cc
 80062cc:	200006ac 	.word	0x200006ac
 80062d0:	200005a8 	.word	0x200005a8
 80062d4:	20000664 	.word	0x20000664
 80062d8:	200005a4 	.word	0x200005a4
 80062dc:	200006b8 	.word	0x200006b8

080062e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062e8:	4b06      	ldr	r3, [pc, #24]	@ (8006304 <vTaskInternalSetTimeOutState+0x24>)
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062f0:	4b05      	ldr	r3, [pc, #20]	@ (8006308 <vTaskInternalSetTimeOutState+0x28>)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	605a      	str	r2, [r3, #4]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr
 8006304:	200006bc 	.word	0x200006bc
 8006308:	200006a8 	.word	0x200006a8

0800630c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b088      	sub	sp, #32
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10b      	bne.n	8006334 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800631c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006320:	f383 8811 	msr	BASEPRI, r3
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	f3bf 8f4f 	dsb	sy
 800632c:	613b      	str	r3, [r7, #16]
}
 800632e:	bf00      	nop
 8006330:	bf00      	nop
 8006332:	e7fd      	b.n	8006330 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	60fb      	str	r3, [r7, #12]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006352:	f000 fbf1 	bl	8006b38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006356:	4b1d      	ldr	r3, [pc, #116]	@ (80063cc <xTaskCheckForTimeOut+0xc0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800636e:	d102      	bne.n	8006376 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]
 8006374:	e023      	b.n	80063be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	4b15      	ldr	r3, [pc, #84]	@ (80063d0 <xTaskCheckForTimeOut+0xc4>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d007      	beq.n	8006392 <xTaskCheckForTimeOut+0x86>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	429a      	cmp	r2, r3
 800638a:	d302      	bcc.n	8006392 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800638c:	2301      	movs	r3, #1
 800638e:	61fb      	str	r3, [r7, #28]
 8006390:	e015      	b.n	80063be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	429a      	cmp	r2, r3
 800639a:	d20b      	bcs.n	80063b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	1ad2      	subs	r2, r2, r3
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f7ff ff99 	bl	80062e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	61fb      	str	r3, [r7, #28]
 80063b2:	e004      	b.n	80063be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063ba:	2301      	movs	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063be:	f000 fbed 	bl	8006b9c <vPortExitCritical>

	return xReturn;
 80063c2:	69fb      	ldr	r3, [r7, #28]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3720      	adds	r7, #32
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	200006a8 	.word	0x200006a8
 80063d0:	200006bc 	.word	0x200006bc

080063d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063d4:	b480      	push	{r7}
 80063d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063d8:	4b03      	ldr	r3, [pc, #12]	@ (80063e8 <vTaskMissedYield+0x14>)
 80063da:	2201      	movs	r2, #1
 80063dc:	601a      	str	r2, [r3, #0]
}
 80063de:	bf00      	nop
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr
 80063e8:	200006b8 	.word	0x200006b8

080063ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063f4:	f000 f852 	bl	800649c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063f8:	4b06      	ldr	r3, [pc, #24]	@ (8006414 <prvIdleTask+0x28>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d9f9      	bls.n	80063f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006400:	4b05      	ldr	r3, [pc, #20]	@ (8006418 <prvIdleTask+0x2c>)
 8006402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006410:	e7f0      	b.n	80063f4 <prvIdleTask+0x8>
 8006412:	bf00      	nop
 8006414:	200005a8 	.word	0x200005a8
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006422:	2300      	movs	r3, #0
 8006424:	607b      	str	r3, [r7, #4]
 8006426:	e00c      	b.n	8006442 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4a12      	ldr	r2, [pc, #72]	@ (800647c <prvInitialiseTaskLists+0x60>)
 8006434:	4413      	add	r3, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe ff3d 	bl	80052b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3301      	adds	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b06      	cmp	r3, #6
 8006446:	d9ef      	bls.n	8006428 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006448:	480d      	ldr	r0, [pc, #52]	@ (8006480 <prvInitialiseTaskLists+0x64>)
 800644a:	f7fe ff34 	bl	80052b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800644e:	480d      	ldr	r0, [pc, #52]	@ (8006484 <prvInitialiseTaskLists+0x68>)
 8006450:	f7fe ff31 	bl	80052b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006454:	480c      	ldr	r0, [pc, #48]	@ (8006488 <prvInitialiseTaskLists+0x6c>)
 8006456:	f7fe ff2e 	bl	80052b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800645a:	480c      	ldr	r0, [pc, #48]	@ (800648c <prvInitialiseTaskLists+0x70>)
 800645c:	f7fe ff2b 	bl	80052b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006460:	480b      	ldr	r0, [pc, #44]	@ (8006490 <prvInitialiseTaskLists+0x74>)
 8006462:	f7fe ff28 	bl	80052b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006466:	4b0b      	ldr	r3, [pc, #44]	@ (8006494 <prvInitialiseTaskLists+0x78>)
 8006468:	4a05      	ldr	r2, [pc, #20]	@ (8006480 <prvInitialiseTaskLists+0x64>)
 800646a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800646c:	4b0a      	ldr	r3, [pc, #40]	@ (8006498 <prvInitialiseTaskLists+0x7c>)
 800646e:	4a05      	ldr	r2, [pc, #20]	@ (8006484 <prvInitialiseTaskLists+0x68>)
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	200005a8 	.word	0x200005a8
 8006480:	20000634 	.word	0x20000634
 8006484:	20000648 	.word	0x20000648
 8006488:	20000664 	.word	0x20000664
 800648c:	20000678 	.word	0x20000678
 8006490:	20000690 	.word	0x20000690
 8006494:	2000065c 	.word	0x2000065c
 8006498:	20000660 	.word	0x20000660

0800649c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064a2:	e019      	b.n	80064d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064a4:	f000 fb48 	bl	8006b38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a8:	4b10      	ldr	r3, [pc, #64]	@ (80064ec <prvCheckTasksWaitingTermination+0x50>)
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fe ff88 	bl	80053ca <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064ba:	4b0d      	ldr	r3, [pc, #52]	@ (80064f0 <prvCheckTasksWaitingTermination+0x54>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3b01      	subs	r3, #1
 80064c0:	4a0b      	ldr	r2, [pc, #44]	@ (80064f0 <prvCheckTasksWaitingTermination+0x54>)
 80064c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064c4:	4b0b      	ldr	r3, [pc, #44]	@ (80064f4 <prvCheckTasksWaitingTermination+0x58>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3b01      	subs	r3, #1
 80064ca:	4a0a      	ldr	r2, [pc, #40]	@ (80064f4 <prvCheckTasksWaitingTermination+0x58>)
 80064cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064ce:	f000 fb65 	bl	8006b9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f810 	bl	80064f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064d8:	4b06      	ldr	r3, [pc, #24]	@ (80064f4 <prvCheckTasksWaitingTermination+0x58>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e1      	bne.n	80064a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064e0:	bf00      	nop
 80064e2:	bf00      	nop
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000678 	.word	0x20000678
 80064f0:	200006a4 	.word	0x200006a4
 80064f4:	2000068c 	.word	0x2000068c

080064f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006506:	2b00      	cmp	r3, #0
 8006508:	d108      	bne.n	800651c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fd02 	bl	8006f18 <vPortFree>
				vPortFree( pxTCB );
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 fcff 	bl	8006f18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800651a:	e019      	b.n	8006550 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006522:	2b01      	cmp	r3, #1
 8006524:	d103      	bne.n	800652e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fcf6 	bl	8006f18 <vPortFree>
	}
 800652c:	e010      	b.n	8006550 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006534:	2b02      	cmp	r3, #2
 8006536:	d00b      	beq.n	8006550 <prvDeleteTCB+0x58>
	__asm volatile
 8006538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	f3bf 8f4f 	dsb	sy
 8006548:	60fb      	str	r3, [r7, #12]
}
 800654a:	bf00      	nop
 800654c:	bf00      	nop
 800654e:	e7fd      	b.n	800654c <prvDeleteTCB+0x54>
	}
 8006550:	bf00      	nop
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800655e:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <prvResetNextTaskUnblockTime+0x38>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d104      	bne.n	8006572 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006568:	4b0a      	ldr	r3, [pc, #40]	@ (8006594 <prvResetNextTaskUnblockTime+0x3c>)
 800656a:	f04f 32ff 	mov.w	r2, #4294967295
 800656e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006570:	e008      	b.n	8006584 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006572:	4b07      	ldr	r3, [pc, #28]	@ (8006590 <prvResetNextTaskUnblockTime+0x38>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a04      	ldr	r2, [pc, #16]	@ (8006594 <prvResetNextTaskUnblockTime+0x3c>)
 8006582:	6013      	str	r3, [r2, #0]
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	2000065c 	.word	0x2000065c
 8006594:	200006c4 	.word	0x200006c4

08006598 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800659e:	4b0b      	ldr	r3, [pc, #44]	@ (80065cc <xTaskGetSchedulerState+0x34>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d102      	bne.n	80065ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065a6:	2301      	movs	r3, #1
 80065a8:	607b      	str	r3, [r7, #4]
 80065aa:	e008      	b.n	80065be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ac:	4b08      	ldr	r3, [pc, #32]	@ (80065d0 <xTaskGetSchedulerState+0x38>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d102      	bne.n	80065ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065b4:	2302      	movs	r3, #2
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	e001      	b.n	80065be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065be:	687b      	ldr	r3, [r7, #4]
	}
 80065c0:	4618      	mov	r0, r3
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	200006b0 	.word	0x200006b0
 80065d0:	200006cc 	.word	0x200006cc

080065d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80065e0:	2300      	movs	r3, #0
 80065e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d05e      	beq.n	80066a8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ee:	4b31      	ldr	r3, [pc, #196]	@ (80066b4 <xTaskPriorityInherit+0xe0>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d24e      	bcs.n	8006696 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	699b      	ldr	r3, [r3, #24]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	db06      	blt.n	800660e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006600:	4b2c      	ldr	r3, [pc, #176]	@ (80066b4 <xTaskPriorityInherit+0xe0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006606:	f1c3 0207 	rsb	r2, r3, #7
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	6959      	ldr	r1, [r3, #20]
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4a26      	ldr	r2, [pc, #152]	@ (80066b8 <xTaskPriorityInherit+0xe4>)
 8006620:	4413      	add	r3, r2
 8006622:	4299      	cmp	r1, r3
 8006624:	d12f      	bne.n	8006686 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	3304      	adds	r3, #4
 800662a:	4618      	mov	r0, r3
 800662c:	f7fe fecd 	bl	80053ca <uxListRemove>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800663a:	2201      	movs	r2, #1
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	43da      	mvns	r2, r3
 8006642:	4b1e      	ldr	r3, [pc, #120]	@ (80066bc <xTaskPriorityInherit+0xe8>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4013      	ands	r3, r2
 8006648:	4a1c      	ldr	r2, [pc, #112]	@ (80066bc <xTaskPriorityInherit+0xe8>)
 800664a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800664c:	4b19      	ldr	r3, [pc, #100]	@ (80066b4 <xTaskPriorityInherit+0xe0>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	2201      	movs	r2, #1
 800665c:	409a      	lsls	r2, r3
 800665e:	4b17      	ldr	r3, [pc, #92]	@ (80066bc <xTaskPriorityInherit+0xe8>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4313      	orrs	r3, r2
 8006664:	4a15      	ldr	r2, [pc, #84]	@ (80066bc <xTaskPriorityInherit+0xe8>)
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4a10      	ldr	r2, [pc, #64]	@ (80066b8 <xTaskPriorityInherit+0xe4>)
 8006676:	441a      	add	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	3304      	adds	r3, #4
 800667c:	4619      	mov	r1, r3
 800667e:	4610      	mov	r0, r2
 8006680:	f7fe fe46 	bl	8005310 <vListInsertEnd>
 8006684:	e004      	b.n	8006690 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006686:	4b0b      	ldr	r3, [pc, #44]	@ (80066b4 <xTaskPriorityInherit+0xe0>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006690:	2301      	movs	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	e008      	b.n	80066a8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800669a:	4b06      	ldr	r3, [pc, #24]	@ (80066b4 <xTaskPriorityInherit+0xe0>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d201      	bcs.n	80066a8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80066a4:	2301      	movs	r3, #1
 80066a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066a8:	68fb      	ldr	r3, [r7, #12]
	}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop
 80066b4:	200005a4 	.word	0x200005a4
 80066b8:	200005a8 	.word	0x200005a8
 80066bc:	200006ac 	.word	0x200006ac

080066c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80066ce:	2301      	movs	r3, #1
 80066d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d079      	beq.n	80067cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10b      	bne.n	80066f8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	60fb      	str	r3, [r7, #12]
}
 80066f2:	bf00      	nop
 80066f4:	bf00      	nop
 80066f6:	e7fd      	b.n	80066f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d902      	bls.n	8006708 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	61fb      	str	r3, [r7, #28]
 8006706:	e002      	b.n	800670e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800670c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006712:	69fa      	ldr	r2, [r7, #28]
 8006714:	429a      	cmp	r2, r3
 8006716:	d059      	beq.n	80067cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	429a      	cmp	r2, r3
 8006720:	d154      	bne.n	80067cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006722:	4b2c      	ldr	r3, [pc, #176]	@ (80067d4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	429a      	cmp	r2, r3
 800672a:	d10b      	bne.n	8006744 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800672c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	60bb      	str	r3, [r7, #8]
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	e7fd      	b.n	8006740 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006748:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	2b00      	cmp	r3, #0
 8006756:	db04      	blt.n	8006762 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	f1c3 0207 	rsb	r2, r3, #7
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006762:	69bb      	ldr	r3, [r7, #24]
 8006764:	6959      	ldr	r1, [r3, #20]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4613      	mov	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4a19      	ldr	r2, [pc, #100]	@ (80067d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006772:	4413      	add	r3, r2
 8006774:	4299      	cmp	r1, r3
 8006776:	d129      	bne.n	80067cc <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	3304      	adds	r3, #4
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fe24 	bl	80053ca <uxListRemove>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10a      	bne.n	800679e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800678c:	2201      	movs	r2, #1
 800678e:	fa02 f303 	lsl.w	r3, r2, r3
 8006792:	43da      	mvns	r2, r3
 8006794:	4b11      	ldr	r3, [pc, #68]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4013      	ands	r3, r2
 800679a:	4a10      	ldr	r2, [pc, #64]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800679c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a2:	2201      	movs	r2, #1
 80067a4:	409a      	lsls	r2, r3
 80067a6:	4b0d      	ldr	r3, [pc, #52]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	4a0b      	ldr	r2, [pc, #44]	@ (80067dc <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067b4:	4613      	mov	r3, r2
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	4413      	add	r3, r2
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4a06      	ldr	r2, [pc, #24]	@ (80067d8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80067be:	441a      	add	r2, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe fda2 	bl	8005310 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067cc:	bf00      	nop
 80067ce:	3720      	adds	r7, #32
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	200005a4 	.word	0x200005a4
 80067d8:	200005a8 	.word	0x200005a8
 80067dc:	200006ac 	.word	0x200006ac

080067e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80067e4:	4b07      	ldr	r3, [pc, #28]	@ (8006804 <pvTaskIncrementMutexHeldCount+0x24>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80067ec:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <pvTaskIncrementMutexHeldCount+0x24>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067f2:	3201      	adds	r2, #1
 80067f4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80067f6:	4b03      	ldr	r3, [pc, #12]	@ (8006804 <pvTaskIncrementMutexHeldCount+0x24>)
 80067f8:	681b      	ldr	r3, [r3, #0]
	}
 80067fa:	4618      	mov	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	200005a4 	.word	0x200005a4

08006808 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006812:	4b29      	ldr	r3, [pc, #164]	@ (80068b8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006818:	4b28      	ldr	r3, [pc, #160]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3304      	adds	r3, #4
 800681e:	4618      	mov	r0, r3
 8006820:	f7fe fdd3 	bl	80053ca <uxListRemove>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10b      	bne.n	8006842 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800682a:	4b24      	ldr	r3, [pc, #144]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006830:	2201      	movs	r2, #1
 8006832:	fa02 f303 	lsl.w	r3, r2, r3
 8006836:	43da      	mvns	r2, r3
 8006838:	4b21      	ldr	r3, [pc, #132]	@ (80068c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4013      	ands	r3, r2
 800683e:	4a20      	ldr	r2, [pc, #128]	@ (80068c0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006840:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006848:	d10a      	bne.n	8006860 <prvAddCurrentTaskToDelayedList+0x58>
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d007      	beq.n	8006860 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006850:	4b1a      	ldr	r3, [pc, #104]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	3304      	adds	r3, #4
 8006856:	4619      	mov	r1, r3
 8006858:	481a      	ldr	r0, [pc, #104]	@ (80068c4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800685a:	f7fe fd59 	bl	8005310 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800685e:	e026      	b.n	80068ae <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4413      	add	r3, r2
 8006866:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006868:	4b14      	ldr	r3, [pc, #80]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	429a      	cmp	r2, r3
 8006876:	d209      	bcs.n	800688c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006878:	4b13      	ldr	r3, [pc, #76]	@ (80068c8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	4b0f      	ldr	r3, [pc, #60]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xb4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	3304      	adds	r3, #4
 8006882:	4619      	mov	r1, r3
 8006884:	4610      	mov	r0, r2
 8006886:	f7fe fd67 	bl	8005358 <vListInsert>
}
 800688a:	e010      	b.n	80068ae <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800688c:	4b0f      	ldr	r3, [pc, #60]	@ (80068cc <prvAddCurrentTaskToDelayedList+0xc4>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3304      	adds	r3, #4
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7fe fd5d 	bl	8005358 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800689e:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d202      	bcs.n	80068ae <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068a8:	4a09      	ldr	r2, [pc, #36]	@ (80068d0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6013      	str	r3, [r2, #0]
}
 80068ae:	bf00      	nop
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	200006a8 	.word	0x200006a8
 80068bc:	200005a4 	.word	0x200005a4
 80068c0:	200006ac 	.word	0x200006ac
 80068c4:	20000690 	.word	0x20000690
 80068c8:	20000660 	.word	0x20000660
 80068cc:	2000065c 	.word	0x2000065c
 80068d0:	200006c4 	.word	0x200006c4

080068d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3b04      	subs	r3, #4
 80068e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80068ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b04      	subs	r3, #4
 80068f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f023 0201 	bic.w	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	3b04      	subs	r3, #4
 8006902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006904:	4a0c      	ldr	r2, [pc, #48]	@ (8006938 <pxPortInitialiseStack+0x64>)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3b14      	subs	r3, #20
 800690e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3b04      	subs	r3, #4
 800691a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f06f 0202 	mvn.w	r2, #2
 8006922:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	3b20      	subs	r3, #32
 8006928:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800692a:	68fb      	ldr	r3, [r7, #12]
}
 800692c:	4618      	mov	r0, r3
 800692e:	3714      	adds	r7, #20
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	0800693d 	.word	0x0800693d

0800693c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006946:	4b13      	ldr	r3, [pc, #76]	@ (8006994 <prvTaskExitError+0x58>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694e:	d00b      	beq.n	8006968 <prvTaskExitError+0x2c>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	60fb      	str	r3, [r7, #12]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <prvTaskExitError+0x28>
	__asm volatile
 8006968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800696c:	f383 8811 	msr	BASEPRI, r3
 8006970:	f3bf 8f6f 	isb	sy
 8006974:	f3bf 8f4f 	dsb	sy
 8006978:	60bb      	str	r3, [r7, #8]
}
 800697a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800697c:	bf00      	nop
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0fc      	beq.n	800697e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	3714      	adds	r7, #20
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
 8006992:	bf00      	nop
 8006994:	2000011c 	.word	0x2000011c
	...

080069a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069a0:	4b07      	ldr	r3, [pc, #28]	@ (80069c0 <pxCurrentTCBConst2>)
 80069a2:	6819      	ldr	r1, [r3, #0]
 80069a4:	6808      	ldr	r0, [r1, #0]
 80069a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069aa:	f380 8809 	msr	PSP, r0
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f04f 0000 	mov.w	r0, #0
 80069b6:	f380 8811 	msr	BASEPRI, r0
 80069ba:	4770      	bx	lr
 80069bc:	f3af 8000 	nop.w

080069c0 <pxCurrentTCBConst2>:
 80069c0:	200005a4 	.word	0x200005a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop

080069c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069c8:	4808      	ldr	r0, [pc, #32]	@ (80069ec <prvPortStartFirstTask+0x24>)
 80069ca:	6800      	ldr	r0, [r0, #0]
 80069cc:	6800      	ldr	r0, [r0, #0]
 80069ce:	f380 8808 	msr	MSP, r0
 80069d2:	f04f 0000 	mov.w	r0, #0
 80069d6:	f380 8814 	msr	CONTROL, r0
 80069da:	b662      	cpsie	i
 80069dc:	b661      	cpsie	f
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	df00      	svc	0
 80069e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069ea:	bf00      	nop
 80069ec:	e000ed08 	.word	0xe000ed08

080069f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80069f6:	4b47      	ldr	r3, [pc, #284]	@ (8006b14 <xPortStartScheduler+0x124>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a47      	ldr	r2, [pc, #284]	@ (8006b18 <xPortStartScheduler+0x128>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10b      	bne.n	8006a18 <xPortStartScheduler+0x28>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	613b      	str	r3, [r7, #16]
}
 8006a12:	bf00      	nop
 8006a14:	bf00      	nop
 8006a16:	e7fd      	b.n	8006a14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006a18:	4b3e      	ldr	r3, [pc, #248]	@ (8006b14 <xPortStartScheduler+0x124>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a3f      	ldr	r2, [pc, #252]	@ (8006b1c <xPortStartScheduler+0x12c>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10b      	bne.n	8006a3a <xPortStartScheduler+0x4a>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	60fb      	str	r3, [r7, #12]
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop
 8006a38:	e7fd      	b.n	8006a36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a3a:	4b39      	ldr	r3, [pc, #228]	@ (8006b20 <xPortStartScheduler+0x130>)
 8006a3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	22ff      	movs	r2, #255	@ 0xff
 8006a4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	4b31      	ldr	r3, [pc, #196]	@ (8006b24 <xPortStartScheduler+0x134>)
 8006a60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a62:	4b31      	ldr	r3, [pc, #196]	@ (8006b28 <xPortStartScheduler+0x138>)
 8006a64:	2207      	movs	r2, #7
 8006a66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a68:	e009      	b.n	8006a7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8006b28 <xPortStartScheduler+0x138>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	4a2d      	ldr	r2, [pc, #180]	@ (8006b28 <xPortStartScheduler+0x138>)
 8006a72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	005b      	lsls	r3, r3, #1
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a7e:	78fb      	ldrb	r3, [r7, #3]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a86:	2b80      	cmp	r3, #128	@ 0x80
 8006a88:	d0ef      	beq.n	8006a6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a8a:	4b27      	ldr	r3, [pc, #156]	@ (8006b28 <xPortStartScheduler+0x138>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f1c3 0307 	rsb	r3, r3, #7
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	d00b      	beq.n	8006aae <xPortStartScheduler+0xbe>
	__asm volatile
 8006a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a9a:	f383 8811 	msr	BASEPRI, r3
 8006a9e:	f3bf 8f6f 	isb	sy
 8006aa2:	f3bf 8f4f 	dsb	sy
 8006aa6:	60bb      	str	r3, [r7, #8]
}
 8006aa8:	bf00      	nop
 8006aaa:	bf00      	nop
 8006aac:	e7fd      	b.n	8006aaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006aae:	4b1e      	ldr	r3, [pc, #120]	@ (8006b28 <xPortStartScheduler+0x138>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	021b      	lsls	r3, r3, #8
 8006ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8006b28 <xPortStartScheduler+0x138>)
 8006ab6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b28 <xPortStartScheduler+0x138>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006ac0:	4a19      	ldr	r2, [pc, #100]	@ (8006b28 <xPortStartScheduler+0x138>)
 8006ac2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006acc:	4b17      	ldr	r3, [pc, #92]	@ (8006b2c <xPortStartScheduler+0x13c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a16      	ldr	r2, [pc, #88]	@ (8006b2c <xPortStartScheduler+0x13c>)
 8006ad2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006ad6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006ad8:	4b14      	ldr	r3, [pc, #80]	@ (8006b2c <xPortStartScheduler+0x13c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a13      	ldr	r2, [pc, #76]	@ (8006b2c <xPortStartScheduler+0x13c>)
 8006ade:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006ae2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ae4:	f000 f8da 	bl	8006c9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ae8:	4b11      	ldr	r3, [pc, #68]	@ (8006b30 <xPortStartScheduler+0x140>)
 8006aea:	2200      	movs	r2, #0
 8006aec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006aee:	f000 f8f9 	bl	8006ce4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006af2:	4b10      	ldr	r3, [pc, #64]	@ (8006b34 <xPortStartScheduler+0x144>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a0f      	ldr	r2, [pc, #60]	@ (8006b34 <xPortStartScheduler+0x144>)
 8006af8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006afc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006afe:	f7ff ff63 	bl	80069c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b02:	f7ff fb07 	bl	8006114 <vTaskSwitchContext>
	prvTaskExitError();
 8006b06:	f7ff ff19 	bl	800693c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	e000ed00 	.word	0xe000ed00
 8006b18:	410fc271 	.word	0x410fc271
 8006b1c:	410fc270 	.word	0x410fc270
 8006b20:	e000e400 	.word	0xe000e400
 8006b24:	200006d0 	.word	0x200006d0
 8006b28:	200006d4 	.word	0x200006d4
 8006b2c:	e000ed20 	.word	0xe000ed20
 8006b30:	2000011c 	.word	0x2000011c
 8006b34:	e000ef34 	.word	0xe000ef34

08006b38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	607b      	str	r3, [r7, #4]
}
 8006b50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <vPortEnterCritical+0x5c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3301      	adds	r3, #1
 8006b58:	4a0e      	ldr	r2, [pc, #56]	@ (8006b94 <vPortEnterCritical+0x5c>)
 8006b5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8006b94 <vPortEnterCritical+0x5c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d110      	bne.n	8006b86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b64:	4b0c      	ldr	r3, [pc, #48]	@ (8006b98 <vPortEnterCritical+0x60>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <vPortEnterCritical+0x4e>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	603b      	str	r3, [r7, #0]
}
 8006b80:	bf00      	nop
 8006b82:	bf00      	nop
 8006b84:	e7fd      	b.n	8006b82 <vPortEnterCritical+0x4a>
	}
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	2000011c 	.word	0x2000011c
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ba2:	4b12      	ldr	r3, [pc, #72]	@ (8006bec <vPortExitCritical+0x50>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <vPortExitCritical+0x26>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	607b      	str	r3, [r7, #4]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8006bec <vPortExitCritical+0x50>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	4a08      	ldr	r2, [pc, #32]	@ (8006bec <vPortExitCritical+0x50>)
 8006bca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bcc:	4b07      	ldr	r3, [pc, #28]	@ (8006bec <vPortExitCritical+0x50>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <vPortExitCritical+0x44>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f383 8811 	msr	BASEPRI, r3
}
 8006bde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr
 8006bec:	2000011c 	.word	0x2000011c

08006bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bf0:	f3ef 8009 	mrs	r0, PSP
 8006bf4:	f3bf 8f6f 	isb	sy
 8006bf8:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <pxCurrentTCBConst>)
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	f01e 0f10 	tst.w	lr, #16
 8006c00:	bf08      	it	eq
 8006c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0a:	6010      	str	r0, [r2, #0]
 8006c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006c14:	f380 8811 	msr	BASEPRI, r0
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f7ff fa78 	bl	8006114 <vTaskSwitchContext>
 8006c24:	f04f 0000 	mov.w	r0, #0
 8006c28:	f380 8811 	msr	BASEPRI, r0
 8006c2c:	bc09      	pop	{r0, r3}
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	6808      	ldr	r0, [r1, #0]
 8006c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c36:	f01e 0f10 	tst.w	lr, #16
 8006c3a:	bf08      	it	eq
 8006c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c40:	f380 8809 	msr	PSP, r0
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	f3af 8000 	nop.w

08006c50 <pxCurrentTCBConst>:
 8006c50:	200005a4 	.word	0x200005a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop

08006c58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	607b      	str	r3, [r7, #4]
}
 8006c70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c72:	f7ff f995 	bl	8005fa0 <xTaskIncrementTick>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d003      	beq.n	8006c84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c7c:	4b06      	ldr	r3, [pc, #24]	@ (8006c98 <xPortSysTickHandler+0x40>)
 8006c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c82:	601a      	str	r2, [r3, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f383 8811 	msr	BASEPRI, r3
}
 8006c8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	e000ed04 	.word	0xe000ed04

08006c9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd0 <vPortSetupTimerInterrupt+0x34>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8006cd4 <vPortSetupTimerInterrupt+0x38>)
 8006ca8:	2200      	movs	r2, #0
 8006caa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006cac:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <vPortSetupTimerInterrupt+0x3c>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8006cdc <vPortSetupTimerInterrupt+0x40>)
 8006cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb6:	099b      	lsrs	r3, r3, #6
 8006cb8:	4a09      	ldr	r2, [pc, #36]	@ (8006ce0 <vPortSetupTimerInterrupt+0x44>)
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cbe:	4b04      	ldr	r3, [pc, #16]	@ (8006cd0 <vPortSetupTimerInterrupt+0x34>)
 8006cc0:	2207      	movs	r2, #7
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	e000e010 	.word	0xe000e010
 8006cd4:	e000e018 	.word	0xe000e018
 8006cd8:	20000110 	.word	0x20000110
 8006cdc:	10624dd3 	.word	0x10624dd3
 8006ce0:	e000e014 	.word	0xe000e014

08006ce4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ce4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006cf4 <vPortEnableVFP+0x10>
 8006ce8:	6801      	ldr	r1, [r0, #0]
 8006cea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006cee:	6001      	str	r1, [r0, #0]
 8006cf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cf2:	bf00      	nop
 8006cf4:	e000ed88 	.word	0xe000ed88

08006cf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006cfe:	f3ef 8305 	mrs	r3, IPSR
 8006d02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2b0f      	cmp	r3, #15
 8006d08:	d915      	bls.n	8006d36 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006d0a:	4a18      	ldr	r2, [pc, #96]	@ (8006d6c <vPortValidateInterruptPriority+0x74>)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	4413      	add	r3, r2
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006d14:	4b16      	ldr	r3, [pc, #88]	@ (8006d70 <vPortValidateInterruptPriority+0x78>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	7afa      	ldrb	r2, [r7, #11]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d20b      	bcs.n	8006d36 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d22:	f383 8811 	msr	BASEPRI, r3
 8006d26:	f3bf 8f6f 	isb	sy
 8006d2a:	f3bf 8f4f 	dsb	sy
 8006d2e:	607b      	str	r3, [r7, #4]
}
 8006d30:	bf00      	nop
 8006d32:	bf00      	nop
 8006d34:	e7fd      	b.n	8006d32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006d36:	4b0f      	ldr	r3, [pc, #60]	@ (8006d74 <vPortValidateInterruptPriority+0x7c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d78 <vPortValidateInterruptPriority+0x80>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d90b      	bls.n	8006d5e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	603b      	str	r3, [r7, #0]
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	e7fd      	b.n	8006d5a <vPortValidateInterruptPriority+0x62>
	}
 8006d5e:	bf00      	nop
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	e000e3f0 	.word	0xe000e3f0
 8006d70:	200006d0 	.word	0x200006d0
 8006d74:	e000ed0c 	.word	0xe000ed0c
 8006d78:	200006d4 	.word	0x200006d4

08006d7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	@ 0x28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d88:	f7ff f85e 	bl	8005e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8006f00 <pvPortMalloc+0x184>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d94:	f000 f924 	bl	8006fe0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d98:	4b5a      	ldr	r3, [pc, #360]	@ (8006f04 <pvPortMalloc+0x188>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f040 8095 	bne.w	8006ed0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01e      	beq.n	8006dea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006dac:	2208      	movs	r2, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4413      	add	r3, r2
 8006db2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d015      	beq.n	8006dea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f023 0307 	bic.w	r3, r3, #7
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00b      	beq.n	8006dea <pvPortMalloc+0x6e>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	617b      	str	r3, [r7, #20]
}
 8006de4:	bf00      	nop
 8006de6:	bf00      	nop
 8006de8:	e7fd      	b.n	8006de6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d06f      	beq.n	8006ed0 <pvPortMalloc+0x154>
 8006df0:	4b45      	ldr	r3, [pc, #276]	@ (8006f08 <pvPortMalloc+0x18c>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d86a      	bhi.n	8006ed0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dfa:	4b44      	ldr	r3, [pc, #272]	@ (8006f0c <pvPortMalloc+0x190>)
 8006dfc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dfe:	4b43      	ldr	r3, [pc, #268]	@ (8006f0c <pvPortMalloc+0x190>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e04:	e004      	b.n	8006e10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d903      	bls.n	8006e22 <pvPortMalloc+0xa6>
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f1      	bne.n	8006e06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e22:	4b37      	ldr	r3, [pc, #220]	@ (8006f00 <pvPortMalloc+0x184>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d051      	beq.n	8006ed0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e2c:	6a3b      	ldr	r3, [r7, #32]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	2208      	movs	r2, #8
 8006e32:	4413      	add	r3, r2
 8006e34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	6a3b      	ldr	r3, [r7, #32]
 8006e3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	1ad2      	subs	r2, r2, r3
 8006e46:	2308      	movs	r3, #8
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d920      	bls.n	8006e90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4413      	add	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e56:	69bb      	ldr	r3, [r7, #24]
 8006e58:	f003 0307 	and.w	r3, r3, #7
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <pvPortMalloc+0xfc>
	__asm volatile
 8006e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e64:	f383 8811 	msr	BASEPRI, r3
 8006e68:	f3bf 8f6f 	isb	sy
 8006e6c:	f3bf 8f4f 	dsb	sy
 8006e70:	613b      	str	r3, [r7, #16]
}
 8006e72:	bf00      	nop
 8006e74:	bf00      	nop
 8006e76:	e7fd      	b.n	8006e74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e8a:	69b8      	ldr	r0, [r7, #24]
 8006e8c:	f000 f90a 	bl	80070a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e90:	4b1d      	ldr	r3, [pc, #116]	@ (8006f08 <pvPortMalloc+0x18c>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f08 <pvPortMalloc+0x18c>)
 8006e9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006f08 <pvPortMalloc+0x18c>)
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8006f10 <pvPortMalloc+0x194>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d203      	bcs.n	8006eb2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006eaa:	4b17      	ldr	r3, [pc, #92]	@ (8006f08 <pvPortMalloc+0x18c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a18      	ldr	r2, [pc, #96]	@ (8006f10 <pvPortMalloc+0x194>)
 8006eb0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb4:	685a      	ldr	r2, [r3, #4]
 8006eb6:	4b13      	ldr	r3, [pc, #76]	@ (8006f04 <pvPortMalloc+0x188>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006ec6:	4b13      	ldr	r3, [pc, #76]	@ (8006f14 <pvPortMalloc+0x198>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	4a11      	ldr	r2, [pc, #68]	@ (8006f14 <pvPortMalloc+0x198>)
 8006ece:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ed0:	f7fe ffc8 	bl	8005e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00b      	beq.n	8006ef6 <pvPortMalloc+0x17a>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	60fb      	str	r3, [r7, #12]
}
 8006ef0:	bf00      	nop
 8006ef2:	bf00      	nop
 8006ef4:	e7fd      	b.n	8006ef2 <pvPortMalloc+0x176>
	return pvReturn;
 8006ef6:	69fb      	ldr	r3, [r7, #28]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3728      	adds	r7, #40	@ 0x28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20002df0 	.word	0x20002df0
 8006f04:	20002e04 	.word	0x20002e04
 8006f08:	20002df4 	.word	0x20002df4
 8006f0c:	20002de8 	.word	0x20002de8
 8006f10:	20002df8 	.word	0x20002df8
 8006f14:	20002dfc 	.word	0x20002dfc

08006f18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b086      	sub	sp, #24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d04f      	beq.n	8006fca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	425b      	negs	r3, r3
 8006f2e:	697a      	ldr	r2, [r7, #20]
 8006f30:	4413      	add	r3, r2
 8006f32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	685a      	ldr	r2, [r3, #4]
 8006f3c:	4b25      	ldr	r3, [pc, #148]	@ (8006fd4 <vPortFree+0xbc>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4013      	ands	r3, r2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <vPortFree+0x46>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	60fb      	str	r3, [r7, #12]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00b      	beq.n	8006f7e <vPortFree+0x66>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60bb      	str	r3, [r7, #8]
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	e7fd      	b.n	8006f7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	4b14      	ldr	r3, [pc, #80]	@ (8006fd4 <vPortFree+0xbc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4013      	ands	r3, r2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01e      	beq.n	8006fca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d11a      	bne.n	8006fca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd4 <vPortFree+0xbc>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	43db      	mvns	r3, r3
 8006f9e:	401a      	ands	r2, r3
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fa4:	f7fe ff50 	bl	8005e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	4b0a      	ldr	r3, [pc, #40]	@ (8006fd8 <vPortFree+0xc0>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	4a09      	ldr	r2, [pc, #36]	@ (8006fd8 <vPortFree+0xc0>)
 8006fb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006fb6:	6938      	ldr	r0, [r7, #16]
 8006fb8:	f000 f874 	bl	80070a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006fbc:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <vPortFree+0xc4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	4a06      	ldr	r2, [pc, #24]	@ (8006fdc <vPortFree+0xc4>)
 8006fc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006fc6:	f7fe ff4d 	bl	8005e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fca:	bf00      	nop
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20002e04 	.word	0x20002e04
 8006fd8:	20002df4 	.word	0x20002df4
 8006fdc:	20002e00 	.word	0x20002e00

08006fe0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fe6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8006fea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fec:	4b27      	ldr	r3, [pc, #156]	@ (800708c <prvHeapInit+0xac>)
 8006fee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f003 0307 	and.w	r3, r3, #7
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00c      	beq.n	8007014 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3307      	adds	r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0307 	bic.w	r3, r3, #7
 8007006:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	4a1f      	ldr	r2, [pc, #124]	@ (800708c <prvHeapInit+0xac>)
 8007010:	4413      	add	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007018:	4a1d      	ldr	r2, [pc, #116]	@ (8007090 <prvHeapInit+0xb0>)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800701e:	4b1c      	ldr	r3, [pc, #112]	@ (8007090 <prvHeapInit+0xb0>)
 8007020:	2200      	movs	r2, #0
 8007022:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	4413      	add	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800702c:	2208      	movs	r2, #8
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	1a9b      	subs	r3, r3, r2
 8007032:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f023 0307 	bic.w	r3, r3, #7
 800703a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a15      	ldr	r2, [pc, #84]	@ (8007094 <prvHeapInit+0xb4>)
 8007040:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007042:	4b14      	ldr	r3, [pc, #80]	@ (8007094 <prvHeapInit+0xb4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	2200      	movs	r2, #0
 8007048:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800704a:	4b12      	ldr	r3, [pc, #72]	@ (8007094 <prvHeapInit+0xb4>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	1ad2      	subs	r2, r2, r3
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007060:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <prvHeapInit+0xb4>)
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4a0a      	ldr	r2, [pc, #40]	@ (8007098 <prvHeapInit+0xb8>)
 800706e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	4a09      	ldr	r2, [pc, #36]	@ (800709c <prvHeapInit+0xbc>)
 8007076:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007078:	4b09      	ldr	r3, [pc, #36]	@ (80070a0 <prvHeapInit+0xc0>)
 800707a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800707e:	601a      	str	r2, [r3, #0]
}
 8007080:	bf00      	nop
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	200006d8 	.word	0x200006d8
 8007090:	20002de8 	.word	0x20002de8
 8007094:	20002df0 	.word	0x20002df0
 8007098:	20002df8 	.word	0x20002df8
 800709c:	20002df4 	.word	0x20002df4
 80070a0:	20002e04 	.word	0x20002e04

080070a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070ac:	4b28      	ldr	r3, [pc, #160]	@ (8007150 <prvInsertBlockIntoFreeList+0xac>)
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e002      	b.n	80070b8 <prvInsertBlockIntoFreeList+0x14>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	687a      	ldr	r2, [r7, #4]
 80070be:	429a      	cmp	r2, r3
 80070c0:	d8f7      	bhi.n	80070b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	4413      	add	r3, r2
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d108      	bne.n	80070e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	441a      	add	r2, r3
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	441a      	add	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d118      	bne.n	800712c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	4b15      	ldr	r3, [pc, #84]	@ (8007154 <prvInsertBlockIntoFreeList+0xb0>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	429a      	cmp	r2, r3
 8007104:	d00d      	beq.n	8007122 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	685a      	ldr	r2, [r3, #4]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	441a      	add	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	601a      	str	r2, [r3, #0]
 8007120:	e008      	b.n	8007134 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007122:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <prvInsertBlockIntoFreeList+0xb0>)
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e003      	b.n	8007134 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	429a      	cmp	r2, r3
 800713a:	d002      	beq.n	8007142 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20002de8 	.word	0x20002de8
 8007154:	20002df0 	.word	0x20002df0

08007158 <atoi>:
 8007158:	220a      	movs	r2, #10
 800715a:	2100      	movs	r1, #0
 800715c:	f000 b87a 	b.w	8007254 <strtol>

08007160 <_strtol_l.constprop.0>:
 8007160:	2b24      	cmp	r3, #36	@ 0x24
 8007162:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007166:	4686      	mov	lr, r0
 8007168:	4690      	mov	r8, r2
 800716a:	d801      	bhi.n	8007170 <_strtol_l.constprop.0+0x10>
 800716c:	2b01      	cmp	r3, #1
 800716e:	d106      	bne.n	800717e <_strtol_l.constprop.0+0x1e>
 8007170:	f000 fb2e 	bl	80077d0 <__errno>
 8007174:	2316      	movs	r3, #22
 8007176:	6003      	str	r3, [r0, #0]
 8007178:	2000      	movs	r0, #0
 800717a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800717e:	4834      	ldr	r0, [pc, #208]	@ (8007250 <_strtol_l.constprop.0+0xf0>)
 8007180:	460d      	mov	r5, r1
 8007182:	462a      	mov	r2, r5
 8007184:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007188:	5d06      	ldrb	r6, [r0, r4]
 800718a:	f016 0608 	ands.w	r6, r6, #8
 800718e:	d1f8      	bne.n	8007182 <_strtol_l.constprop.0+0x22>
 8007190:	2c2d      	cmp	r4, #45	@ 0x2d
 8007192:	d12d      	bne.n	80071f0 <_strtol_l.constprop.0+0x90>
 8007194:	782c      	ldrb	r4, [r5, #0]
 8007196:	2601      	movs	r6, #1
 8007198:	1c95      	adds	r5, r2, #2
 800719a:	f033 0210 	bics.w	r2, r3, #16
 800719e:	d109      	bne.n	80071b4 <_strtol_l.constprop.0+0x54>
 80071a0:	2c30      	cmp	r4, #48	@ 0x30
 80071a2:	d12a      	bne.n	80071fa <_strtol_l.constprop.0+0x9a>
 80071a4:	782a      	ldrb	r2, [r5, #0]
 80071a6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80071aa:	2a58      	cmp	r2, #88	@ 0x58
 80071ac:	d125      	bne.n	80071fa <_strtol_l.constprop.0+0x9a>
 80071ae:	786c      	ldrb	r4, [r5, #1]
 80071b0:	2310      	movs	r3, #16
 80071b2:	3502      	adds	r5, #2
 80071b4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80071b8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80071bc:	2200      	movs	r2, #0
 80071be:	fbbc f9f3 	udiv	r9, ip, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	fb03 ca19 	mls	sl, r3, r9, ip
 80071c8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80071cc:	2f09      	cmp	r7, #9
 80071ce:	d81b      	bhi.n	8007208 <_strtol_l.constprop.0+0xa8>
 80071d0:	463c      	mov	r4, r7
 80071d2:	42a3      	cmp	r3, r4
 80071d4:	dd27      	ble.n	8007226 <_strtol_l.constprop.0+0xc6>
 80071d6:	1c57      	adds	r7, r2, #1
 80071d8:	d007      	beq.n	80071ea <_strtol_l.constprop.0+0x8a>
 80071da:	4581      	cmp	r9, r0
 80071dc:	d320      	bcc.n	8007220 <_strtol_l.constprop.0+0xc0>
 80071de:	d101      	bne.n	80071e4 <_strtol_l.constprop.0+0x84>
 80071e0:	45a2      	cmp	sl, r4
 80071e2:	db1d      	blt.n	8007220 <_strtol_l.constprop.0+0xc0>
 80071e4:	fb00 4003 	mla	r0, r0, r3, r4
 80071e8:	2201      	movs	r2, #1
 80071ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ee:	e7eb      	b.n	80071c8 <_strtol_l.constprop.0+0x68>
 80071f0:	2c2b      	cmp	r4, #43	@ 0x2b
 80071f2:	bf04      	itt	eq
 80071f4:	782c      	ldrbeq	r4, [r5, #0]
 80071f6:	1c95      	addeq	r5, r2, #2
 80071f8:	e7cf      	b.n	800719a <_strtol_l.constprop.0+0x3a>
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d1da      	bne.n	80071b4 <_strtol_l.constprop.0+0x54>
 80071fe:	2c30      	cmp	r4, #48	@ 0x30
 8007200:	bf0c      	ite	eq
 8007202:	2308      	moveq	r3, #8
 8007204:	230a      	movne	r3, #10
 8007206:	e7d5      	b.n	80071b4 <_strtol_l.constprop.0+0x54>
 8007208:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800720c:	2f19      	cmp	r7, #25
 800720e:	d801      	bhi.n	8007214 <_strtol_l.constprop.0+0xb4>
 8007210:	3c37      	subs	r4, #55	@ 0x37
 8007212:	e7de      	b.n	80071d2 <_strtol_l.constprop.0+0x72>
 8007214:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007218:	2f19      	cmp	r7, #25
 800721a:	d804      	bhi.n	8007226 <_strtol_l.constprop.0+0xc6>
 800721c:	3c57      	subs	r4, #87	@ 0x57
 800721e:	e7d8      	b.n	80071d2 <_strtol_l.constprop.0+0x72>
 8007220:	f04f 32ff 	mov.w	r2, #4294967295
 8007224:	e7e1      	b.n	80071ea <_strtol_l.constprop.0+0x8a>
 8007226:	1c53      	adds	r3, r2, #1
 8007228:	d108      	bne.n	800723c <_strtol_l.constprop.0+0xdc>
 800722a:	2322      	movs	r3, #34	@ 0x22
 800722c:	f8ce 3000 	str.w	r3, [lr]
 8007230:	4660      	mov	r0, ip
 8007232:	f1b8 0f00 	cmp.w	r8, #0
 8007236:	d0a0      	beq.n	800717a <_strtol_l.constprop.0+0x1a>
 8007238:	1e69      	subs	r1, r5, #1
 800723a:	e006      	b.n	800724a <_strtol_l.constprop.0+0xea>
 800723c:	b106      	cbz	r6, 8007240 <_strtol_l.constprop.0+0xe0>
 800723e:	4240      	negs	r0, r0
 8007240:	f1b8 0f00 	cmp.w	r8, #0
 8007244:	d099      	beq.n	800717a <_strtol_l.constprop.0+0x1a>
 8007246:	2a00      	cmp	r2, #0
 8007248:	d1f6      	bne.n	8007238 <_strtol_l.constprop.0+0xd8>
 800724a:	f8c8 1000 	str.w	r1, [r8]
 800724e:	e794      	b.n	800717a <_strtol_l.constprop.0+0x1a>
 8007250:	08008635 	.word	0x08008635

08007254 <strtol>:
 8007254:	4613      	mov	r3, r2
 8007256:	460a      	mov	r2, r1
 8007258:	4601      	mov	r1, r0
 800725a:	4802      	ldr	r0, [pc, #8]	@ (8007264 <strtol+0x10>)
 800725c:	6800      	ldr	r0, [r0, #0]
 800725e:	f7ff bf7f 	b.w	8007160 <_strtol_l.constprop.0>
 8007262:	bf00      	nop
 8007264:	2000012c 	.word	0x2000012c

08007268 <std>:
 8007268:	2300      	movs	r3, #0
 800726a:	b510      	push	{r4, lr}
 800726c:	4604      	mov	r4, r0
 800726e:	e9c0 3300 	strd	r3, r3, [r0]
 8007272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007276:	6083      	str	r3, [r0, #8]
 8007278:	8181      	strh	r1, [r0, #12]
 800727a:	6643      	str	r3, [r0, #100]	@ 0x64
 800727c:	81c2      	strh	r2, [r0, #14]
 800727e:	6183      	str	r3, [r0, #24]
 8007280:	4619      	mov	r1, r3
 8007282:	2208      	movs	r2, #8
 8007284:	305c      	adds	r0, #92	@ 0x5c
 8007286:	f000 f9f9 	bl	800767c <memset>
 800728a:	4b0d      	ldr	r3, [pc, #52]	@ (80072c0 <std+0x58>)
 800728c:	6263      	str	r3, [r4, #36]	@ 0x24
 800728e:	4b0d      	ldr	r3, [pc, #52]	@ (80072c4 <std+0x5c>)
 8007290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007292:	4b0d      	ldr	r3, [pc, #52]	@ (80072c8 <std+0x60>)
 8007294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007296:	4b0d      	ldr	r3, [pc, #52]	@ (80072cc <std+0x64>)
 8007298:	6323      	str	r3, [r4, #48]	@ 0x30
 800729a:	4b0d      	ldr	r3, [pc, #52]	@ (80072d0 <std+0x68>)
 800729c:	6224      	str	r4, [r4, #32]
 800729e:	429c      	cmp	r4, r3
 80072a0:	d006      	beq.n	80072b0 <std+0x48>
 80072a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072a6:	4294      	cmp	r4, r2
 80072a8:	d002      	beq.n	80072b0 <std+0x48>
 80072aa:	33d0      	adds	r3, #208	@ 0xd0
 80072ac:	429c      	cmp	r4, r3
 80072ae:	d105      	bne.n	80072bc <std+0x54>
 80072b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b8:	f000 bab4 	b.w	8007824 <__retarget_lock_init_recursive>
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	bf00      	nop
 80072c0:	080074cd 	.word	0x080074cd
 80072c4:	080074ef 	.word	0x080074ef
 80072c8:	08007527 	.word	0x08007527
 80072cc:	0800754b 	.word	0x0800754b
 80072d0:	20002e08 	.word	0x20002e08

080072d4 <stdio_exit_handler>:
 80072d4:	4a02      	ldr	r2, [pc, #8]	@ (80072e0 <stdio_exit_handler+0xc>)
 80072d6:	4903      	ldr	r1, [pc, #12]	@ (80072e4 <stdio_exit_handler+0x10>)
 80072d8:	4803      	ldr	r0, [pc, #12]	@ (80072e8 <stdio_exit_handler+0x14>)
 80072da:	f000 b869 	b.w	80073b0 <_fwalk_sglue>
 80072de:	bf00      	nop
 80072e0:	20000120 	.word	0x20000120
 80072e4:	08008111 	.word	0x08008111
 80072e8:	20000130 	.word	0x20000130

080072ec <cleanup_stdio>:
 80072ec:	6841      	ldr	r1, [r0, #4]
 80072ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007320 <cleanup_stdio+0x34>)
 80072f0:	4299      	cmp	r1, r3
 80072f2:	b510      	push	{r4, lr}
 80072f4:	4604      	mov	r4, r0
 80072f6:	d001      	beq.n	80072fc <cleanup_stdio+0x10>
 80072f8:	f000 ff0a 	bl	8008110 <_fflush_r>
 80072fc:	68a1      	ldr	r1, [r4, #8]
 80072fe:	4b09      	ldr	r3, [pc, #36]	@ (8007324 <cleanup_stdio+0x38>)
 8007300:	4299      	cmp	r1, r3
 8007302:	d002      	beq.n	800730a <cleanup_stdio+0x1e>
 8007304:	4620      	mov	r0, r4
 8007306:	f000 ff03 	bl	8008110 <_fflush_r>
 800730a:	68e1      	ldr	r1, [r4, #12]
 800730c:	4b06      	ldr	r3, [pc, #24]	@ (8007328 <cleanup_stdio+0x3c>)
 800730e:	4299      	cmp	r1, r3
 8007310:	d004      	beq.n	800731c <cleanup_stdio+0x30>
 8007312:	4620      	mov	r0, r4
 8007314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007318:	f000 befa 	b.w	8008110 <_fflush_r>
 800731c:	bd10      	pop	{r4, pc}
 800731e:	bf00      	nop
 8007320:	20002e08 	.word	0x20002e08
 8007324:	20002e70 	.word	0x20002e70
 8007328:	20002ed8 	.word	0x20002ed8

0800732c <global_stdio_init.part.0>:
 800732c:	b510      	push	{r4, lr}
 800732e:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <global_stdio_init.part.0+0x30>)
 8007330:	4c0b      	ldr	r4, [pc, #44]	@ (8007360 <global_stdio_init.part.0+0x34>)
 8007332:	4a0c      	ldr	r2, [pc, #48]	@ (8007364 <global_stdio_init.part.0+0x38>)
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	4620      	mov	r0, r4
 8007338:	2200      	movs	r2, #0
 800733a:	2104      	movs	r1, #4
 800733c:	f7ff ff94 	bl	8007268 <std>
 8007340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007344:	2201      	movs	r2, #1
 8007346:	2109      	movs	r1, #9
 8007348:	f7ff ff8e 	bl	8007268 <std>
 800734c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007350:	2202      	movs	r2, #2
 8007352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007356:	2112      	movs	r1, #18
 8007358:	f7ff bf86 	b.w	8007268 <std>
 800735c:	20002f40 	.word	0x20002f40
 8007360:	20002e08 	.word	0x20002e08
 8007364:	080072d5 	.word	0x080072d5

08007368 <__sfp_lock_acquire>:
 8007368:	4801      	ldr	r0, [pc, #4]	@ (8007370 <__sfp_lock_acquire+0x8>)
 800736a:	f000 ba5c 	b.w	8007826 <__retarget_lock_acquire_recursive>
 800736e:	bf00      	nop
 8007370:	20002f49 	.word	0x20002f49

08007374 <__sfp_lock_release>:
 8007374:	4801      	ldr	r0, [pc, #4]	@ (800737c <__sfp_lock_release+0x8>)
 8007376:	f000 ba57 	b.w	8007828 <__retarget_lock_release_recursive>
 800737a:	bf00      	nop
 800737c:	20002f49 	.word	0x20002f49

08007380 <__sinit>:
 8007380:	b510      	push	{r4, lr}
 8007382:	4604      	mov	r4, r0
 8007384:	f7ff fff0 	bl	8007368 <__sfp_lock_acquire>
 8007388:	6a23      	ldr	r3, [r4, #32]
 800738a:	b11b      	cbz	r3, 8007394 <__sinit+0x14>
 800738c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007390:	f7ff bff0 	b.w	8007374 <__sfp_lock_release>
 8007394:	4b04      	ldr	r3, [pc, #16]	@ (80073a8 <__sinit+0x28>)
 8007396:	6223      	str	r3, [r4, #32]
 8007398:	4b04      	ldr	r3, [pc, #16]	@ (80073ac <__sinit+0x2c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1f5      	bne.n	800738c <__sinit+0xc>
 80073a0:	f7ff ffc4 	bl	800732c <global_stdio_init.part.0>
 80073a4:	e7f2      	b.n	800738c <__sinit+0xc>
 80073a6:	bf00      	nop
 80073a8:	080072ed 	.word	0x080072ed
 80073ac:	20002f40 	.word	0x20002f40

080073b0 <_fwalk_sglue>:
 80073b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b4:	4607      	mov	r7, r0
 80073b6:	4688      	mov	r8, r1
 80073b8:	4614      	mov	r4, r2
 80073ba:	2600      	movs	r6, #0
 80073bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073c0:	f1b9 0901 	subs.w	r9, r9, #1
 80073c4:	d505      	bpl.n	80073d2 <_fwalk_sglue+0x22>
 80073c6:	6824      	ldr	r4, [r4, #0]
 80073c8:	2c00      	cmp	r4, #0
 80073ca:	d1f7      	bne.n	80073bc <_fwalk_sglue+0xc>
 80073cc:	4630      	mov	r0, r6
 80073ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d2:	89ab      	ldrh	r3, [r5, #12]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d907      	bls.n	80073e8 <_fwalk_sglue+0x38>
 80073d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073dc:	3301      	adds	r3, #1
 80073de:	d003      	beq.n	80073e8 <_fwalk_sglue+0x38>
 80073e0:	4629      	mov	r1, r5
 80073e2:	4638      	mov	r0, r7
 80073e4:	47c0      	blx	r8
 80073e6:	4306      	orrs	r6, r0
 80073e8:	3568      	adds	r5, #104	@ 0x68
 80073ea:	e7e9      	b.n	80073c0 <_fwalk_sglue+0x10>

080073ec <iprintf>:
 80073ec:	b40f      	push	{r0, r1, r2, r3}
 80073ee:	b507      	push	{r0, r1, r2, lr}
 80073f0:	4906      	ldr	r1, [pc, #24]	@ (800740c <iprintf+0x20>)
 80073f2:	ab04      	add	r3, sp, #16
 80073f4:	6808      	ldr	r0, [r1, #0]
 80073f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fa:	6881      	ldr	r1, [r0, #8]
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	f000 fb5d 	bl	8007abc <_vfiprintf_r>
 8007402:	b003      	add	sp, #12
 8007404:	f85d eb04 	ldr.w	lr, [sp], #4
 8007408:	b004      	add	sp, #16
 800740a:	4770      	bx	lr
 800740c:	2000012c 	.word	0x2000012c

08007410 <_puts_r>:
 8007410:	6a03      	ldr	r3, [r0, #32]
 8007412:	b570      	push	{r4, r5, r6, lr}
 8007414:	6884      	ldr	r4, [r0, #8]
 8007416:	4605      	mov	r5, r0
 8007418:	460e      	mov	r6, r1
 800741a:	b90b      	cbnz	r3, 8007420 <_puts_r+0x10>
 800741c:	f7ff ffb0 	bl	8007380 <__sinit>
 8007420:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007422:	07db      	lsls	r3, r3, #31
 8007424:	d405      	bmi.n	8007432 <_puts_r+0x22>
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	0598      	lsls	r0, r3, #22
 800742a:	d402      	bmi.n	8007432 <_puts_r+0x22>
 800742c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800742e:	f000 f9fa 	bl	8007826 <__retarget_lock_acquire_recursive>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	0719      	lsls	r1, r3, #28
 8007436:	d502      	bpl.n	800743e <_puts_r+0x2e>
 8007438:	6923      	ldr	r3, [r4, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d135      	bne.n	80074aa <_puts_r+0x9a>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 f8c5 	bl	80075d0 <__swsetup_r>
 8007446:	b380      	cbz	r0, 80074aa <_puts_r+0x9a>
 8007448:	f04f 35ff 	mov.w	r5, #4294967295
 800744c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800744e:	07da      	lsls	r2, r3, #31
 8007450:	d405      	bmi.n	800745e <_puts_r+0x4e>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	059b      	lsls	r3, r3, #22
 8007456:	d402      	bmi.n	800745e <_puts_r+0x4e>
 8007458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800745a:	f000 f9e5 	bl	8007828 <__retarget_lock_release_recursive>
 800745e:	4628      	mov	r0, r5
 8007460:	bd70      	pop	{r4, r5, r6, pc}
 8007462:	2b00      	cmp	r3, #0
 8007464:	da04      	bge.n	8007470 <_puts_r+0x60>
 8007466:	69a2      	ldr	r2, [r4, #24]
 8007468:	429a      	cmp	r2, r3
 800746a:	dc17      	bgt.n	800749c <_puts_r+0x8c>
 800746c:	290a      	cmp	r1, #10
 800746e:	d015      	beq.n	800749c <_puts_r+0x8c>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	1c5a      	adds	r2, r3, #1
 8007474:	6022      	str	r2, [r4, #0]
 8007476:	7019      	strb	r1, [r3, #0]
 8007478:	68a3      	ldr	r3, [r4, #8]
 800747a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800747e:	3b01      	subs	r3, #1
 8007480:	60a3      	str	r3, [r4, #8]
 8007482:	2900      	cmp	r1, #0
 8007484:	d1ed      	bne.n	8007462 <_puts_r+0x52>
 8007486:	2b00      	cmp	r3, #0
 8007488:	da11      	bge.n	80074ae <_puts_r+0x9e>
 800748a:	4622      	mov	r2, r4
 800748c:	210a      	movs	r1, #10
 800748e:	4628      	mov	r0, r5
 8007490:	f000 f85f 	bl	8007552 <__swbuf_r>
 8007494:	3001      	adds	r0, #1
 8007496:	d0d7      	beq.n	8007448 <_puts_r+0x38>
 8007498:	250a      	movs	r5, #10
 800749a:	e7d7      	b.n	800744c <_puts_r+0x3c>
 800749c:	4622      	mov	r2, r4
 800749e:	4628      	mov	r0, r5
 80074a0:	f000 f857 	bl	8007552 <__swbuf_r>
 80074a4:	3001      	adds	r0, #1
 80074a6:	d1e7      	bne.n	8007478 <_puts_r+0x68>
 80074a8:	e7ce      	b.n	8007448 <_puts_r+0x38>
 80074aa:	3e01      	subs	r6, #1
 80074ac:	e7e4      	b.n	8007478 <_puts_r+0x68>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	6022      	str	r2, [r4, #0]
 80074b4:	220a      	movs	r2, #10
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e7ee      	b.n	8007498 <_puts_r+0x88>
	...

080074bc <puts>:
 80074bc:	4b02      	ldr	r3, [pc, #8]	@ (80074c8 <puts+0xc>)
 80074be:	4601      	mov	r1, r0
 80074c0:	6818      	ldr	r0, [r3, #0]
 80074c2:	f7ff bfa5 	b.w	8007410 <_puts_r>
 80074c6:	bf00      	nop
 80074c8:	2000012c 	.word	0x2000012c

080074cc <__sread>:
 80074cc:	b510      	push	{r4, lr}
 80074ce:	460c      	mov	r4, r1
 80074d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074d4:	f000 f958 	bl	8007788 <_read_r>
 80074d8:	2800      	cmp	r0, #0
 80074da:	bfab      	itete	ge
 80074dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074de:	89a3      	ldrhlt	r3, [r4, #12]
 80074e0:	181b      	addge	r3, r3, r0
 80074e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074e6:	bfac      	ite	ge
 80074e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074ea:	81a3      	strhlt	r3, [r4, #12]
 80074ec:	bd10      	pop	{r4, pc}

080074ee <__swrite>:
 80074ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074f2:	461f      	mov	r7, r3
 80074f4:	898b      	ldrh	r3, [r1, #12]
 80074f6:	05db      	lsls	r3, r3, #23
 80074f8:	4605      	mov	r5, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	4616      	mov	r6, r2
 80074fe:	d505      	bpl.n	800750c <__swrite+0x1e>
 8007500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007504:	2302      	movs	r3, #2
 8007506:	2200      	movs	r2, #0
 8007508:	f000 f92c 	bl	8007764 <_lseek_r>
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007512:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007516:	81a3      	strh	r3, [r4, #12]
 8007518:	4632      	mov	r2, r6
 800751a:	463b      	mov	r3, r7
 800751c:	4628      	mov	r0, r5
 800751e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007522:	f000 b943 	b.w	80077ac <_write_r>

08007526 <__sseek>:
 8007526:	b510      	push	{r4, lr}
 8007528:	460c      	mov	r4, r1
 800752a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752e:	f000 f919 	bl	8007764 <_lseek_r>
 8007532:	1c43      	adds	r3, r0, #1
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	bf15      	itete	ne
 8007538:	6560      	strne	r0, [r4, #84]	@ 0x54
 800753a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800753e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007542:	81a3      	strheq	r3, [r4, #12]
 8007544:	bf18      	it	ne
 8007546:	81a3      	strhne	r3, [r4, #12]
 8007548:	bd10      	pop	{r4, pc}

0800754a <__sclose>:
 800754a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800754e:	f000 b8f9 	b.w	8007744 <_close_r>

08007552 <__swbuf_r>:
 8007552:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007554:	460e      	mov	r6, r1
 8007556:	4614      	mov	r4, r2
 8007558:	4605      	mov	r5, r0
 800755a:	b118      	cbz	r0, 8007564 <__swbuf_r+0x12>
 800755c:	6a03      	ldr	r3, [r0, #32]
 800755e:	b90b      	cbnz	r3, 8007564 <__swbuf_r+0x12>
 8007560:	f7ff ff0e 	bl	8007380 <__sinit>
 8007564:	69a3      	ldr	r3, [r4, #24]
 8007566:	60a3      	str	r3, [r4, #8]
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	071a      	lsls	r2, r3, #28
 800756c:	d501      	bpl.n	8007572 <__swbuf_r+0x20>
 800756e:	6923      	ldr	r3, [r4, #16]
 8007570:	b943      	cbnz	r3, 8007584 <__swbuf_r+0x32>
 8007572:	4621      	mov	r1, r4
 8007574:	4628      	mov	r0, r5
 8007576:	f000 f82b 	bl	80075d0 <__swsetup_r>
 800757a:	b118      	cbz	r0, 8007584 <__swbuf_r+0x32>
 800757c:	f04f 37ff 	mov.w	r7, #4294967295
 8007580:	4638      	mov	r0, r7
 8007582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	6922      	ldr	r2, [r4, #16]
 8007588:	1a98      	subs	r0, r3, r2
 800758a:	6963      	ldr	r3, [r4, #20]
 800758c:	b2f6      	uxtb	r6, r6
 800758e:	4283      	cmp	r3, r0
 8007590:	4637      	mov	r7, r6
 8007592:	dc05      	bgt.n	80075a0 <__swbuf_r+0x4e>
 8007594:	4621      	mov	r1, r4
 8007596:	4628      	mov	r0, r5
 8007598:	f000 fdba 	bl	8008110 <_fflush_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	d1ed      	bne.n	800757c <__swbuf_r+0x2a>
 80075a0:	68a3      	ldr	r3, [r4, #8]
 80075a2:	3b01      	subs	r3, #1
 80075a4:	60a3      	str	r3, [r4, #8]
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	6022      	str	r2, [r4, #0]
 80075ac:	701e      	strb	r6, [r3, #0]
 80075ae:	6962      	ldr	r2, [r4, #20]
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d004      	beq.n	80075c0 <__swbuf_r+0x6e>
 80075b6:	89a3      	ldrh	r3, [r4, #12]
 80075b8:	07db      	lsls	r3, r3, #31
 80075ba:	d5e1      	bpl.n	8007580 <__swbuf_r+0x2e>
 80075bc:	2e0a      	cmp	r6, #10
 80075be:	d1df      	bne.n	8007580 <__swbuf_r+0x2e>
 80075c0:	4621      	mov	r1, r4
 80075c2:	4628      	mov	r0, r5
 80075c4:	f000 fda4 	bl	8008110 <_fflush_r>
 80075c8:	2800      	cmp	r0, #0
 80075ca:	d0d9      	beq.n	8007580 <__swbuf_r+0x2e>
 80075cc:	e7d6      	b.n	800757c <__swbuf_r+0x2a>
	...

080075d0 <__swsetup_r>:
 80075d0:	b538      	push	{r3, r4, r5, lr}
 80075d2:	4b29      	ldr	r3, [pc, #164]	@ (8007678 <__swsetup_r+0xa8>)
 80075d4:	4605      	mov	r5, r0
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	460c      	mov	r4, r1
 80075da:	b118      	cbz	r0, 80075e4 <__swsetup_r+0x14>
 80075dc:	6a03      	ldr	r3, [r0, #32]
 80075de:	b90b      	cbnz	r3, 80075e4 <__swsetup_r+0x14>
 80075e0:	f7ff fece 	bl	8007380 <__sinit>
 80075e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e8:	0719      	lsls	r1, r3, #28
 80075ea:	d422      	bmi.n	8007632 <__swsetup_r+0x62>
 80075ec:	06da      	lsls	r2, r3, #27
 80075ee:	d407      	bmi.n	8007600 <__swsetup_r+0x30>
 80075f0:	2209      	movs	r2, #9
 80075f2:	602a      	str	r2, [r5, #0]
 80075f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075f8:	81a3      	strh	r3, [r4, #12]
 80075fa:	f04f 30ff 	mov.w	r0, #4294967295
 80075fe:	e033      	b.n	8007668 <__swsetup_r+0x98>
 8007600:	0758      	lsls	r0, r3, #29
 8007602:	d512      	bpl.n	800762a <__swsetup_r+0x5a>
 8007604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007606:	b141      	cbz	r1, 800761a <__swsetup_r+0x4a>
 8007608:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800760c:	4299      	cmp	r1, r3
 800760e:	d002      	beq.n	8007616 <__swsetup_r+0x46>
 8007610:	4628      	mov	r0, r5
 8007612:	f000 f929 	bl	8007868 <_free_r>
 8007616:	2300      	movs	r3, #0
 8007618:	6363      	str	r3, [r4, #52]	@ 0x34
 800761a:	89a3      	ldrh	r3, [r4, #12]
 800761c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	2300      	movs	r3, #0
 8007624:	6063      	str	r3, [r4, #4]
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	6023      	str	r3, [r4, #0]
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	f043 0308 	orr.w	r3, r3, #8
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	6923      	ldr	r3, [r4, #16]
 8007634:	b94b      	cbnz	r3, 800764a <__swsetup_r+0x7a>
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800763c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007640:	d003      	beq.n	800764a <__swsetup_r+0x7a>
 8007642:	4621      	mov	r1, r4
 8007644:	4628      	mov	r0, r5
 8007646:	f000 fdc3 	bl	80081d0 <__smakebuf_r>
 800764a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800764e:	f013 0201 	ands.w	r2, r3, #1
 8007652:	d00a      	beq.n	800766a <__swsetup_r+0x9a>
 8007654:	2200      	movs	r2, #0
 8007656:	60a2      	str	r2, [r4, #8]
 8007658:	6962      	ldr	r2, [r4, #20]
 800765a:	4252      	negs	r2, r2
 800765c:	61a2      	str	r2, [r4, #24]
 800765e:	6922      	ldr	r2, [r4, #16]
 8007660:	b942      	cbnz	r2, 8007674 <__swsetup_r+0xa4>
 8007662:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007666:	d1c5      	bne.n	80075f4 <__swsetup_r+0x24>
 8007668:	bd38      	pop	{r3, r4, r5, pc}
 800766a:	0799      	lsls	r1, r3, #30
 800766c:	bf58      	it	pl
 800766e:	6962      	ldrpl	r2, [r4, #20]
 8007670:	60a2      	str	r2, [r4, #8]
 8007672:	e7f4      	b.n	800765e <__swsetup_r+0x8e>
 8007674:	2000      	movs	r0, #0
 8007676:	e7f7      	b.n	8007668 <__swsetup_r+0x98>
 8007678:	2000012c 	.word	0x2000012c

0800767c <memset>:
 800767c:	4402      	add	r2, r0
 800767e:	4603      	mov	r3, r0
 8007680:	4293      	cmp	r3, r2
 8007682:	d100      	bne.n	8007686 <memset+0xa>
 8007684:	4770      	bx	lr
 8007686:	f803 1b01 	strb.w	r1, [r3], #1
 800768a:	e7f9      	b.n	8007680 <memset+0x4>

0800768c <strtok>:
 800768c:	4b16      	ldr	r3, [pc, #88]	@ (80076e8 <strtok+0x5c>)
 800768e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007692:	681f      	ldr	r7, [r3, #0]
 8007694:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8007696:	4605      	mov	r5, r0
 8007698:	460e      	mov	r6, r1
 800769a:	b9ec      	cbnz	r4, 80076d8 <strtok+0x4c>
 800769c:	2050      	movs	r0, #80	@ 0x50
 800769e:	f000 f92d 	bl	80078fc <malloc>
 80076a2:	4602      	mov	r2, r0
 80076a4:	6478      	str	r0, [r7, #68]	@ 0x44
 80076a6:	b920      	cbnz	r0, 80076b2 <strtok+0x26>
 80076a8:	4b10      	ldr	r3, [pc, #64]	@ (80076ec <strtok+0x60>)
 80076aa:	4811      	ldr	r0, [pc, #68]	@ (80076f0 <strtok+0x64>)
 80076ac:	215b      	movs	r1, #91	@ 0x5b
 80076ae:	f000 f8bd 	bl	800782c <__assert_func>
 80076b2:	e9c0 4400 	strd	r4, r4, [r0]
 80076b6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80076ba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80076be:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80076c2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80076c6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80076ca:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80076ce:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80076d2:	6184      	str	r4, [r0, #24]
 80076d4:	7704      	strb	r4, [r0, #28]
 80076d6:	6244      	str	r4, [r0, #36]	@ 0x24
 80076d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	2301      	movs	r3, #1
 80076e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076e4:	f000 b806 	b.w	80076f4 <__strtok_r>
 80076e8:	2000012c 	.word	0x2000012c
 80076ec:	08008735 	.word	0x08008735
 80076f0:	0800874c 	.word	0x0800874c

080076f4 <__strtok_r>:
 80076f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076f6:	4604      	mov	r4, r0
 80076f8:	b908      	cbnz	r0, 80076fe <__strtok_r+0xa>
 80076fa:	6814      	ldr	r4, [r2, #0]
 80076fc:	b144      	cbz	r4, 8007710 <__strtok_r+0x1c>
 80076fe:	4620      	mov	r0, r4
 8007700:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007704:	460f      	mov	r7, r1
 8007706:	f817 6b01 	ldrb.w	r6, [r7], #1
 800770a:	b91e      	cbnz	r6, 8007714 <__strtok_r+0x20>
 800770c:	b965      	cbnz	r5, 8007728 <__strtok_r+0x34>
 800770e:	6015      	str	r5, [r2, #0]
 8007710:	2000      	movs	r0, #0
 8007712:	e005      	b.n	8007720 <__strtok_r+0x2c>
 8007714:	42b5      	cmp	r5, r6
 8007716:	d1f6      	bne.n	8007706 <__strtok_r+0x12>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f0      	bne.n	80076fe <__strtok_r+0xa>
 800771c:	6014      	str	r4, [r2, #0]
 800771e:	7003      	strb	r3, [r0, #0]
 8007720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007722:	461c      	mov	r4, r3
 8007724:	e00c      	b.n	8007740 <__strtok_r+0x4c>
 8007726:	b915      	cbnz	r5, 800772e <__strtok_r+0x3a>
 8007728:	f814 3b01 	ldrb.w	r3, [r4], #1
 800772c:	460e      	mov	r6, r1
 800772e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007732:	42ab      	cmp	r3, r5
 8007734:	d1f7      	bne.n	8007726 <__strtok_r+0x32>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d0f3      	beq.n	8007722 <__strtok_r+0x2e>
 800773a:	2300      	movs	r3, #0
 800773c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007740:	6014      	str	r4, [r2, #0]
 8007742:	e7ed      	b.n	8007720 <__strtok_r+0x2c>

08007744 <_close_r>:
 8007744:	b538      	push	{r3, r4, r5, lr}
 8007746:	4d06      	ldr	r5, [pc, #24]	@ (8007760 <_close_r+0x1c>)
 8007748:	2300      	movs	r3, #0
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	602b      	str	r3, [r5, #0]
 8007750:	f7f9 fc6a 	bl	8001028 <_close>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	d102      	bne.n	800775e <_close_r+0x1a>
 8007758:	682b      	ldr	r3, [r5, #0]
 800775a:	b103      	cbz	r3, 800775e <_close_r+0x1a>
 800775c:	6023      	str	r3, [r4, #0]
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	20002f44 	.word	0x20002f44

08007764 <_lseek_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d07      	ldr	r5, [pc, #28]	@ (8007784 <_lseek_r+0x20>)
 8007768:	4604      	mov	r4, r0
 800776a:	4608      	mov	r0, r1
 800776c:	4611      	mov	r1, r2
 800776e:	2200      	movs	r2, #0
 8007770:	602a      	str	r2, [r5, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	f7f9 fc7f 	bl	8001076 <_lseek>
 8007778:	1c43      	adds	r3, r0, #1
 800777a:	d102      	bne.n	8007782 <_lseek_r+0x1e>
 800777c:	682b      	ldr	r3, [r5, #0]
 800777e:	b103      	cbz	r3, 8007782 <_lseek_r+0x1e>
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	20002f44 	.word	0x20002f44

08007788 <_read_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	4d07      	ldr	r5, [pc, #28]	@ (80077a8 <_read_r+0x20>)
 800778c:	4604      	mov	r4, r0
 800778e:	4608      	mov	r0, r1
 8007790:	4611      	mov	r1, r2
 8007792:	2200      	movs	r2, #0
 8007794:	602a      	str	r2, [r5, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	f7f9 fc0d 	bl	8000fb6 <_read>
 800779c:	1c43      	adds	r3, r0, #1
 800779e:	d102      	bne.n	80077a6 <_read_r+0x1e>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	b103      	cbz	r3, 80077a6 <_read_r+0x1e>
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	bd38      	pop	{r3, r4, r5, pc}
 80077a8:	20002f44 	.word	0x20002f44

080077ac <_write_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	@ (80077cc <_write_r+0x20>)
 80077b0:	4604      	mov	r4, r0
 80077b2:	4608      	mov	r0, r1
 80077b4:	4611      	mov	r1, r2
 80077b6:	2200      	movs	r2, #0
 80077b8:	602a      	str	r2, [r5, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f7f9 fc18 	bl	8000ff0 <_write>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_write_r+0x1e>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_write_r+0x1e>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	20002f44 	.word	0x20002f44

080077d0 <__errno>:
 80077d0:	4b01      	ldr	r3, [pc, #4]	@ (80077d8 <__errno+0x8>)
 80077d2:	6818      	ldr	r0, [r3, #0]
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	2000012c 	.word	0x2000012c

080077dc <__libc_init_array>:
 80077dc:	b570      	push	{r4, r5, r6, lr}
 80077de:	4d0d      	ldr	r5, [pc, #52]	@ (8007814 <__libc_init_array+0x38>)
 80077e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007818 <__libc_init_array+0x3c>)
 80077e2:	1b64      	subs	r4, r4, r5
 80077e4:	10a4      	asrs	r4, r4, #2
 80077e6:	2600      	movs	r6, #0
 80077e8:	42a6      	cmp	r6, r4
 80077ea:	d109      	bne.n	8007800 <__libc_init_array+0x24>
 80077ec:	4d0b      	ldr	r5, [pc, #44]	@ (800781c <__libc_init_array+0x40>)
 80077ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007820 <__libc_init_array+0x44>)
 80077f0:	f000 fda8 	bl	8008344 <_init>
 80077f4:	1b64      	subs	r4, r4, r5
 80077f6:	10a4      	asrs	r4, r4, #2
 80077f8:	2600      	movs	r6, #0
 80077fa:	42a6      	cmp	r6, r4
 80077fc:	d105      	bne.n	800780a <__libc_init_array+0x2e>
 80077fe:	bd70      	pop	{r4, r5, r6, pc}
 8007800:	f855 3b04 	ldr.w	r3, [r5], #4
 8007804:	4798      	blx	r3
 8007806:	3601      	adds	r6, #1
 8007808:	e7ee      	b.n	80077e8 <__libc_init_array+0xc>
 800780a:	f855 3b04 	ldr.w	r3, [r5], #4
 800780e:	4798      	blx	r3
 8007810:	3601      	adds	r6, #1
 8007812:	e7f2      	b.n	80077fa <__libc_init_array+0x1e>
 8007814:	08008820 	.word	0x08008820
 8007818:	08008820 	.word	0x08008820
 800781c:	08008820 	.word	0x08008820
 8007820:	08008824 	.word	0x08008824

08007824 <__retarget_lock_init_recursive>:
 8007824:	4770      	bx	lr

08007826 <__retarget_lock_acquire_recursive>:
 8007826:	4770      	bx	lr

08007828 <__retarget_lock_release_recursive>:
 8007828:	4770      	bx	lr
	...

0800782c <__assert_func>:
 800782c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800782e:	4614      	mov	r4, r2
 8007830:	461a      	mov	r2, r3
 8007832:	4b09      	ldr	r3, [pc, #36]	@ (8007858 <__assert_func+0x2c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4605      	mov	r5, r0
 8007838:	68d8      	ldr	r0, [r3, #12]
 800783a:	b954      	cbnz	r4, 8007852 <__assert_func+0x26>
 800783c:	4b07      	ldr	r3, [pc, #28]	@ (800785c <__assert_func+0x30>)
 800783e:	461c      	mov	r4, r3
 8007840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007844:	9100      	str	r1, [sp, #0]
 8007846:	462b      	mov	r3, r5
 8007848:	4905      	ldr	r1, [pc, #20]	@ (8007860 <__assert_func+0x34>)
 800784a:	f000 fc89 	bl	8008160 <fiprintf>
 800784e:	f000 fd2d 	bl	80082ac <abort>
 8007852:	4b04      	ldr	r3, [pc, #16]	@ (8007864 <__assert_func+0x38>)
 8007854:	e7f4      	b.n	8007840 <__assert_func+0x14>
 8007856:	bf00      	nop
 8007858:	2000012c 	.word	0x2000012c
 800785c:	080087e1 	.word	0x080087e1
 8007860:	080087b3 	.word	0x080087b3
 8007864:	080087a6 	.word	0x080087a6

08007868 <_free_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4605      	mov	r5, r0
 800786c:	2900      	cmp	r1, #0
 800786e:	d041      	beq.n	80078f4 <_free_r+0x8c>
 8007870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007874:	1f0c      	subs	r4, r1, #4
 8007876:	2b00      	cmp	r3, #0
 8007878:	bfb8      	it	lt
 800787a:	18e4      	addlt	r4, r4, r3
 800787c:	f000 f8e8 	bl	8007a50 <__malloc_lock>
 8007880:	4a1d      	ldr	r2, [pc, #116]	@ (80078f8 <_free_r+0x90>)
 8007882:	6813      	ldr	r3, [r2, #0]
 8007884:	b933      	cbnz	r3, 8007894 <_free_r+0x2c>
 8007886:	6063      	str	r3, [r4, #4]
 8007888:	6014      	str	r4, [r2, #0]
 800788a:	4628      	mov	r0, r5
 800788c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007890:	f000 b8e4 	b.w	8007a5c <__malloc_unlock>
 8007894:	42a3      	cmp	r3, r4
 8007896:	d908      	bls.n	80078aa <_free_r+0x42>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	1821      	adds	r1, r4, r0
 800789c:	428b      	cmp	r3, r1
 800789e:	bf01      	itttt	eq
 80078a0:	6819      	ldreq	r1, [r3, #0]
 80078a2:	685b      	ldreq	r3, [r3, #4]
 80078a4:	1809      	addeq	r1, r1, r0
 80078a6:	6021      	streq	r1, [r4, #0]
 80078a8:	e7ed      	b.n	8007886 <_free_r+0x1e>
 80078aa:	461a      	mov	r2, r3
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	b10b      	cbz	r3, 80078b4 <_free_r+0x4c>
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	d9fa      	bls.n	80078aa <_free_r+0x42>
 80078b4:	6811      	ldr	r1, [r2, #0]
 80078b6:	1850      	adds	r0, r2, r1
 80078b8:	42a0      	cmp	r0, r4
 80078ba:	d10b      	bne.n	80078d4 <_free_r+0x6c>
 80078bc:	6820      	ldr	r0, [r4, #0]
 80078be:	4401      	add	r1, r0
 80078c0:	1850      	adds	r0, r2, r1
 80078c2:	4283      	cmp	r3, r0
 80078c4:	6011      	str	r1, [r2, #0]
 80078c6:	d1e0      	bne.n	800788a <_free_r+0x22>
 80078c8:	6818      	ldr	r0, [r3, #0]
 80078ca:	685b      	ldr	r3, [r3, #4]
 80078cc:	6053      	str	r3, [r2, #4]
 80078ce:	4408      	add	r0, r1
 80078d0:	6010      	str	r0, [r2, #0]
 80078d2:	e7da      	b.n	800788a <_free_r+0x22>
 80078d4:	d902      	bls.n	80078dc <_free_r+0x74>
 80078d6:	230c      	movs	r3, #12
 80078d8:	602b      	str	r3, [r5, #0]
 80078da:	e7d6      	b.n	800788a <_free_r+0x22>
 80078dc:	6820      	ldr	r0, [r4, #0]
 80078de:	1821      	adds	r1, r4, r0
 80078e0:	428b      	cmp	r3, r1
 80078e2:	bf04      	itt	eq
 80078e4:	6819      	ldreq	r1, [r3, #0]
 80078e6:	685b      	ldreq	r3, [r3, #4]
 80078e8:	6063      	str	r3, [r4, #4]
 80078ea:	bf04      	itt	eq
 80078ec:	1809      	addeq	r1, r1, r0
 80078ee:	6021      	streq	r1, [r4, #0]
 80078f0:	6054      	str	r4, [r2, #4]
 80078f2:	e7ca      	b.n	800788a <_free_r+0x22>
 80078f4:	bd38      	pop	{r3, r4, r5, pc}
 80078f6:	bf00      	nop
 80078f8:	20002f50 	.word	0x20002f50

080078fc <malloc>:
 80078fc:	4b02      	ldr	r3, [pc, #8]	@ (8007908 <malloc+0xc>)
 80078fe:	4601      	mov	r1, r0
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	f000 b825 	b.w	8007950 <_malloc_r>
 8007906:	bf00      	nop
 8007908:	2000012c 	.word	0x2000012c

0800790c <sbrk_aligned>:
 800790c:	b570      	push	{r4, r5, r6, lr}
 800790e:	4e0f      	ldr	r6, [pc, #60]	@ (800794c <sbrk_aligned+0x40>)
 8007910:	460c      	mov	r4, r1
 8007912:	6831      	ldr	r1, [r6, #0]
 8007914:	4605      	mov	r5, r0
 8007916:	b911      	cbnz	r1, 800791e <sbrk_aligned+0x12>
 8007918:	f000 fcb8 	bl	800828c <_sbrk_r>
 800791c:	6030      	str	r0, [r6, #0]
 800791e:	4621      	mov	r1, r4
 8007920:	4628      	mov	r0, r5
 8007922:	f000 fcb3 	bl	800828c <_sbrk_r>
 8007926:	1c43      	adds	r3, r0, #1
 8007928:	d103      	bne.n	8007932 <sbrk_aligned+0x26>
 800792a:	f04f 34ff 	mov.w	r4, #4294967295
 800792e:	4620      	mov	r0, r4
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	1cc4      	adds	r4, r0, #3
 8007934:	f024 0403 	bic.w	r4, r4, #3
 8007938:	42a0      	cmp	r0, r4
 800793a:	d0f8      	beq.n	800792e <sbrk_aligned+0x22>
 800793c:	1a21      	subs	r1, r4, r0
 800793e:	4628      	mov	r0, r5
 8007940:	f000 fca4 	bl	800828c <_sbrk_r>
 8007944:	3001      	adds	r0, #1
 8007946:	d1f2      	bne.n	800792e <sbrk_aligned+0x22>
 8007948:	e7ef      	b.n	800792a <sbrk_aligned+0x1e>
 800794a:	bf00      	nop
 800794c:	20002f4c 	.word	0x20002f4c

08007950 <_malloc_r>:
 8007950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007954:	1ccd      	adds	r5, r1, #3
 8007956:	f025 0503 	bic.w	r5, r5, #3
 800795a:	3508      	adds	r5, #8
 800795c:	2d0c      	cmp	r5, #12
 800795e:	bf38      	it	cc
 8007960:	250c      	movcc	r5, #12
 8007962:	2d00      	cmp	r5, #0
 8007964:	4606      	mov	r6, r0
 8007966:	db01      	blt.n	800796c <_malloc_r+0x1c>
 8007968:	42a9      	cmp	r1, r5
 800796a:	d904      	bls.n	8007976 <_malloc_r+0x26>
 800796c:	230c      	movs	r3, #12
 800796e:	6033      	str	r3, [r6, #0]
 8007970:	2000      	movs	r0, #0
 8007972:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007976:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a4c <_malloc_r+0xfc>
 800797a:	f000 f869 	bl	8007a50 <__malloc_lock>
 800797e:	f8d8 3000 	ldr.w	r3, [r8]
 8007982:	461c      	mov	r4, r3
 8007984:	bb44      	cbnz	r4, 80079d8 <_malloc_r+0x88>
 8007986:	4629      	mov	r1, r5
 8007988:	4630      	mov	r0, r6
 800798a:	f7ff ffbf 	bl	800790c <sbrk_aligned>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	4604      	mov	r4, r0
 8007992:	d158      	bne.n	8007a46 <_malloc_r+0xf6>
 8007994:	f8d8 4000 	ldr.w	r4, [r8]
 8007998:	4627      	mov	r7, r4
 800799a:	2f00      	cmp	r7, #0
 800799c:	d143      	bne.n	8007a26 <_malloc_r+0xd6>
 800799e:	2c00      	cmp	r4, #0
 80079a0:	d04b      	beq.n	8007a3a <_malloc_r+0xea>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	4639      	mov	r1, r7
 80079a6:	4630      	mov	r0, r6
 80079a8:	eb04 0903 	add.w	r9, r4, r3
 80079ac:	f000 fc6e 	bl	800828c <_sbrk_r>
 80079b0:	4581      	cmp	r9, r0
 80079b2:	d142      	bne.n	8007a3a <_malloc_r+0xea>
 80079b4:	6821      	ldr	r1, [r4, #0]
 80079b6:	1a6d      	subs	r5, r5, r1
 80079b8:	4629      	mov	r1, r5
 80079ba:	4630      	mov	r0, r6
 80079bc:	f7ff ffa6 	bl	800790c <sbrk_aligned>
 80079c0:	3001      	adds	r0, #1
 80079c2:	d03a      	beq.n	8007a3a <_malloc_r+0xea>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	442b      	add	r3, r5
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	f8d8 3000 	ldr.w	r3, [r8]
 80079ce:	685a      	ldr	r2, [r3, #4]
 80079d0:	bb62      	cbnz	r2, 8007a2c <_malloc_r+0xdc>
 80079d2:	f8c8 7000 	str.w	r7, [r8]
 80079d6:	e00f      	b.n	80079f8 <_malloc_r+0xa8>
 80079d8:	6822      	ldr	r2, [r4, #0]
 80079da:	1b52      	subs	r2, r2, r5
 80079dc:	d420      	bmi.n	8007a20 <_malloc_r+0xd0>
 80079de:	2a0b      	cmp	r2, #11
 80079e0:	d917      	bls.n	8007a12 <_malloc_r+0xc2>
 80079e2:	1961      	adds	r1, r4, r5
 80079e4:	42a3      	cmp	r3, r4
 80079e6:	6025      	str	r5, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	6059      	strne	r1, [r3, #4]
 80079ec:	6863      	ldr	r3, [r4, #4]
 80079ee:	bf08      	it	eq
 80079f0:	f8c8 1000 	streq.w	r1, [r8]
 80079f4:	5162      	str	r2, [r4, r5]
 80079f6:	604b      	str	r3, [r1, #4]
 80079f8:	4630      	mov	r0, r6
 80079fa:	f000 f82f 	bl	8007a5c <__malloc_unlock>
 80079fe:	f104 000b 	add.w	r0, r4, #11
 8007a02:	1d23      	adds	r3, r4, #4
 8007a04:	f020 0007 	bic.w	r0, r0, #7
 8007a08:	1ac2      	subs	r2, r0, r3
 8007a0a:	bf1c      	itt	ne
 8007a0c:	1a1b      	subne	r3, r3, r0
 8007a0e:	50a3      	strne	r3, [r4, r2]
 8007a10:	e7af      	b.n	8007972 <_malloc_r+0x22>
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	bf0c      	ite	eq
 8007a18:	f8c8 2000 	streq.w	r2, [r8]
 8007a1c:	605a      	strne	r2, [r3, #4]
 8007a1e:	e7eb      	b.n	80079f8 <_malloc_r+0xa8>
 8007a20:	4623      	mov	r3, r4
 8007a22:	6864      	ldr	r4, [r4, #4]
 8007a24:	e7ae      	b.n	8007984 <_malloc_r+0x34>
 8007a26:	463c      	mov	r4, r7
 8007a28:	687f      	ldr	r7, [r7, #4]
 8007a2a:	e7b6      	b.n	800799a <_malloc_r+0x4a>
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d1fb      	bne.n	8007a2c <_malloc_r+0xdc>
 8007a34:	2300      	movs	r3, #0
 8007a36:	6053      	str	r3, [r2, #4]
 8007a38:	e7de      	b.n	80079f8 <_malloc_r+0xa8>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	6033      	str	r3, [r6, #0]
 8007a3e:	4630      	mov	r0, r6
 8007a40:	f000 f80c 	bl	8007a5c <__malloc_unlock>
 8007a44:	e794      	b.n	8007970 <_malloc_r+0x20>
 8007a46:	6005      	str	r5, [r0, #0]
 8007a48:	e7d6      	b.n	80079f8 <_malloc_r+0xa8>
 8007a4a:	bf00      	nop
 8007a4c:	20002f50 	.word	0x20002f50

08007a50 <__malloc_lock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	@ (8007a58 <__malloc_lock+0x8>)
 8007a52:	f7ff bee8 	b.w	8007826 <__retarget_lock_acquire_recursive>
 8007a56:	bf00      	nop
 8007a58:	20002f48 	.word	0x20002f48

08007a5c <__malloc_unlock>:
 8007a5c:	4801      	ldr	r0, [pc, #4]	@ (8007a64 <__malloc_unlock+0x8>)
 8007a5e:	f7ff bee3 	b.w	8007828 <__retarget_lock_release_recursive>
 8007a62:	bf00      	nop
 8007a64:	20002f48 	.word	0x20002f48

08007a68 <__sfputc_r>:
 8007a68:	6893      	ldr	r3, [r2, #8]
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	b410      	push	{r4}
 8007a70:	6093      	str	r3, [r2, #8]
 8007a72:	da08      	bge.n	8007a86 <__sfputc_r+0x1e>
 8007a74:	6994      	ldr	r4, [r2, #24]
 8007a76:	42a3      	cmp	r3, r4
 8007a78:	db01      	blt.n	8007a7e <__sfputc_r+0x16>
 8007a7a:	290a      	cmp	r1, #10
 8007a7c:	d103      	bne.n	8007a86 <__sfputc_r+0x1e>
 8007a7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a82:	f7ff bd66 	b.w	8007552 <__swbuf_r>
 8007a86:	6813      	ldr	r3, [r2, #0]
 8007a88:	1c58      	adds	r0, r3, #1
 8007a8a:	6010      	str	r0, [r2, #0]
 8007a8c:	7019      	strb	r1, [r3, #0]
 8007a8e:	4608      	mov	r0, r1
 8007a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <__sfputs_r>:
 8007a96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a98:	4606      	mov	r6, r0
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	4614      	mov	r4, r2
 8007a9e:	18d5      	adds	r5, r2, r3
 8007aa0:	42ac      	cmp	r4, r5
 8007aa2:	d101      	bne.n	8007aa8 <__sfputs_r+0x12>
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e007      	b.n	8007ab8 <__sfputs_r+0x22>
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	463a      	mov	r2, r7
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f7ff ffda 	bl	8007a68 <__sfputc_r>
 8007ab4:	1c43      	adds	r3, r0, #1
 8007ab6:	d1f3      	bne.n	8007aa0 <__sfputs_r+0xa>
 8007ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007abc <_vfiprintf_r>:
 8007abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac0:	460d      	mov	r5, r1
 8007ac2:	b09d      	sub	sp, #116	@ 0x74
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	4698      	mov	r8, r3
 8007ac8:	4606      	mov	r6, r0
 8007aca:	b118      	cbz	r0, 8007ad4 <_vfiprintf_r+0x18>
 8007acc:	6a03      	ldr	r3, [r0, #32]
 8007ace:	b90b      	cbnz	r3, 8007ad4 <_vfiprintf_r+0x18>
 8007ad0:	f7ff fc56 	bl	8007380 <__sinit>
 8007ad4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ad6:	07d9      	lsls	r1, r3, #31
 8007ad8:	d405      	bmi.n	8007ae6 <_vfiprintf_r+0x2a>
 8007ada:	89ab      	ldrh	r3, [r5, #12]
 8007adc:	059a      	lsls	r2, r3, #22
 8007ade:	d402      	bmi.n	8007ae6 <_vfiprintf_r+0x2a>
 8007ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ae2:	f7ff fea0 	bl	8007826 <__retarget_lock_acquire_recursive>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	071b      	lsls	r3, r3, #28
 8007aea:	d501      	bpl.n	8007af0 <_vfiprintf_r+0x34>
 8007aec:	692b      	ldr	r3, [r5, #16]
 8007aee:	b99b      	cbnz	r3, 8007b18 <_vfiprintf_r+0x5c>
 8007af0:	4629      	mov	r1, r5
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7ff fd6c 	bl	80075d0 <__swsetup_r>
 8007af8:	b170      	cbz	r0, 8007b18 <_vfiprintf_r+0x5c>
 8007afa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007afc:	07dc      	lsls	r4, r3, #31
 8007afe:	d504      	bpl.n	8007b0a <_vfiprintf_r+0x4e>
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	b01d      	add	sp, #116	@ 0x74
 8007b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0a:	89ab      	ldrh	r3, [r5, #12]
 8007b0c:	0598      	lsls	r0, r3, #22
 8007b0e:	d4f7      	bmi.n	8007b00 <_vfiprintf_r+0x44>
 8007b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b12:	f7ff fe89 	bl	8007828 <__retarget_lock_release_recursive>
 8007b16:	e7f3      	b.n	8007b00 <_vfiprintf_r+0x44>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b1c:	2320      	movs	r3, #32
 8007b1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b26:	2330      	movs	r3, #48	@ 0x30
 8007b28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007cd8 <_vfiprintf_r+0x21c>
 8007b2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b30:	f04f 0901 	mov.w	r9, #1
 8007b34:	4623      	mov	r3, r4
 8007b36:	469a      	mov	sl, r3
 8007b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b3c:	b10a      	cbz	r2, 8007b42 <_vfiprintf_r+0x86>
 8007b3e:	2a25      	cmp	r2, #37	@ 0x25
 8007b40:	d1f9      	bne.n	8007b36 <_vfiprintf_r+0x7a>
 8007b42:	ebba 0b04 	subs.w	fp, sl, r4
 8007b46:	d00b      	beq.n	8007b60 <_vfiprintf_r+0xa4>
 8007b48:	465b      	mov	r3, fp
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4630      	mov	r0, r6
 8007b50:	f7ff ffa1 	bl	8007a96 <__sfputs_r>
 8007b54:	3001      	adds	r0, #1
 8007b56:	f000 80a7 	beq.w	8007ca8 <_vfiprintf_r+0x1ec>
 8007b5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b5c:	445a      	add	r2, fp
 8007b5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b60:	f89a 3000 	ldrb.w	r3, [sl]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 809f 	beq.w	8007ca8 <_vfiprintf_r+0x1ec>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b74:	f10a 0a01 	add.w	sl, sl, #1
 8007b78:	9304      	str	r3, [sp, #16]
 8007b7a:	9307      	str	r3, [sp, #28]
 8007b7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b80:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b82:	4654      	mov	r4, sl
 8007b84:	2205      	movs	r2, #5
 8007b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b8a:	4853      	ldr	r0, [pc, #332]	@ (8007cd8 <_vfiprintf_r+0x21c>)
 8007b8c:	f7f8 fb38 	bl	8000200 <memchr>
 8007b90:	9a04      	ldr	r2, [sp, #16]
 8007b92:	b9d8      	cbnz	r0, 8007bcc <_vfiprintf_r+0x110>
 8007b94:	06d1      	lsls	r1, r2, #27
 8007b96:	bf44      	itt	mi
 8007b98:	2320      	movmi	r3, #32
 8007b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b9e:	0713      	lsls	r3, r2, #28
 8007ba0:	bf44      	itt	mi
 8007ba2:	232b      	movmi	r3, #43	@ 0x2b
 8007ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bae:	d015      	beq.n	8007bdc <_vfiprintf_r+0x120>
 8007bb0:	9a07      	ldr	r2, [sp, #28]
 8007bb2:	4654      	mov	r4, sl
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	f04f 0c0a 	mov.w	ip, #10
 8007bba:	4621      	mov	r1, r4
 8007bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bc0:	3b30      	subs	r3, #48	@ 0x30
 8007bc2:	2b09      	cmp	r3, #9
 8007bc4:	d94b      	bls.n	8007c5e <_vfiprintf_r+0x1a2>
 8007bc6:	b1b0      	cbz	r0, 8007bf6 <_vfiprintf_r+0x13a>
 8007bc8:	9207      	str	r2, [sp, #28]
 8007bca:	e014      	b.n	8007bf6 <_vfiprintf_r+0x13a>
 8007bcc:	eba0 0308 	sub.w	r3, r0, r8
 8007bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	46a2      	mov	sl, r4
 8007bda:	e7d2      	b.n	8007b82 <_vfiprintf_r+0xc6>
 8007bdc:	9b03      	ldr	r3, [sp, #12]
 8007bde:	1d19      	adds	r1, r3, #4
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	9103      	str	r1, [sp, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfbb      	ittet	lt
 8007be8:	425b      	neglt	r3, r3
 8007bea:	f042 0202 	orrlt.w	r2, r2, #2
 8007bee:	9307      	strge	r3, [sp, #28]
 8007bf0:	9307      	strlt	r3, [sp, #28]
 8007bf2:	bfb8      	it	lt
 8007bf4:	9204      	strlt	r2, [sp, #16]
 8007bf6:	7823      	ldrb	r3, [r4, #0]
 8007bf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bfa:	d10a      	bne.n	8007c12 <_vfiprintf_r+0x156>
 8007bfc:	7863      	ldrb	r3, [r4, #1]
 8007bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c00:	d132      	bne.n	8007c68 <_vfiprintf_r+0x1ac>
 8007c02:	9b03      	ldr	r3, [sp, #12]
 8007c04:	1d1a      	adds	r2, r3, #4
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	9203      	str	r2, [sp, #12]
 8007c0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c0e:	3402      	adds	r4, #2
 8007c10:	9305      	str	r3, [sp, #20]
 8007c12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ce8 <_vfiprintf_r+0x22c>
 8007c16:	7821      	ldrb	r1, [r4, #0]
 8007c18:	2203      	movs	r2, #3
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	f7f8 faf0 	bl	8000200 <memchr>
 8007c20:	b138      	cbz	r0, 8007c32 <_vfiprintf_r+0x176>
 8007c22:	9b04      	ldr	r3, [sp, #16]
 8007c24:	eba0 000a 	sub.w	r0, r0, sl
 8007c28:	2240      	movs	r2, #64	@ 0x40
 8007c2a:	4082      	lsls	r2, r0
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	3401      	adds	r4, #1
 8007c30:	9304      	str	r3, [sp, #16]
 8007c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c36:	4829      	ldr	r0, [pc, #164]	@ (8007cdc <_vfiprintf_r+0x220>)
 8007c38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c3c:	2206      	movs	r2, #6
 8007c3e:	f7f8 fadf 	bl	8000200 <memchr>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d03f      	beq.n	8007cc6 <_vfiprintf_r+0x20a>
 8007c46:	4b26      	ldr	r3, [pc, #152]	@ (8007ce0 <_vfiprintf_r+0x224>)
 8007c48:	bb1b      	cbnz	r3, 8007c92 <_vfiprintf_r+0x1d6>
 8007c4a:	9b03      	ldr	r3, [sp, #12]
 8007c4c:	3307      	adds	r3, #7
 8007c4e:	f023 0307 	bic.w	r3, r3, #7
 8007c52:	3308      	adds	r3, #8
 8007c54:	9303      	str	r3, [sp, #12]
 8007c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c58:	443b      	add	r3, r7
 8007c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c5c:	e76a      	b.n	8007b34 <_vfiprintf_r+0x78>
 8007c5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c62:	460c      	mov	r4, r1
 8007c64:	2001      	movs	r0, #1
 8007c66:	e7a8      	b.n	8007bba <_vfiprintf_r+0xfe>
 8007c68:	2300      	movs	r3, #0
 8007c6a:	3401      	adds	r4, #1
 8007c6c:	9305      	str	r3, [sp, #20]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	f04f 0c0a 	mov.w	ip, #10
 8007c74:	4620      	mov	r0, r4
 8007c76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c7a:	3a30      	subs	r2, #48	@ 0x30
 8007c7c:	2a09      	cmp	r2, #9
 8007c7e:	d903      	bls.n	8007c88 <_vfiprintf_r+0x1cc>
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0c6      	beq.n	8007c12 <_vfiprintf_r+0x156>
 8007c84:	9105      	str	r1, [sp, #20]
 8007c86:	e7c4      	b.n	8007c12 <_vfiprintf_r+0x156>
 8007c88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c8c:	4604      	mov	r4, r0
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e7f0      	b.n	8007c74 <_vfiprintf_r+0x1b8>
 8007c92:	ab03      	add	r3, sp, #12
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	462a      	mov	r2, r5
 8007c98:	4b12      	ldr	r3, [pc, #72]	@ (8007ce4 <_vfiprintf_r+0x228>)
 8007c9a:	a904      	add	r1, sp, #16
 8007c9c:	4630      	mov	r0, r6
 8007c9e:	f3af 8000 	nop.w
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	1c78      	adds	r0, r7, #1
 8007ca6:	d1d6      	bne.n	8007c56 <_vfiprintf_r+0x19a>
 8007ca8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007caa:	07d9      	lsls	r1, r3, #31
 8007cac:	d405      	bmi.n	8007cba <_vfiprintf_r+0x1fe>
 8007cae:	89ab      	ldrh	r3, [r5, #12]
 8007cb0:	059a      	lsls	r2, r3, #22
 8007cb2:	d402      	bmi.n	8007cba <_vfiprintf_r+0x1fe>
 8007cb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007cb6:	f7ff fdb7 	bl	8007828 <__retarget_lock_release_recursive>
 8007cba:	89ab      	ldrh	r3, [r5, #12]
 8007cbc:	065b      	lsls	r3, r3, #25
 8007cbe:	f53f af1f 	bmi.w	8007b00 <_vfiprintf_r+0x44>
 8007cc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cc4:	e71e      	b.n	8007b04 <_vfiprintf_r+0x48>
 8007cc6:	ab03      	add	r3, sp, #12
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	462a      	mov	r2, r5
 8007ccc:	4b05      	ldr	r3, [pc, #20]	@ (8007ce4 <_vfiprintf_r+0x228>)
 8007cce:	a904      	add	r1, sp, #16
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f000 f879 	bl	8007dc8 <_printf_i>
 8007cd6:	e7e4      	b.n	8007ca2 <_vfiprintf_r+0x1e6>
 8007cd8:	080087e2 	.word	0x080087e2
 8007cdc:	080087ec 	.word	0x080087ec
 8007ce0:	00000000 	.word	0x00000000
 8007ce4:	08007a97 	.word	0x08007a97
 8007ce8:	080087e8 	.word	0x080087e8

08007cec <_printf_common>:
 8007cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	4616      	mov	r6, r2
 8007cf2:	4698      	mov	r8, r3
 8007cf4:	688a      	ldr	r2, [r1, #8]
 8007cf6:	690b      	ldr	r3, [r1, #16]
 8007cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	bfb8      	it	lt
 8007d00:	4613      	movlt	r3, r2
 8007d02:	6033      	str	r3, [r6, #0]
 8007d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d08:	4607      	mov	r7, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	b10a      	cbz	r2, 8007d12 <_printf_common+0x26>
 8007d0e:	3301      	adds	r3, #1
 8007d10:	6033      	str	r3, [r6, #0]
 8007d12:	6823      	ldr	r3, [r4, #0]
 8007d14:	0699      	lsls	r1, r3, #26
 8007d16:	bf42      	ittt	mi
 8007d18:	6833      	ldrmi	r3, [r6, #0]
 8007d1a:	3302      	addmi	r3, #2
 8007d1c:	6033      	strmi	r3, [r6, #0]
 8007d1e:	6825      	ldr	r5, [r4, #0]
 8007d20:	f015 0506 	ands.w	r5, r5, #6
 8007d24:	d106      	bne.n	8007d34 <_printf_common+0x48>
 8007d26:	f104 0a19 	add.w	sl, r4, #25
 8007d2a:	68e3      	ldr	r3, [r4, #12]
 8007d2c:	6832      	ldr	r2, [r6, #0]
 8007d2e:	1a9b      	subs	r3, r3, r2
 8007d30:	42ab      	cmp	r3, r5
 8007d32:	dc26      	bgt.n	8007d82 <_printf_common+0x96>
 8007d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d38:	6822      	ldr	r2, [r4, #0]
 8007d3a:	3b00      	subs	r3, #0
 8007d3c:	bf18      	it	ne
 8007d3e:	2301      	movne	r3, #1
 8007d40:	0692      	lsls	r2, r2, #26
 8007d42:	d42b      	bmi.n	8007d9c <_printf_common+0xb0>
 8007d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d48:	4641      	mov	r1, r8
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c8      	blx	r9
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d01e      	beq.n	8007d90 <_printf_common+0xa4>
 8007d52:	6823      	ldr	r3, [r4, #0]
 8007d54:	6922      	ldr	r2, [r4, #16]
 8007d56:	f003 0306 	and.w	r3, r3, #6
 8007d5a:	2b04      	cmp	r3, #4
 8007d5c:	bf02      	ittt	eq
 8007d5e:	68e5      	ldreq	r5, [r4, #12]
 8007d60:	6833      	ldreq	r3, [r6, #0]
 8007d62:	1aed      	subeq	r5, r5, r3
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	bf0c      	ite	eq
 8007d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d6c:	2500      	movne	r5, #0
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	bfc4      	itt	gt
 8007d72:	1a9b      	subgt	r3, r3, r2
 8007d74:	18ed      	addgt	r5, r5, r3
 8007d76:	2600      	movs	r6, #0
 8007d78:	341a      	adds	r4, #26
 8007d7a:	42b5      	cmp	r5, r6
 8007d7c:	d11a      	bne.n	8007db4 <_printf_common+0xc8>
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e008      	b.n	8007d94 <_printf_common+0xa8>
 8007d82:	2301      	movs	r3, #1
 8007d84:	4652      	mov	r2, sl
 8007d86:	4641      	mov	r1, r8
 8007d88:	4638      	mov	r0, r7
 8007d8a:	47c8      	blx	r9
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	d103      	bne.n	8007d98 <_printf_common+0xac>
 8007d90:	f04f 30ff 	mov.w	r0, #4294967295
 8007d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d98:	3501      	adds	r5, #1
 8007d9a:	e7c6      	b.n	8007d2a <_printf_common+0x3e>
 8007d9c:	18e1      	adds	r1, r4, r3
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	2030      	movs	r0, #48	@ 0x30
 8007da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007da6:	4422      	add	r2, r4
 8007da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007db0:	3302      	adds	r3, #2
 8007db2:	e7c7      	b.n	8007d44 <_printf_common+0x58>
 8007db4:	2301      	movs	r3, #1
 8007db6:	4622      	mov	r2, r4
 8007db8:	4641      	mov	r1, r8
 8007dba:	4638      	mov	r0, r7
 8007dbc:	47c8      	blx	r9
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d0e6      	beq.n	8007d90 <_printf_common+0xa4>
 8007dc2:	3601      	adds	r6, #1
 8007dc4:	e7d9      	b.n	8007d7a <_printf_common+0x8e>
	...

08007dc8 <_printf_i>:
 8007dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dcc:	7e0f      	ldrb	r7, [r1, #24]
 8007dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007dd0:	2f78      	cmp	r7, #120	@ 0x78
 8007dd2:	4691      	mov	r9, r2
 8007dd4:	4680      	mov	r8, r0
 8007dd6:	460c      	mov	r4, r1
 8007dd8:	469a      	mov	sl, r3
 8007dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dde:	d807      	bhi.n	8007df0 <_printf_i+0x28>
 8007de0:	2f62      	cmp	r7, #98	@ 0x62
 8007de2:	d80a      	bhi.n	8007dfa <_printf_i+0x32>
 8007de4:	2f00      	cmp	r7, #0
 8007de6:	f000 80d2 	beq.w	8007f8e <_printf_i+0x1c6>
 8007dea:	2f58      	cmp	r7, #88	@ 0x58
 8007dec:	f000 80b9 	beq.w	8007f62 <_printf_i+0x19a>
 8007df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007df8:	e03a      	b.n	8007e70 <_printf_i+0xa8>
 8007dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dfe:	2b15      	cmp	r3, #21
 8007e00:	d8f6      	bhi.n	8007df0 <_printf_i+0x28>
 8007e02:	a101      	add	r1, pc, #4	@ (adr r1, 8007e08 <_printf_i+0x40>)
 8007e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e08:	08007e61 	.word	0x08007e61
 8007e0c:	08007e75 	.word	0x08007e75
 8007e10:	08007df1 	.word	0x08007df1
 8007e14:	08007df1 	.word	0x08007df1
 8007e18:	08007df1 	.word	0x08007df1
 8007e1c:	08007df1 	.word	0x08007df1
 8007e20:	08007e75 	.word	0x08007e75
 8007e24:	08007df1 	.word	0x08007df1
 8007e28:	08007df1 	.word	0x08007df1
 8007e2c:	08007df1 	.word	0x08007df1
 8007e30:	08007df1 	.word	0x08007df1
 8007e34:	08007f75 	.word	0x08007f75
 8007e38:	08007e9f 	.word	0x08007e9f
 8007e3c:	08007f2f 	.word	0x08007f2f
 8007e40:	08007df1 	.word	0x08007df1
 8007e44:	08007df1 	.word	0x08007df1
 8007e48:	08007f97 	.word	0x08007f97
 8007e4c:	08007df1 	.word	0x08007df1
 8007e50:	08007e9f 	.word	0x08007e9f
 8007e54:	08007df1 	.word	0x08007df1
 8007e58:	08007df1 	.word	0x08007df1
 8007e5c:	08007f37 	.word	0x08007f37
 8007e60:	6833      	ldr	r3, [r6, #0]
 8007e62:	1d1a      	adds	r2, r3, #4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	6032      	str	r2, [r6, #0]
 8007e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e70:	2301      	movs	r3, #1
 8007e72:	e09d      	b.n	8007fb0 <_printf_i+0x1e8>
 8007e74:	6833      	ldr	r3, [r6, #0]
 8007e76:	6820      	ldr	r0, [r4, #0]
 8007e78:	1d19      	adds	r1, r3, #4
 8007e7a:	6031      	str	r1, [r6, #0]
 8007e7c:	0606      	lsls	r6, r0, #24
 8007e7e:	d501      	bpl.n	8007e84 <_printf_i+0xbc>
 8007e80:	681d      	ldr	r5, [r3, #0]
 8007e82:	e003      	b.n	8007e8c <_printf_i+0xc4>
 8007e84:	0645      	lsls	r5, r0, #25
 8007e86:	d5fb      	bpl.n	8007e80 <_printf_i+0xb8>
 8007e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e8c:	2d00      	cmp	r5, #0
 8007e8e:	da03      	bge.n	8007e98 <_printf_i+0xd0>
 8007e90:	232d      	movs	r3, #45	@ 0x2d
 8007e92:	426d      	negs	r5, r5
 8007e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e98:	4859      	ldr	r0, [pc, #356]	@ (8008000 <_printf_i+0x238>)
 8007e9a:	230a      	movs	r3, #10
 8007e9c:	e011      	b.n	8007ec2 <_printf_i+0xfa>
 8007e9e:	6821      	ldr	r1, [r4, #0]
 8007ea0:	6833      	ldr	r3, [r6, #0]
 8007ea2:	0608      	lsls	r0, r1, #24
 8007ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ea8:	d402      	bmi.n	8007eb0 <_printf_i+0xe8>
 8007eaa:	0649      	lsls	r1, r1, #25
 8007eac:	bf48      	it	mi
 8007eae:	b2ad      	uxthmi	r5, r5
 8007eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8007eb2:	4853      	ldr	r0, [pc, #332]	@ (8008000 <_printf_i+0x238>)
 8007eb4:	6033      	str	r3, [r6, #0]
 8007eb6:	bf14      	ite	ne
 8007eb8:	230a      	movne	r3, #10
 8007eba:	2308      	moveq	r3, #8
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ec2:	6866      	ldr	r6, [r4, #4]
 8007ec4:	60a6      	str	r6, [r4, #8]
 8007ec6:	2e00      	cmp	r6, #0
 8007ec8:	bfa2      	ittt	ge
 8007eca:	6821      	ldrge	r1, [r4, #0]
 8007ecc:	f021 0104 	bicge.w	r1, r1, #4
 8007ed0:	6021      	strge	r1, [r4, #0]
 8007ed2:	b90d      	cbnz	r5, 8007ed8 <_printf_i+0x110>
 8007ed4:	2e00      	cmp	r6, #0
 8007ed6:	d04b      	beq.n	8007f70 <_printf_i+0x1a8>
 8007ed8:	4616      	mov	r6, r2
 8007eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ede:	fb03 5711 	mls	r7, r3, r1, r5
 8007ee2:	5dc7      	ldrb	r7, [r0, r7]
 8007ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ee8:	462f      	mov	r7, r5
 8007eea:	42bb      	cmp	r3, r7
 8007eec:	460d      	mov	r5, r1
 8007eee:	d9f4      	bls.n	8007eda <_printf_i+0x112>
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d10b      	bne.n	8007f0c <_printf_i+0x144>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	07df      	lsls	r7, r3, #31
 8007ef8:	d508      	bpl.n	8007f0c <_printf_i+0x144>
 8007efa:	6923      	ldr	r3, [r4, #16]
 8007efc:	6861      	ldr	r1, [r4, #4]
 8007efe:	4299      	cmp	r1, r3
 8007f00:	bfde      	ittt	le
 8007f02:	2330      	movle	r3, #48	@ 0x30
 8007f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f0c:	1b92      	subs	r2, r2, r6
 8007f0e:	6122      	str	r2, [r4, #16]
 8007f10:	f8cd a000 	str.w	sl, [sp]
 8007f14:	464b      	mov	r3, r9
 8007f16:	aa03      	add	r2, sp, #12
 8007f18:	4621      	mov	r1, r4
 8007f1a:	4640      	mov	r0, r8
 8007f1c:	f7ff fee6 	bl	8007cec <_printf_common>
 8007f20:	3001      	adds	r0, #1
 8007f22:	d14a      	bne.n	8007fba <_printf_i+0x1f2>
 8007f24:	f04f 30ff 	mov.w	r0, #4294967295
 8007f28:	b004      	add	sp, #16
 8007f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	f043 0320 	orr.w	r3, r3, #32
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	4833      	ldr	r0, [pc, #204]	@ (8008004 <_printf_i+0x23c>)
 8007f38:	2778      	movs	r7, #120	@ 0x78
 8007f3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	6831      	ldr	r1, [r6, #0]
 8007f42:	061f      	lsls	r7, r3, #24
 8007f44:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f48:	d402      	bmi.n	8007f50 <_printf_i+0x188>
 8007f4a:	065f      	lsls	r7, r3, #25
 8007f4c:	bf48      	it	mi
 8007f4e:	b2ad      	uxthmi	r5, r5
 8007f50:	6031      	str	r1, [r6, #0]
 8007f52:	07d9      	lsls	r1, r3, #31
 8007f54:	bf44      	itt	mi
 8007f56:	f043 0320 	orrmi.w	r3, r3, #32
 8007f5a:	6023      	strmi	r3, [r4, #0]
 8007f5c:	b11d      	cbz	r5, 8007f66 <_printf_i+0x19e>
 8007f5e:	2310      	movs	r3, #16
 8007f60:	e7ac      	b.n	8007ebc <_printf_i+0xf4>
 8007f62:	4827      	ldr	r0, [pc, #156]	@ (8008000 <_printf_i+0x238>)
 8007f64:	e7e9      	b.n	8007f3a <_printf_i+0x172>
 8007f66:	6823      	ldr	r3, [r4, #0]
 8007f68:	f023 0320 	bic.w	r3, r3, #32
 8007f6c:	6023      	str	r3, [r4, #0]
 8007f6e:	e7f6      	b.n	8007f5e <_printf_i+0x196>
 8007f70:	4616      	mov	r6, r2
 8007f72:	e7bd      	b.n	8007ef0 <_printf_i+0x128>
 8007f74:	6833      	ldr	r3, [r6, #0]
 8007f76:	6825      	ldr	r5, [r4, #0]
 8007f78:	6961      	ldr	r1, [r4, #20]
 8007f7a:	1d18      	adds	r0, r3, #4
 8007f7c:	6030      	str	r0, [r6, #0]
 8007f7e:	062e      	lsls	r6, r5, #24
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	d501      	bpl.n	8007f88 <_printf_i+0x1c0>
 8007f84:	6019      	str	r1, [r3, #0]
 8007f86:	e002      	b.n	8007f8e <_printf_i+0x1c6>
 8007f88:	0668      	lsls	r0, r5, #25
 8007f8a:	d5fb      	bpl.n	8007f84 <_printf_i+0x1bc>
 8007f8c:	8019      	strh	r1, [r3, #0]
 8007f8e:	2300      	movs	r3, #0
 8007f90:	6123      	str	r3, [r4, #16]
 8007f92:	4616      	mov	r6, r2
 8007f94:	e7bc      	b.n	8007f10 <_printf_i+0x148>
 8007f96:	6833      	ldr	r3, [r6, #0]
 8007f98:	1d1a      	adds	r2, r3, #4
 8007f9a:	6032      	str	r2, [r6, #0]
 8007f9c:	681e      	ldr	r6, [r3, #0]
 8007f9e:	6862      	ldr	r2, [r4, #4]
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7f8 f92c 	bl	8000200 <memchr>
 8007fa8:	b108      	cbz	r0, 8007fae <_printf_i+0x1e6>
 8007faa:	1b80      	subs	r0, r0, r6
 8007fac:	6060      	str	r0, [r4, #4]
 8007fae:	6863      	ldr	r3, [r4, #4]
 8007fb0:	6123      	str	r3, [r4, #16]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007fb8:	e7aa      	b.n	8007f10 <_printf_i+0x148>
 8007fba:	6923      	ldr	r3, [r4, #16]
 8007fbc:	4632      	mov	r2, r6
 8007fbe:	4649      	mov	r1, r9
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	47d0      	blx	sl
 8007fc4:	3001      	adds	r0, #1
 8007fc6:	d0ad      	beq.n	8007f24 <_printf_i+0x15c>
 8007fc8:	6823      	ldr	r3, [r4, #0]
 8007fca:	079b      	lsls	r3, r3, #30
 8007fcc:	d413      	bmi.n	8007ff6 <_printf_i+0x22e>
 8007fce:	68e0      	ldr	r0, [r4, #12]
 8007fd0:	9b03      	ldr	r3, [sp, #12]
 8007fd2:	4298      	cmp	r0, r3
 8007fd4:	bfb8      	it	lt
 8007fd6:	4618      	movlt	r0, r3
 8007fd8:	e7a6      	b.n	8007f28 <_printf_i+0x160>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4632      	mov	r2, r6
 8007fde:	4649      	mov	r1, r9
 8007fe0:	4640      	mov	r0, r8
 8007fe2:	47d0      	blx	sl
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d09d      	beq.n	8007f24 <_printf_i+0x15c>
 8007fe8:	3501      	adds	r5, #1
 8007fea:	68e3      	ldr	r3, [r4, #12]
 8007fec:	9903      	ldr	r1, [sp, #12]
 8007fee:	1a5b      	subs	r3, r3, r1
 8007ff0:	42ab      	cmp	r3, r5
 8007ff2:	dcf2      	bgt.n	8007fda <_printf_i+0x212>
 8007ff4:	e7eb      	b.n	8007fce <_printf_i+0x206>
 8007ff6:	2500      	movs	r5, #0
 8007ff8:	f104 0619 	add.w	r6, r4, #25
 8007ffc:	e7f5      	b.n	8007fea <_printf_i+0x222>
 8007ffe:	bf00      	nop
 8008000:	080087f3 	.word	0x080087f3
 8008004:	08008804 	.word	0x08008804

08008008 <__sflush_r>:
 8008008:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800800c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008010:	0716      	lsls	r6, r2, #28
 8008012:	4605      	mov	r5, r0
 8008014:	460c      	mov	r4, r1
 8008016:	d454      	bmi.n	80080c2 <__sflush_r+0xba>
 8008018:	684b      	ldr	r3, [r1, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	dc02      	bgt.n	8008024 <__sflush_r+0x1c>
 800801e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	dd48      	ble.n	80080b6 <__sflush_r+0xae>
 8008024:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008026:	2e00      	cmp	r6, #0
 8008028:	d045      	beq.n	80080b6 <__sflush_r+0xae>
 800802a:	2300      	movs	r3, #0
 800802c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008030:	682f      	ldr	r7, [r5, #0]
 8008032:	6a21      	ldr	r1, [r4, #32]
 8008034:	602b      	str	r3, [r5, #0]
 8008036:	d030      	beq.n	800809a <__sflush_r+0x92>
 8008038:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	0759      	lsls	r1, r3, #29
 800803e:	d505      	bpl.n	800804c <__sflush_r+0x44>
 8008040:	6863      	ldr	r3, [r4, #4]
 8008042:	1ad2      	subs	r2, r2, r3
 8008044:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008046:	b10b      	cbz	r3, 800804c <__sflush_r+0x44>
 8008048:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800804a:	1ad2      	subs	r2, r2, r3
 800804c:	2300      	movs	r3, #0
 800804e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008050:	6a21      	ldr	r1, [r4, #32]
 8008052:	4628      	mov	r0, r5
 8008054:	47b0      	blx	r6
 8008056:	1c43      	adds	r3, r0, #1
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	d106      	bne.n	800806a <__sflush_r+0x62>
 800805c:	6829      	ldr	r1, [r5, #0]
 800805e:	291d      	cmp	r1, #29
 8008060:	d82b      	bhi.n	80080ba <__sflush_r+0xb2>
 8008062:	4a2a      	ldr	r2, [pc, #168]	@ (800810c <__sflush_r+0x104>)
 8008064:	410a      	asrs	r2, r1
 8008066:	07d6      	lsls	r6, r2, #31
 8008068:	d427      	bmi.n	80080ba <__sflush_r+0xb2>
 800806a:	2200      	movs	r2, #0
 800806c:	6062      	str	r2, [r4, #4]
 800806e:	04d9      	lsls	r1, r3, #19
 8008070:	6922      	ldr	r2, [r4, #16]
 8008072:	6022      	str	r2, [r4, #0]
 8008074:	d504      	bpl.n	8008080 <__sflush_r+0x78>
 8008076:	1c42      	adds	r2, r0, #1
 8008078:	d101      	bne.n	800807e <__sflush_r+0x76>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	b903      	cbnz	r3, 8008080 <__sflush_r+0x78>
 800807e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008080:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008082:	602f      	str	r7, [r5, #0]
 8008084:	b1b9      	cbz	r1, 80080b6 <__sflush_r+0xae>
 8008086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800808a:	4299      	cmp	r1, r3
 800808c:	d002      	beq.n	8008094 <__sflush_r+0x8c>
 800808e:	4628      	mov	r0, r5
 8008090:	f7ff fbea 	bl	8007868 <_free_r>
 8008094:	2300      	movs	r3, #0
 8008096:	6363      	str	r3, [r4, #52]	@ 0x34
 8008098:	e00d      	b.n	80080b6 <__sflush_r+0xae>
 800809a:	2301      	movs	r3, #1
 800809c:	4628      	mov	r0, r5
 800809e:	47b0      	blx	r6
 80080a0:	4602      	mov	r2, r0
 80080a2:	1c50      	adds	r0, r2, #1
 80080a4:	d1c9      	bne.n	800803a <__sflush_r+0x32>
 80080a6:	682b      	ldr	r3, [r5, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0c6      	beq.n	800803a <__sflush_r+0x32>
 80080ac:	2b1d      	cmp	r3, #29
 80080ae:	d001      	beq.n	80080b4 <__sflush_r+0xac>
 80080b0:	2b16      	cmp	r3, #22
 80080b2:	d11e      	bne.n	80080f2 <__sflush_r+0xea>
 80080b4:	602f      	str	r7, [r5, #0]
 80080b6:	2000      	movs	r0, #0
 80080b8:	e022      	b.n	8008100 <__sflush_r+0xf8>
 80080ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080be:	b21b      	sxth	r3, r3
 80080c0:	e01b      	b.n	80080fa <__sflush_r+0xf2>
 80080c2:	690f      	ldr	r7, [r1, #16]
 80080c4:	2f00      	cmp	r7, #0
 80080c6:	d0f6      	beq.n	80080b6 <__sflush_r+0xae>
 80080c8:	0793      	lsls	r3, r2, #30
 80080ca:	680e      	ldr	r6, [r1, #0]
 80080cc:	bf08      	it	eq
 80080ce:	694b      	ldreq	r3, [r1, #20]
 80080d0:	600f      	str	r7, [r1, #0]
 80080d2:	bf18      	it	ne
 80080d4:	2300      	movne	r3, #0
 80080d6:	eba6 0807 	sub.w	r8, r6, r7
 80080da:	608b      	str	r3, [r1, #8]
 80080dc:	f1b8 0f00 	cmp.w	r8, #0
 80080e0:	dde9      	ble.n	80080b6 <__sflush_r+0xae>
 80080e2:	6a21      	ldr	r1, [r4, #32]
 80080e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080e6:	4643      	mov	r3, r8
 80080e8:	463a      	mov	r2, r7
 80080ea:	4628      	mov	r0, r5
 80080ec:	47b0      	blx	r6
 80080ee:	2800      	cmp	r0, #0
 80080f0:	dc08      	bgt.n	8008104 <__sflush_r+0xfc>
 80080f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080fa:	81a3      	strh	r3, [r4, #12]
 80080fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008104:	4407      	add	r7, r0
 8008106:	eba8 0800 	sub.w	r8, r8, r0
 800810a:	e7e7      	b.n	80080dc <__sflush_r+0xd4>
 800810c:	dfbffffe 	.word	0xdfbffffe

08008110 <_fflush_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	690b      	ldr	r3, [r1, #16]
 8008114:	4605      	mov	r5, r0
 8008116:	460c      	mov	r4, r1
 8008118:	b913      	cbnz	r3, 8008120 <_fflush_r+0x10>
 800811a:	2500      	movs	r5, #0
 800811c:	4628      	mov	r0, r5
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	b118      	cbz	r0, 800812a <_fflush_r+0x1a>
 8008122:	6a03      	ldr	r3, [r0, #32]
 8008124:	b90b      	cbnz	r3, 800812a <_fflush_r+0x1a>
 8008126:	f7ff f92b 	bl	8007380 <__sinit>
 800812a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0f3      	beq.n	800811a <_fflush_r+0xa>
 8008132:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008134:	07d0      	lsls	r0, r2, #31
 8008136:	d404      	bmi.n	8008142 <_fflush_r+0x32>
 8008138:	0599      	lsls	r1, r3, #22
 800813a:	d402      	bmi.n	8008142 <_fflush_r+0x32>
 800813c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800813e:	f7ff fb72 	bl	8007826 <__retarget_lock_acquire_recursive>
 8008142:	4628      	mov	r0, r5
 8008144:	4621      	mov	r1, r4
 8008146:	f7ff ff5f 	bl	8008008 <__sflush_r>
 800814a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800814c:	07da      	lsls	r2, r3, #31
 800814e:	4605      	mov	r5, r0
 8008150:	d4e4      	bmi.n	800811c <_fflush_r+0xc>
 8008152:	89a3      	ldrh	r3, [r4, #12]
 8008154:	059b      	lsls	r3, r3, #22
 8008156:	d4e1      	bmi.n	800811c <_fflush_r+0xc>
 8008158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800815a:	f7ff fb65 	bl	8007828 <__retarget_lock_release_recursive>
 800815e:	e7dd      	b.n	800811c <_fflush_r+0xc>

08008160 <fiprintf>:
 8008160:	b40e      	push	{r1, r2, r3}
 8008162:	b503      	push	{r0, r1, lr}
 8008164:	4601      	mov	r1, r0
 8008166:	ab03      	add	r3, sp, #12
 8008168:	4805      	ldr	r0, [pc, #20]	@ (8008180 <fiprintf+0x20>)
 800816a:	f853 2b04 	ldr.w	r2, [r3], #4
 800816e:	6800      	ldr	r0, [r0, #0]
 8008170:	9301      	str	r3, [sp, #4]
 8008172:	f7ff fca3 	bl	8007abc <_vfiprintf_r>
 8008176:	b002      	add	sp, #8
 8008178:	f85d eb04 	ldr.w	lr, [sp], #4
 800817c:	b003      	add	sp, #12
 800817e:	4770      	bx	lr
 8008180:	2000012c 	.word	0x2000012c

08008184 <__swhatbuf_r>:
 8008184:	b570      	push	{r4, r5, r6, lr}
 8008186:	460c      	mov	r4, r1
 8008188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818c:	2900      	cmp	r1, #0
 800818e:	b096      	sub	sp, #88	@ 0x58
 8008190:	4615      	mov	r5, r2
 8008192:	461e      	mov	r6, r3
 8008194:	da0d      	bge.n	80081b2 <__swhatbuf_r+0x2e>
 8008196:	89a3      	ldrh	r3, [r4, #12]
 8008198:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800819c:	f04f 0100 	mov.w	r1, #0
 80081a0:	bf14      	ite	ne
 80081a2:	2340      	movne	r3, #64	@ 0x40
 80081a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081a8:	2000      	movs	r0, #0
 80081aa:	6031      	str	r1, [r6, #0]
 80081ac:	602b      	str	r3, [r5, #0]
 80081ae:	b016      	add	sp, #88	@ 0x58
 80081b0:	bd70      	pop	{r4, r5, r6, pc}
 80081b2:	466a      	mov	r2, sp
 80081b4:	f000 f848 	bl	8008248 <_fstat_r>
 80081b8:	2800      	cmp	r0, #0
 80081ba:	dbec      	blt.n	8008196 <__swhatbuf_r+0x12>
 80081bc:	9901      	ldr	r1, [sp, #4]
 80081be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081c6:	4259      	negs	r1, r3
 80081c8:	4159      	adcs	r1, r3
 80081ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081ce:	e7eb      	b.n	80081a8 <__swhatbuf_r+0x24>

080081d0 <__smakebuf_r>:
 80081d0:	898b      	ldrh	r3, [r1, #12]
 80081d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081d4:	079d      	lsls	r5, r3, #30
 80081d6:	4606      	mov	r6, r0
 80081d8:	460c      	mov	r4, r1
 80081da:	d507      	bpl.n	80081ec <__smakebuf_r+0x1c>
 80081dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	6123      	str	r3, [r4, #16]
 80081e4:	2301      	movs	r3, #1
 80081e6:	6163      	str	r3, [r4, #20]
 80081e8:	b003      	add	sp, #12
 80081ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ec:	ab01      	add	r3, sp, #4
 80081ee:	466a      	mov	r2, sp
 80081f0:	f7ff ffc8 	bl	8008184 <__swhatbuf_r>
 80081f4:	9f00      	ldr	r7, [sp, #0]
 80081f6:	4605      	mov	r5, r0
 80081f8:	4639      	mov	r1, r7
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff fba8 	bl	8007950 <_malloc_r>
 8008200:	b948      	cbnz	r0, 8008216 <__smakebuf_r+0x46>
 8008202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008206:	059a      	lsls	r2, r3, #22
 8008208:	d4ee      	bmi.n	80081e8 <__smakebuf_r+0x18>
 800820a:	f023 0303 	bic.w	r3, r3, #3
 800820e:	f043 0302 	orr.w	r3, r3, #2
 8008212:	81a3      	strh	r3, [r4, #12]
 8008214:	e7e2      	b.n	80081dc <__smakebuf_r+0xc>
 8008216:	89a3      	ldrh	r3, [r4, #12]
 8008218:	6020      	str	r0, [r4, #0]
 800821a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800821e:	81a3      	strh	r3, [r4, #12]
 8008220:	9b01      	ldr	r3, [sp, #4]
 8008222:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008226:	b15b      	cbz	r3, 8008240 <__smakebuf_r+0x70>
 8008228:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800822c:	4630      	mov	r0, r6
 800822e:	f000 f81d 	bl	800826c <_isatty_r>
 8008232:	b128      	cbz	r0, 8008240 <__smakebuf_r+0x70>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	f023 0303 	bic.w	r3, r3, #3
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	81a3      	strh	r3, [r4, #12]
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	431d      	orrs	r5, r3
 8008244:	81a5      	strh	r5, [r4, #12]
 8008246:	e7cf      	b.n	80081e8 <__smakebuf_r+0x18>

08008248 <_fstat_r>:
 8008248:	b538      	push	{r3, r4, r5, lr}
 800824a:	4d07      	ldr	r5, [pc, #28]	@ (8008268 <_fstat_r+0x20>)
 800824c:	2300      	movs	r3, #0
 800824e:	4604      	mov	r4, r0
 8008250:	4608      	mov	r0, r1
 8008252:	4611      	mov	r1, r2
 8008254:	602b      	str	r3, [r5, #0]
 8008256:	f7f8 fef3 	bl	8001040 <_fstat>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	d102      	bne.n	8008264 <_fstat_r+0x1c>
 800825e:	682b      	ldr	r3, [r5, #0]
 8008260:	b103      	cbz	r3, 8008264 <_fstat_r+0x1c>
 8008262:	6023      	str	r3, [r4, #0]
 8008264:	bd38      	pop	{r3, r4, r5, pc}
 8008266:	bf00      	nop
 8008268:	20002f44 	.word	0x20002f44

0800826c <_isatty_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d06      	ldr	r5, [pc, #24]	@ (8008288 <_isatty_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7f8 fef2 	bl	8001060 <_isatty>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_isatty_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_isatty_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20002f44 	.word	0x20002f44

0800828c <_sbrk_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	4d06      	ldr	r5, [pc, #24]	@ (80082a8 <_sbrk_r+0x1c>)
 8008290:	2300      	movs	r3, #0
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	602b      	str	r3, [r5, #0]
 8008298:	f7f8 fefa 	bl	8001090 <_sbrk>
 800829c:	1c43      	adds	r3, r0, #1
 800829e:	d102      	bne.n	80082a6 <_sbrk_r+0x1a>
 80082a0:	682b      	ldr	r3, [r5, #0]
 80082a2:	b103      	cbz	r3, 80082a6 <_sbrk_r+0x1a>
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	bd38      	pop	{r3, r4, r5, pc}
 80082a8:	20002f44 	.word	0x20002f44

080082ac <abort>:
 80082ac:	b508      	push	{r3, lr}
 80082ae:	2006      	movs	r0, #6
 80082b0:	f000 f82c 	bl	800830c <raise>
 80082b4:	2001      	movs	r0, #1
 80082b6:	f7f8 fe73 	bl	8000fa0 <_exit>

080082ba <_raise_r>:
 80082ba:	291f      	cmp	r1, #31
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4605      	mov	r5, r0
 80082c0:	460c      	mov	r4, r1
 80082c2:	d904      	bls.n	80082ce <_raise_r+0x14>
 80082c4:	2316      	movs	r3, #22
 80082c6:	6003      	str	r3, [r0, #0]
 80082c8:	f04f 30ff 	mov.w	r0, #4294967295
 80082cc:	bd38      	pop	{r3, r4, r5, pc}
 80082ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80082d0:	b112      	cbz	r2, 80082d8 <_raise_r+0x1e>
 80082d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082d6:	b94b      	cbnz	r3, 80082ec <_raise_r+0x32>
 80082d8:	4628      	mov	r0, r5
 80082da:	f000 f831 	bl	8008340 <_getpid_r>
 80082de:	4622      	mov	r2, r4
 80082e0:	4601      	mov	r1, r0
 80082e2:	4628      	mov	r0, r5
 80082e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082e8:	f000 b818 	b.w	800831c <_kill_r>
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d00a      	beq.n	8008306 <_raise_r+0x4c>
 80082f0:	1c59      	adds	r1, r3, #1
 80082f2:	d103      	bne.n	80082fc <_raise_r+0x42>
 80082f4:	2316      	movs	r3, #22
 80082f6:	6003      	str	r3, [r0, #0]
 80082f8:	2001      	movs	r0, #1
 80082fa:	e7e7      	b.n	80082cc <_raise_r+0x12>
 80082fc:	2100      	movs	r1, #0
 80082fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008302:	4620      	mov	r0, r4
 8008304:	4798      	blx	r3
 8008306:	2000      	movs	r0, #0
 8008308:	e7e0      	b.n	80082cc <_raise_r+0x12>
	...

0800830c <raise>:
 800830c:	4b02      	ldr	r3, [pc, #8]	@ (8008318 <raise+0xc>)
 800830e:	4601      	mov	r1, r0
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	f7ff bfd2 	b.w	80082ba <_raise_r>
 8008316:	bf00      	nop
 8008318:	2000012c 	.word	0x2000012c

0800831c <_kill_r>:
 800831c:	b538      	push	{r3, r4, r5, lr}
 800831e:	4d07      	ldr	r5, [pc, #28]	@ (800833c <_kill_r+0x20>)
 8008320:	2300      	movs	r3, #0
 8008322:	4604      	mov	r4, r0
 8008324:	4608      	mov	r0, r1
 8008326:	4611      	mov	r1, r2
 8008328:	602b      	str	r3, [r5, #0]
 800832a:	f7f8 fe29 	bl	8000f80 <_kill>
 800832e:	1c43      	adds	r3, r0, #1
 8008330:	d102      	bne.n	8008338 <_kill_r+0x1c>
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	b103      	cbz	r3, 8008338 <_kill_r+0x1c>
 8008336:	6023      	str	r3, [r4, #0]
 8008338:	bd38      	pop	{r3, r4, r5, pc}
 800833a:	bf00      	nop
 800833c:	20002f44 	.word	0x20002f44

08008340 <_getpid_r>:
 8008340:	f7f8 be16 	b.w	8000f70 <_getpid>

08008344 <_init>:
 8008344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008346:	bf00      	nop
 8008348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800834a:	bc08      	pop	{r3}
 800834c:	469e      	mov	lr, r3
 800834e:	4770      	bx	lr

08008350 <_fini>:
 8008350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008352:	bf00      	nop
 8008354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008356:	bc08      	pop	{r3}
 8008358:	469e      	mov	lr, r3
 800835a:	4770      	bx	lr
